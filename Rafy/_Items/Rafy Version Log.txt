/*******************************************************
 * 
 * 创建时间：20110726
 * 说明：本文件用于记录 Rafy 框架版本号及相应的变更记录。格式如下：
 * 暂时分为以下几类：
 * 等级：★★公布、★重要
 * 外部：！修改接口、！删除接口、添加接口、添加功能、BUG修复、示例、RafySDK
 * 内部：结构、重构、内部修改。
 * （重构与内部修改相比，是不会造成任何功能变动的。）
 * 
*******************************************************/

3.70.3810
    ★★公布、★重要、添加接口
        在 Rafy 项目直接支持 NetStandard 2.0 的代码及发布。

3.65.3730
    BUG修复
        RdbTable 中使用 Lazy 时，需要考虑线程安全的问题。（并发时，Lazy.Value 抛出异常。）
        DataArchiver 应该保持原有的 ID 不变。（未完成）

3.65.3725
    添加功能、添加接口
        Logger 添加 LogInfo 方法，用于记录系统日志。
        添加 StampContext.DisableAutoSetStamps() 方法，用于禁用自动设置 Stamp 的功能。
        TreeIndexOption 分化为 TreeIndexOptionByNumber & TreeIndexOptionByChar
    内部修改
        优化 DbAccesser 中的参数传递。节省内存。
        完善 DbTypeConverters 中对 DbType 的支持，以及相关的单元测试。
    BUG修复
        Oracle 中只有 Date 类型，不应该返回 DateTime。
        MySqlMetaReader.LoadAllColumns 方法中使用了错误的列来加载数据类型。
        解决当 GetByIdList 返回的数据没有按照 Id 排序时，贪婪加载失败的问题。
        在更新一个没有 TreeIndex 的根节点的一般属性时，报错。（新生成的 TreeIndex 并没有用于查找子，反而是把所有的节点都查出来了 使用了 %.）
        在数据库中的 TreeIndex 不正确时，ResetTreeIndex 方法无法正确运行。

3.65.3705
    ★★公布、内部修改
        撤消 3.62.3569 的功能。改为：实体被删除后，实体的状态应该是 PersistenceStatus.Unchanged。详见注释： 
            * Deleted 后的数据的状态不再改为 New，否则会出现两个问题：
            * 1、实体列表在保存后，其中的某些项的状态是 New，整个列表的状态是 Dirty，会引起困惑，而且会引起再次保存会重复插入已经删除的数据的问题。
            * 2、也不能依靠在实体列表删除该项的做法，这同样会引起困惑。同样，如果开发者没有保存列表，而是直接保存实体时，
            * 同样会将状态为 New 的实体遗留在列表中。继续造成了第一条的问题。
            * 
            * 结论：
            * 保持实体的状态的设计为一种简单易理解的状态，更易被开发者接受：
            * - 三种实体的状态对应数据库的操作：（CDU）；
            * - 这些状态的数据在保存后，都会变更到 Unchanged 的状态。
            * - 不论实体的状态如何变换，都不会影响 EntityList 中的项的个数，除非直接操作 EntityList。
            * - 删除后的实体，在保存后的状态是 Unchanged，同样表示这个实体已经持久化到数据库中（只不过持久化操作是删除）。
            *      这时，如果再修改实体的属性时，状态会变更到 Modified。此类数据再进行保存，会因为数据库中没有相应的数据，而导致更新失效。
            *      （如果是幽灵删除则会更新成功……）（当然，其实这种场景较少。）
    内部修改
        Oracle 中只有 Date 类型，不应该返回 DateTime。

3.64.3700
    ★★公布、添加接口、内部修改
        重要性能优化：Sql 查询时，有索引的列需要设置其 DbDataParameter 的 DbType，否则会索引失效。
        添加 ColumnMeta.HasIndex 属性及方法，以配置某属性是否有索引。
            使用方法：Meta.Property(SALESDATA.CREATEDATESProperty).MapColumn().HasDbType(DbType.Date).HasIndex(true);

3.63.3696
    ！修改接口
        Rafy.DataTableMigartion 升级版本到 2.0，重构为 Rafy.DataArchiver。
        KeyProvider.GetEmptyIdForRefIdProperty 的方法重构为 GetEmptyId。
    内部修改
        优化性能：通过名称来加载数据行时，可以先把列的索引初始化好。
    添加接口
        添加 DbAccesserParameter 类型，用于辅助处理当 DbDataParameter 中没有设置 DbType，导致索引失效的问题。
    BUG修复
        设置已删除的实体的状态为 New 时，如果该实体在列表中，需要将它从这个列表中移除。（否则有可能再次保存此实体列表时，会将这个实体再次插入到数据库中）

3.62.3681
    BUG修复
        设置已删除的实体的状态为 New 时，需要重置其 Id。
        RdbDataProvider.DbSetting 的逻辑有问题。

3.62.3678
    添加功能
        添加新的 系统设置插件。（本插件中包含一些 IT 系统内常用的 “系统设置” 模块中的领域模型。如：全局配置（<see cref="GlobalSetting"/>）。）
        在该系统设置插件中，添加 数据字典 功能。
        为 LiteDataTable or DataTable 扩展 ToPOCO 方法。

3.62.3669
    内部修改
        由于从 3.59.3400 升级到 3.60.3300 时，版本号出错，需要加上相应的 100 个小版本号。

3.62.3569
    ★★公布、添加功能
        聚合实体被删除后，整个聚合中所有实体的状态都应该是 PersistenceStatus.New。
        Linq 查询，支持使用 Equals 方法来对属性进行判断。
    BUG修复
        采用截断的方式，解决 MySql 中外键名过长时，无法创建成功的问题。
    ★重要、重构
        提取 DbIdentifierQuoter 类型，用于统一处理 SqlRunGenerator、SqlGenerator、RdbTable、DbMigrationProvider 等类型中的数据库标识符逻辑。
        提取 DbTypeConverter 类型，用于统一处理数据库字段类型的转换。
            将数据库字段值与实体属性的值的转换，也封装到 DbTypeConverter 类型中。
        ColumnMeta.ColumnName 不再为空，必须有值。默认为属性名。
        TableMeta.TableName 不再为空，必须有值。默认为实体名。
    ！修改接口
        所有的 DataType （列的数据的类型）统一重命名为 DbType。
    重构
        使用 Lazy<string> 重构 RdbTable 中的代码，并同时提取 GenerateInsertSqlParameters 方法来优化参数获取的性能。
        MySqlBatchImporter.GenerateBatchUpdateStatement 方法重构。
        OracleBatchImporter 中不需要使用 CanInsert 来进行判断。
        RdbTable.CanInsert 属性重构为 ShouldInsert 方法。
        Entity._status 属性被合并到 PersistenceStatus 属性中。
    内部修改
        RdbTable 性能微调。
        MySql 数据库中，Bool 值需要映射为 BIT 类型。
        MapView 方法添加 mapDefaultProperties 参数。
    ！删除接口
        删除不再使用的 AggtSql 功能。

3.61.3531
    内部修改
        添加 CalllContextAppContextProvider 类型，用于通过 ExecutionContext 来实现跨线程的数据共享。

3.61.3530
    内部修改
        整理版本号，与 Nuget 服务器同步。
3.61.3430
    内部修改
        Oracle、MySql 下，进行分页时，都不自动使用 Id 来进行排序。该功能只在 SqlServer 中启用。
        ConverterFactory 需要更名为 DbConnectorFactory #61
        添加 CheckDuplucatePlugins 方法，用于检测：一个程序集只能声明一个插件类型！
    重构
        MySqlGenerator 重命名为 MySqlSqlGenerator。
    BUG修复
        解决sql In过滤条件数量大于1000报错
        修改 SQL SERVER 分页采用 RowNumber() Over
        解决“DbMigration 中生成的历史日志中的 MigrationClass 因为包含版本号，导致程序集升级后，无法加载类型，进而无法回滚”的问题。
        解决 MySql 下每个表都更新时间类型的字段 的问题。
        解决 OracleMetaReader 中没有把主键列的 IsIdentity 属性读取出来，导致删除表时没有删除对应的 Sequence 的问题。
        解决“#112 In、NotIn 语句中可以 Sql 注入”的问题。
        解决“#105 类型为decimal 的实体属性没有在 rafyentity.js 中生成”的问题。
    添加接口
        添加 EntityRepository ResolveInstance(Type repositoryType) 接口。
        添加 LiteDataTable.ToEntityList 扩展方法，支持把 LiteDataTable 直接转换为指定实体类型的 API #52

3.61.3425    
    内部修改

3.61.3340
    ★★公布、添加功能
        新增实体时 Identity 列支持手动赋值
        添加新的 Rafy.DataTableMigration 插件
        DbMigration创建数据库支持不生成外键

3.60.3300
    ★★公布、添加功能
        实体仓储支持多数据库连接字符串切换
    BUG修复
        OData特殊字符‘  “  \过滤报错的问题

3.59.3400
    ★★公布、添加功能
        支持MySql数据库
   BUG修复
        MySql数据类型varchar(max)改为text
   内部修改
        Rafy工程文件移除引用的MySQL.DLL文件

3.58.3323
    ★★公布、！修改接口、重构
        重构缓存模块。
        添加新的缓存组件 PerHttpRequestCache。
        RepositoryCache 增加 Cache 属性。
        CacheInstance 类移除，由使用者自行创建。
        MemoryCache 公共构造函数，可以替换内部依赖的 MemoryCache 。
    BUG修复
        幽灵插件在添加查询时，内部的子查询也需要添加相应的查询。
        实体属性反射时，过滤掉索引器属性
        树形子实体删除，需要用父实体的TreeChildren.Remove()方法
    内部修改
        删除无用的属性：ViewSql。

3.57.3307
    ★★公布、添加功能
        添加新的 Rafy.RBAC 插件。
    添加接口
        添加：P.RegisterExtension 方法。
    添加功能
        如果连接中的过期时间不是默认值，那么命令也使用这个作为过期时间。
    内部修改
        修复 SQLCE 的引用。
    BUG修复
        解决 RBAC 库中外键错误的问题。
        解决生成库时，外键无法生成的问题。
        解决 GetByTreeParentIndex 的问题。
        修复不支持 MAX 大小而导致无法生成 SQLCE 库的问题。
        解决幽灵框架在查询时，没有对 Join 的表、子查询中的表进行过滤的问题。

3.56.3249
    ★★公布、！修改接口、！删除接口、添加接口
        RepositoryFactory 重命名为 RepositoryFacade。
        RepositoryFactory.Concrete 方法重命名为 RepositoryFacade.ResolveInstance 方法。
        PhantomQueryContext 更名为 PhantomContext。
        PhantomContext 类型添加方法 DisablePhantomDeleting()。
    内部修改
        ColumnMeta.HasFKConstraint 的默认值，应该是 false。

3.55.3243
    ★★公布、！修改接口
        隐藏实体上不常用的属性：HasId、KeyProvider、IsTreeParentLoaded、TreeLevel、ParentList、FindParentEntity()、GetChildProperty<T>。
    ★★公布、添加接口
        ITreeEntity、IManagedPropertyObject、IEntityWithStatus、IEntityWithManagedProperties、IClonableEntity。

3.54.3233
    添加功能
        更新生成数据库注释功能：
            支持生成基类的字段。
            支持生成枚举的可用值。
            支持生成扩展字段的注释。
            生成动态字段的注释。（额外的字典）
        SQLTraceLog 格式变更：
            添加分号
            Oracle sql 问题。
        支持引用属性的扩展属性。
        添加 SqlAzureBatchImporter 类型。
    BUG修复
        冗余属性在反序列化时，值出错的问题。
        贪婪加载时，组合子属性中只有一个实体时，无法正常加载数据的问题。
        聚合子列表属性在序列化时，不应该应用 OutputListTotalCount 的逻辑。

3.54.3217
    添加功能
        SQLTraceLog 格式变更：
            为方便开发者调试，将参数嵌入到 SQL 中输出。
            注释所有不相关信息，方便开发者直接使用该文件作为 .sql 文件。
    添加接口
        ODataQueryCriteria 添加 MarkTreeFullLoaded 属性。
        RF.TransactionScope 方法添加 IsolationLevel level 参数。
    BUG修复
        由于 Id 使用了 Long 型，所以相应的 PageNumber、PageCount、EntityList.TotalCount、查询方法等，都应该使用 Long 型。
        LinqQuery 支持 LongCount 方法。
        解决 Clone 时没有 Clone 引用实体的问题。
        解决“MethodCaller 处理虚方法的被重写时错误”的问题。
        解决 Oracle 数据库中，不同用户拥有同名的序列时，批量导入无法正确查询指定序列的跨度大小的问题。
        解决 OData Filter 中字符串内部有括号的情况。
    内部修改
        ServerCache & ClientCache 更名为： ServerRepositoryCache & ClientRepositoryCache.
        CacheInstance => CacheInstances;
        Cache.Get 加锁。 
        删除暂时无用的 CoerceGetId、OnIdChanging 虚方法。
        BatchInsert 支持 ORACLE CLOB 类型的列。
            不特殊处理 CLOB、BLOB 类型，否则会造成 Oracle 死锁。
        HandlerRule 添加 NeedDataSource 属性

3.53.3188
    添加功能
        动态属性
            ManagedPropertyObject 类型支持动态属性。
            序列化和反序列化支持输出动态属性。
    添加接口
        序列化和反序列化支持更多的扩展点。
    内部修改
        支持 MAX 也映射为 Oracle-CLOB 类型的列。
    BUG修复
        冗余属性在查询数据库值时，需要禁用 EntityContext。
        Rafy.Domain.ORM.BatchSubmit 中 Id 应该使用 Long 型。

3.52.3172
    添加接口
        添加 EntityRepositoryQueryBase.QueryInBatches 方法，帮助开发者处理 In 参数过多无法查询的场景。
    添加功能
        添加新的 Rafy.FileStorage 插件。
        支持映射 Oracle-CLOB 类型的列。
        枚举的反序列化支持数值。
        Rafy.Accounts.User 添加 IsDisabled 属性与相关逻辑。
        支持扩展列表属性。
        支持扩展冗余属性。
        Rafy.SerialNumber 插件支持：可以拿到当前的流水号、根据日期查找这一天的下一个流水。
    添加接口
        序列化和反序列化支持更多的扩展点。
    内部修改
        添加 Rafy.FileStorage 相关的单元测试。
        修改 SingleConnectionTransactionScope 的命名错误。
        修改 IExtendable 接口。
    BUG修复
        Oracle 中的一些 BUG。
        解决了在当前库的其它用户（表空间）下已经存在同名的 Sequence 时，无法再生成 Sequence 的问题。
        解决 DomainPlugin.Intialize 方法的可重入性问题。
        RafySDK.
        EnumViewModel.Parse 方法需要兼容可空的枚举，即传入 Null、String.Empty 时，返回 null。

3.50.3138
    添加接口
        Accounts 插件
            User 添加 LoginFailedTimes、LastLoginTime 属性。并添加登录次数限制的逻辑。
            User 添加 Email 可以作为标识并登录。
            AccountController 中添加 Register 方法，实现注册逻辑。
            User 添加一些其它属性。
        JSON 序列化
            Result 的序列化支持 SerializeAsCamelProperty 属性的配置。
            EntityAwareJsonMediaTypeFormatter 支持一定的扩展点。
    BUG修复
        JSON 反序列化时没有反序列化 Id 的问题。
        JSON 反序列化时没有忽略只读属性的问题。
        GetBy(object criteria) 没有导向具体类型参数的问题。
    示例
        修复 JXC 中的一些错误编码。

3.50.3119
    ★★公布、结构
        将 Rafy,Rafy.Domain,Rafy.Utils,Rafy.DbMigration,Rafy.ManagedProperty 合并为一个程序集：Rafy。简化使用者的理解负担。

3.49.3112
    ★★公布、添加功能、！删除接口
        引入 Castle.DynamicProxy 动态代理来实现分布式调用，将仓库中同时出现的两个方法减为一个方法。
            降低了开发者对 GetAll、QueryList、FetchList 等方法的理解难度。
                EntityRepository 中删除 FetchList、FetchFirst、FetchCount、FetchTable 等方法。
                EntityRepository 中删除 QueryList 相关所有方法，只保留 QueryData 方法。
            仓库扩展类型中的查询实现方法降低了编写难度，与仓库中的查询编写模式保持一致，使扩展查询更易编写。
            使用新的仓库编写模式，修改了所有实体仓库中的查询方法，
            单元测试：修复所有单元测试，并在单元测试中删除了 IPropertyQuery 相关的测试。
        旧代码升级：
            1.要升级到此版本，需要对旧的代码进行升级，可以使用以下正则表达式来对原有仓库中的查询方法代码进行升级：
                查找：@"public (?<return>(?!LiteDataTable)\w+) (?<methodName>\w+)\((?<parameters>[\w\[\]\<\>\?,= ]*)\)(?<beforeReturn>\s+{((?!public).)+?)return this.Fetch\w+\(\w+ =>((?!public).)+?\)((?!public).)+?}((?!public).)+?private \w+List .+?{\s+(?<body2>.+?)return this.QueryList\((?<final>((?!public)[^\)])+?)\)( as \w+)?;"
                替换：@"[RepositoryQuery]
        public virtual ${return} ${methodName}(${parameters})${beforeReturn}${body2}return (${return})this.QueryData(${final});"
            2.更新 RafySDK，并更新代码段。
            3.使用"工具"->"更新实体自动代码"来更新仓库的自动代码。
