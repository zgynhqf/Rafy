<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rafy</name>
    </assembly>
    <members>
        <member name="T:Rafy.DbMigration.AutomationMigration">
            <summary>
            职责：通过数据库变更记录来生成迁移操作列表
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.DbMigration">
            <summary>
            表示一个可升级、可回滚的数据库升级项。
            
            该类及该类的子类需要支持 Xml 序列化，以支持存储到历史库中。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.DbMigration.TimeId">
            <summary>
            本次迁移对应的时间点。
            </summary>
            <value>
            The time unique identifier.
            </value>
        </member>
        <member name="P:Rafy.DbMigration.DbMigration.Description">
            <summary>
            迁移描述。
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="M:Rafy.DbMigration.DbMigration.GetMigrationType">
            <summary>
            是否自动生成的更新项
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.DbMigration.MigrationType">
            <summary>
            返回当前更新项的类型
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigration.Up">
            <summary>
            数据库升级
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigration.Down">
            <summary>
            数据库回滚
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigration.AddOperation(Rafy.DbMigration.MigrationOperation)">
            <summary>
            在 Up/Down 方法中调用此方法来添加迁移操作。
            </summary>
            <param name="operation"></param>
        </member>
        <member name="T:Rafy.DbMigration.MigrationType">
            <summary>
            迁移类型
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.MigrationType.AutoMigration">
            <summary>
            自动生成的更新项
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.MigrationType.ManualMigration">
            <summary>
            手工更新项
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.DbMigrationContext">
            <summary>
            支持功能：
            * 根据目标 Schema 自动升级
                此时可配置是否考虑数据丢失。
            * 手工更新
            * 升级历史日志功能
                根据历史记录回滚、再次升级
                客户端根据开发人员的历史记录升级自己的自己的数据库。
            * 防止数据丢失
                配置是否执行丢失操作。
                配置是否忽略数据丢失。
            * 数据库删除、备份、还原
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.DbMigrationContext.DbName">
            <summary>
            数据库的名称
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.DbMigrationContext.DbSetting">
            <summary>
            对应的数据库配置。
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.#ctor(Rafy.Data.DbSetting)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.DbMigration.DbMigrationContext"/> class.
            </summary>
            <param name="dbSetting">The database setting.</param>
            <exception cref="T:System.ArgumentNullException">dbSetting</exception>
        </member>
        <member name="P:Rafy.DbMigration.DbMigrationContext.ManualMigrations">
            <summary>
            存储所有可用的手工更新
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.DbMigrationContext.DatabaseMetaReader">
            <summary>
            数据库元数据读取器。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.DbMigrationContext.DbBackuper">
            <summary>
            数据库备份工具
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.DbMigrationContext.HistoryRepository">
            <summary>
            此属性如果为 null，表示不需要记录更新日志。
            也就是说每次都是根据数据库当前版本号来进行完整对比升级。
            默认值为 null。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.DbMigrationContext.DbVersionProvider">
            <summary>
            数据库版本号管理提供程序
            当纯粹使用手工更新时，可以只重写此属性而不重写 HistoryRepository 属性。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.DbMigrationContext.RunDataLossOperation">
            <summary>
            是否在自动迁移过程中执行 删除表、删除列 的操作。
            
            默认为 None，表示不执行任何数据丢失的操作。
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.MigrateTo(Rafy.DbMigration.Model.DestinationDatabase)">
            <summary>
            自动移植到目标结构
            注意，自动迁移时，同样执行相应时间段的手工迁移。
            </summary>
            <param name="destination">目标结构</param>
        </member>
        <member name="F:Rafy.DbMigration.DbMigrationContext.TimeIdSpan">
            <summary>
            保证 TimeId 之间的间隔在 10ms 以上
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.MigrateManually">
            <summary>
            使用场景：如果只是使用手工更新，可以调用此方法完成。
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.RefreshComments(Rafy.DbMigration.Model.Database)">
            <summary>
            使用指定的注释来更新数据库中的相关注释内容。
            更新注释前，请保证真实数据库中的包含了指定的库中的所有表和字段。
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.JumpToHistory(System.DateTime)">
            <summary>
            直接跳转到某个时间点的数据库
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.MigrateToHistory(System.DateTime)">
            <summary>
            只使用历史记录来升级到指定的时间点
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.RollbackToHistory(System.DateTime,Rafy.DbMigration.RollbackAction)">
            <summary>
            回滚到指定时间
            </summary>
            <param name="time">The time.</param>
            <param name="rollbackAction">The rollback action.</param>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.RollbackAll(Rafy.DbMigration.RollbackAction)">
            <summary>
            全部回滚历史记录
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.JumpToHistory(System.String)">
            <summary>
            直接跳转到某个时间点的数据库
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.MigrateToHistory(System.String)">
            <summary>
            只使用历史记录来升级到指定的时间点
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.RollbackToHistory(System.String,Rafy.DbMigration.RollbackAction)">
            <summary>
            回滚到指定时间
            </summary>
            <param name="time">The time.</param>
            <param name="rollbackAction">The rollback action.</param>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.GetDbVersion">
            <summary>
            获取数据库当前的版本号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.ResetDbVersion">
            <summary>
            把当前数据库的版本号设置为初始状态。
            
            调用此方法后，会导致：所有手动迁移再次运行。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.DbMigrationContext.SupportHistory">
            <summary>
            当前是否支持历史操作
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.GetHistories">
            <summary>
            获取当前所有的历史项
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.HasNoHistory">
            <summary>
            判断当前库的版本号是否处于最开始的状态。
            暂时把这个判断封装在方法内，以应对未来可能的 DefaultMinTime 变化
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.ResetHistory">
            <summary>
            删除所有历史记录
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.DatabaseExists">
            <summary>
            是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.DeleteDatabase">
            <summary>
            删除数据库
            以及它的历史信息、版本号信息。
            
            注意，如果需要保留整个历史库的升级信息，请使用 MigrateTo(RemovedDatabase) 方法。
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="E:Rafy.DbMigration.DbMigrationContext.ItemMigrated">
            <summary>
            每一个项成功升级后的通知事件。
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.MigratedEventArgs">
            <summary>
            每一个项成功升级后的通知事件参数
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.MigratedEventArgs.Index">
            <summary>
            当前项的索引
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.MigratedEventArgs.TotalCount">
            <summary>
            所有需要升级的项的总和
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.RollbackAction">
            <summary>
            回滚数据库时的行为
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.RollbackAction.None">
            <summary>
            不回滚。
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.RollbackAction.DeleteHistory">
            <summary>
            在回滚的同时删除数据库中的历史记录
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.DataLossOperation">
            <summary>
            造成数据丢失的操作。
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.DataLossOperation.None">
            <summary>
            不执行丢失数据的操作。
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.DataLossOperation.DropTable">
            <summary>
            删除表
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.DataLossOperation.DropColumn">
            <summary>
            删除列
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.DataLossOperation.All">
            <summary>
            所有操作。
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.DbMigrationSettings">
            <summary>
            数据迁移的一些默认配置。
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.DbMigrationSettings.PKFKDataTypeLength">
            <summary>
            可设置所有主键及外键的长度。默认为 40。
            </summary>
            <remarks>
            http://stackoverflow.com/questions/2863993/is-of-a-type-that-is-invalid-for-use-as-a-key-column-in-an-index
            SqlServer 主键最大 450、Oracle 主键最大 400。
            </remarks>
        </member>
        <member name="F:Rafy.DbMigration.DbMigrationSettings.StringColumnDataTypeLength">
            <summary>
            可设置所有一般字符串字段的默认长度。默认为 4000。
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.History.DbVersionProvider">
            <summary>
            版本号提供程序
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.History.DbVersionProvider.IsEmbaded">
            <summary>
            当前的值是否直接存储在当前数据库中。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.DbMigration.History.EmbadedDbVersionProvider">
            <summary>
            在当前数据库中直接嵌入一张表作为版本号存储地址的提供程序。
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.History.HistoryItem">
            <summary>
            数据库版本迁移历史记录
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.History.HistoryItem.TimeId">
            <summary>
            唯一的时间标记
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.History.HistoryItem.IsGenerated">
            <summary>
            是否自动生成
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.History.HistoryItem.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.History.HistoryItem.MigrationClass">
            <summary>
            对应的 MigrationClass 类全名
            
            注意：
            如果该类在运行时找不到（可能被升级或改名），那么这条历史记录将会被忽略。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.History.HistoryItem.MigrationContent">
            <summary>
            MigrationClass 类的对象的 xml 序列化数据。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.History.HistoryItem.DataObject">
            <summary>
            为实现层实现本类的存储，
            数据层真正的存储对象可以临时存储在这个字段中。
            
            此字段不需要存储到数据库中。
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.History.HistoryRepository">
            <summary>
            历史记录提供程序
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.History.HistoryRepository.AddAsExecuted(System.String,Rafy.DbMigration.DbMigration)">
            <summary>
            当某个迁移操作升级完成后，为它添加相应的历史记录。
            </summary>
            <param name="database"></param>
            <param name="migration"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.History.HistoryRepository.TryRestore(Rafy.DbMigration.History.HistoryItem)">
            <summary>
            从历史记录中还原迁移对象
            </summary>
            <param name="history"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.History.HistoryRepository.GetHistoriesCore(System.String)">
            <summary>
            获取指定数据库的所有历史记录
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.History.HistoryRepository.AddHistoryCore(System.String,Rafy.DbMigration.History.HistoryItem)">
            <summary>
            为指定数据库添加历史记录。
            </summary>
            <param name="database"></param>
            <param name="history"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.History.HistoryRepository.RemoveHistoryCore(System.String,Rafy.DbMigration.History.HistoryItem)">
            <summary>
            为指定数据库删除某条历史记录。
            </summary>
            <param name="database"></param>
            <param name="history"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.DbMigration.ManualDbMigration">
            <summary>
            表示一个可升级、可回滚的用户数据库升级项。
            
            该类及该类的子类需要支持 Xml 序列化，以支持存储到历史库中。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.ManualDbMigration.DbSetting">
            <summary>
            对应的数据库
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.ManualDbMigration.Type">
            <summary>
            手工迁移的类型：结构/数据。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.ManualDbMigration.TimeId">
            <summary>
            从类的命名中获取该更新的时间点。手工更新必须使用以下格式命名类：“_20110107_093040_ClassName”。
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">手工更新必须使用以下格式命名类：“_20110107_093040_ClassName”。</exception>
        </member>
        <member name="T:Rafy.DbMigration.ManualMigrationType">
            <summary>
            手动升级的类型
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.ManualMigrationType.Schema">
            <summary>
            手动结构升级
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.ManualMigrationType.Data">
            <summary>
            手动数据升级
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.ManualMigrationsContainer">
            <summary>
            手工迁移操作的容器对象
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.ManualMigrationsContainer.OnInit">
            <summary>
            子类重写此方法并调用 AddByAssembly 方法来自动添加某个程序集类所有对应该数据库的手工迁移
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.MigrationOperation">
            <summary>
            Operation 表示一个数据库升级的最小操作。
            同时，Operation 同样可以是一个单独的数据库升级项，所以它继承自 DbMigration。
            
            Operation 存在的意义是把数据库操作抽象化，以方便跨库。
            
            同时，所有的 MigrationOperation 作为迁移对象时，表示自动迁移。
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.MigrationOperation.Up">
            <summary>
            升级时，生成的操作即是本身。
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.MigrationRun">
            <summary>
            代表每一个数据库升级执行项
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.MigrationRun.Run(Rafy.Data.IDbAccesser)">
            <summary>
            通过指定的数据库连接执行
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:Rafy.DbMigration.Model.Column.#ctor(System.String,System.Data.DbType,System.String,Rafy.DbMigration.Model.Table)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.DbMigration.Model.Column"/> class.
            </summary>
            <param name="name">列名.</param>
            <param name="dataType">数据类型.</param>
            <param name="length">见 <see cref="P:Rafy.DbMigration.Model.Column.Length"/> 属性.</param>
            <param name="table">所在表.</param>
            <exception cref="T:System.ArgumentNullException">
            DataTable
            or
            name
            </exception>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.Table">
            <summary>
            所属表
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.DataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.Length">
            <summary>
            可指定列的长度
            可以指定数字，或者 MAX。
            如果是空，则使用默认长度。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.IsRequired">
            <summary>
            是否必须的
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.IsPrimaryKey">
            <summary>
            是否主键
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.IsForeignKey">
            <summary>
            获取是否外键
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.IsIdentity">
            <summary>
            表示这个主键列是否为自增列。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.Comment">
            <summary>
            列的注释。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.ForeignConstraint">
            <summary>
            如果是外键，这表示外键表
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Model.Database">
            <summary>
            表示一个数据库的 Schema 定义
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Database.Name">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Database.Removed">
            <summary>
            数据库并不存在
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Database.Tables">
            <summary>
            数据库中所包含的表
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Model.Database.FindTable(System.String)">
            <summary>
            通过表名找到对应的表。
            忽略大小写。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.Model.Database.OrderByRelations">
            <summary>
            根据外键关系为表排序
            有外键关系的表放在后面，没有关系的表放在前面。（被引用的表放在引用表的前面。）
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Model.DestinationDatabase">
            <summary>
            用于自动升级的目标数据库
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.DestinationDatabase.IgnoreTables">
            <summary>
            在自动升级过程中，需要忽略掉的表的列表。
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Model.DestinationDatabase.IsIgnored(System.String)">
            <summary>
            判断某个表是否已经被忽略升级。
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.DbMigration.Model.ChangeType">
            <summary>
            更改类型
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Model.ColumnChanges">
            <summary>
            两个列的区别记录
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ColumnChanges.OldColumn">
            <summary>
            旧列
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ColumnChanges.NewColumn">
            <summary>
            新列
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ColumnChanges.IsRequiredChanged">
            <summary>
            是否更新了是否为空的设定
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ColumnChanges.IsPrimaryKeyChanged">
            <summary>
            是否是主键改变
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ColumnChanges.IsDbTypeChanged">
            <summary>
            是否是类型改变
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ColumnChanges.ForeignRelationChangeType">
            <summary>
            添加/删除/修改了 外键关系
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Model.DatabaseChanges">
            <summary>
            数据库的变更记录
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Model.ModelDiffer.Distinguish(Rafy.DbMigration.Model.Database,Rafy.DbMigration.Model.DestinationDatabase)">
            <summary>
            计算出两个数据库元数据的所有表差别
            </summary>
            <param name="oldDatabase">旧数据库</param>
            <param name="newDatabase">新数据库</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.Model.ModelDiffer.Distinguish(Rafy.DbMigration.Model.Table,Rafy.DbMigration.Model.Table)">
            <summary>
            计算出新旧表之间的数据列差别
            </summary>
            <param name="oldTable">旧表</param>
            <param name="newTable">新表</param>
            <returns>
            返回表之间区别，如果没有区别，则返回null
            </returns>
        </member>
        <member name="T:Rafy.DbMigration.Model.TableChanges">
            <summary>
            两个表的变更记录
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.TableChanges.ChangeType">
            <summary>
            当表的字段被增/删/改了，则这个值为Changed。
            其它则是表示表被删除/增加。
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Model.ForeignConstraint">
            <summary>
            表示某列对应外键关系
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Model.ForeignConstraint.#ctor(Rafy.DbMigration.Model.Column)">
            <summary>
            
            </summary>
            <param name="primaryKeyColumn">这个外键对应的主键表的列（不一定是主键列，可以是unique列等）</param>
        </member>
        <member name="M:Rafy.DbMigration.Model.ForeignConstraint.Init(Rafy.DbMigration.Model.Column)">
            <summary>
            
            </summary>
            <param name="fkColumn">这个列的外键</param>
        </member>
        <member name="P:Rafy.DbMigration.Model.ForeignConstraint.ConstraintName">
            <summary>
            约束名
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ForeignConstraint.FKColumn">
            <summary>
            外键关系的所有者，外键列。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ForeignConstraint.PKColumn">
            <summary>
            这个外键对应的主键表的列（不一定是主键列，可以是unique列等）
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ForeignConstraint.NeedDeleteCascade">
            <summary>
            是否级联删除
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ForeignConstraint.PKTable">
            <summary>
            这个外键对应的主键表
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Model.IMetadataReader">
            <summary>
            数据库 Schema 的读取器
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Model.IMetadataReader.Read">
            <summary>
            读取整个库的元数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.DbMigration.Model.IDestinationDatabaseReader">
            <summary>
            目标数据库 Schema 的读取器
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Model.IDestinationDatabaseReader.Read">
            <summary>
            读取整个库的元数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.DbMigration.Model.Table">
            <summary>
            表示数据库表的 Schema 定义
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Table.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Table.Comment">
            <summary>
            表的注释。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Table.DataBase">
            <summary>
            所在的数据库 Schema
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Table.Columns">
            <summary>
            表中的所有列定义
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Model.Table.FindPrimaryColumn">
            <summary>
            找到第一个主键定义
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.Model.Table.FindNormalColumns">
            <summary>
            找到除主键外的所有列
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.Model.Table.GetForeignTables">
            <summary>
            这个表引用的外键表
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Model.Table.FindColumn(System.String)">
            <summary>
            通过列名找到对应的列
            忽略大小写。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.Model.Table.AddColumn(System.String,System.Data.DbType,System.String,System.Boolean,System.Boolean,Rafy.DbMigration.Model.ForeignConstraint)">
            <summary>
            添加一列到这个表中。
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="length">The length.</param>
            <param name="isRequired">if set to <c>true</c> [is required].</param>
            <param name="isPrimaryKey">if set to <c>true</c> [is primary key].</param>
            <param name="foreignConstraint">The foreign constraint.</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.DbMigration.Operations.FKConstraintOperation.DependentTable">
            <summary>
            FK Table
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Operations.FKConstraintOperation.DependentTableColumn">
            <summary>
            FK Table Column
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Operations.FKConstraintOperation.PrincipleTable">
            <summary>
            PK Table
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Operations.FKConstraintOperation.PrincipleTableColumn">
            <summary>
            PK Table Column
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Operations.RunAction">
            <summary>
            操作执行某个具体的代码段
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Operations.RunSql">
            <summary>
            该操作需要执行某个特定的 SQL
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Operations.TableOperation.PKName">
            <summary>
            如果有主键，则这个字段表示主键的名称
            目前只简单地支持单一主键
            
            注意，这个主键目前还会是自增长的列。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Operations.TableOperation.PKDataType">
            <summary>
            如果有主键，则这个字段表示主键的名称
            目前只简单地支持单一主键
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Operations.TableOperation.PKLength">
            <summary>
            主键列的长度。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Operations.TableOperation.PKIdentity">
            <summary>
            主键是否为自增列。
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Operations.UpdateComment">
            <summary>
            更新数据库中表或列的注释的操作。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Operations.UpdateComment.TableName">
            <summary>
            要添加注释的表的名字
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Operations.UpdateComment.ColumnName">
            <summary>
            要添加注释的表的名字。
            如果本字段为空，则表示给表加注释，而不是给字段加注释。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Operations.UpdateComment.Comment">
            <summary>
            注释内容
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.DbMetaReader">
            <summary>
            数据库的元数据读取器
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMetaReader.LoadAllTables(Rafy.DbMigration.Model.Database)">
            <summary>
            添加所有表
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:Rafy.DbMigration.DbMetaReader.LoadAllColumns(Rafy.DbMigration.Model.Database)">
            <summary>
            加载每个表的所有列
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:Rafy.DbMigration.DbMetaReader.LoadAllConstraints(Rafy.DbMigration.Model.Database)">
            <summary>
            加载外键
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:Rafy.DbMigration.DbMetaReader.DealColumnConstraints(Rafy.DbMigration.Model.Column,System.Collections.Generic.IList{Rafy.DbMigration.DbMetaReader.Constraint})">
            <summary>
            处理主键和外键
            </summary>
            <param name="column"></param>
            <param name="allConstraints">所有的约束</param>
        </member>
        <member name="T:Rafy.DbMigration.DbMigrationProvider">
            <summary>
            数据库迁移的提供器。
            
            各种不同的数据库使用不同的提供器程序。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.DbMigrationProvider.DbSetting">
            <summary>
            该提供器可用的数据库信息
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationProvider.CreateSchemaReader">
            <summary>
            创建一个数据库结构读取器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationProvider.CreateRunGenerator">
            <summary>
            创建一个执行生成器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationProvider.CreateDbBackuper">
            <summary>
            创建一个数据库备份器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbTypeHelper.ConvertFromCLRType(System.Type)">
            <summary>
            返回 CLR 类型默认映射的数据库的类型。
            </summary>
            <param name="clrType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbTypeHelper.GetDefaultValue(System.Data.DbType)">
            <summary>
            获取type的默认值sql表达式
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbTypeHelper.IsCompatible(System.Data.DbType,System.Data.DbType)">
            <summary>
            由于不同的 DbType 映射到库中后的类型可能是相同的，所以这里需要对类型进行兼容性判断。
            </summary>
            <param name="oldColumnType"></param>
            <param name="newColumnType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.Oracle.OracleDbTypeHelper.ConvertToOracleTypeString(System.Data.DbType,System.String)">
            <summary>
            把 DbType 转换为 Oracle 中的数据类型
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="length">The length.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Rafy.DbMigration.Oracle.OracleDbTypeHelper.ConvertFromOracleTypeString(System.String)">
            <summary>
            把 Oracle 中的数据类型 转换为 DbType
            </summary>
            <param name="lowerSqlType">Type of the lower SQL.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:Rafy.DbMigration.Oracle.OracleMetaReader">
            <summary>
            Oracle 数据库的元数据读取器
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Oracle.OracleMigrationProvider">
            <summary>
            Oracle 的数据库迁移提供程序
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Oracle.OracleMigrationProvider.LimitOracleIdentifier(System.String)">
            <summary>
            Oracle 的标识符都不能超过 30 个字符。这个方法可以把传入的字符串剪裁到 30 个字符，并尽量保持信息。
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.Oracle.OracleMigrationProvider.SequenceName(System.String,System.String)">
            <summary>
            返回指定的表对应的序列的名称。
            </summary>
            <param name="tableName"></param>
            <param name="pkName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.Oracle.OracleMigrationProvider.PrepareIdentifier(System.String)">
            <summary>
            准备标识符名。
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.DbMigration.Oracle.OracleRunGenerator">
            <summary>
            Oracle 的执行项生成器
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Oracle.OracleRunGenerator.PrepareFKConstraintName(Rafy.DbMigration.Operations.FKConstraintOperation)">
            <summary>
            由于 Oracle 中 FK 最长是 30 个字符，所以这里需要对多余的字符串做截取操作。
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.DbMigration.SqlServerCe.CreateDbMigrationRun.CommonUtils">
            <summary>
            本类完全 Copy 自 System.Data.SqlServerCe 程序集
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.SqlServerCe.SqlServerCeMetaReader">
            <summary>
            SqlServer CE 数据库的元数据读取器
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.SqlServerCe.SqlServerCeMigrationProvider">
            <summary>
            SqlServer CE4 的数据库迁移提供程序
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.SqlServerCe.SqlServerCeRunGenerator">
            <summary>
            SqlServer 的执行项生成器
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.SqlServer.SqlDbTypeHelper.ConvertToSQLTypeString(System.Data.DbType,System.String)">
            <summary>
            把 DbType 转换为 SqlServer 中的数据类型
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="length">The length.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Rafy.DbMigration.SqlServer.SqlDbTypeHelper.ConvertFromSQLTypeString(System.String)">
            <summary>
            把 SqlServer 中的数据类型 转换为 DbType
            </summary>
            <param name="sqlType">Type of the SQL.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:Rafy.DbMigration.SqlServer.SqlServerMetaReader">
            <summary>
            SqlServer 2005 数据库的元数据读取器
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.SqlServer.SqlServerMetaReader.LoadAllTables(Rafy.DbMigration.Model.Database)">
            <summary>
            添加所有表
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:Rafy.DbMigration.SqlServer.SqlServerMetaReader.LoadAllColumns(Rafy.DbMigration.Model.Database)">
            <summary>
            加载每个表的所有列
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:Rafy.DbMigration.SqlServer.SqlServerMetaReader.ReadAllIdentities">
            <summary>
            查询当前数据库中所有的 Identity 列。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.DbMigration.SqlServer.SqlServerMigrationProvider">
            <summary>
            SqlServer 2008 的数据库迁移提供程序
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.SqlServer.SqlServerRunGenerator">
            <summary>
            SqlServer 的执行项生成器
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.RunGenerator">
            <summary>
            数据库执行项 MigrationRun 的生成器
            
            子类继承此类以实现不同类型数据库对指定数据库操作的执行项生成。
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.RunGenerator.Distribute(Rafy.DbMigration.MigrationOperation)">
            <summary>
            把抽象的操作分发到具体的生成方法上。
            </summary>
            <param name="op"></param>
        </member>
        <member name="M:Rafy.DbMigration.RunGenerator.Writer">
            <summary>
            获取一个缩进的 TextWriter 用于写 SQL。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.RunGenerator.AddRun(System.CodeDom.Compiler.IndentedTextWriter)">
            <summary>
            添加一个 SQL 语句的执行项
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Rafy.DbMigration.RunGenerator.AddRun(Rafy.DbMigration.MigrationRun)">
            <summary>
            添加一个执行项
            </summary>
            <param name="run"></param>
        </member>
        <member name="T:Rafy.DbMigration.ActionMigrationRun">
            <summary>
            执行某段特定的代码
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.GenerationExceptionRun">
            <summary>
            在 Generate 的过程中最好不要出现异常，可以使用此类来延迟异常的抛出，在真正开始执行 Sql（Run） 时才抛出异常。
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.TSqlRunGenerator">
            <summary>
            T-SQL 生成的基类
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.TSqlRunGenerator.GenerateColumnDeclaration(System.CodeDom.Compiler.IndentedTextWriter,System.String,System.Data.DbType,System.String,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Generates the column declaration.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="columnName">Name of the column.</param>
            <param name="dataType">Type of the data.</param>
            <param name="length">The length.</param>
            <param name="isRequired">if set to <c>true</c> [is required].</param>
            <param name="isPKorFK">在没有给出字段长度的情况下，如果这个字段是一个主键或外键，则需要自动限制它的长度。</param>
        </member>
        <member name="T:Rafy.Domain.BinaryOperator">
            <summary>
            二位运算类型
            </summary>
        </member>
        <member name="F:Rafy.Domain.BinaryOperator.And">
            <summary>
            使用 And 连接。
            </summary>
        </member>
        <member name="F:Rafy.Domain.BinaryOperator.Or">
            <summary>
            使用 Or 连接。
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataPortalLocation">
            <summary>
            数据访问层执行的地点
            </summary>
        </member>
        <member name="F:Rafy.Domain.DataPortalLocation.Dynamic">
            <summary>
            根据 RafyEnvironment.Location 而判断是否在远程服务端执行。
            
            此种状态下，目前只有 RafyLocation.WPFClient 的位置时，才会选择在远程服务器执行。20130118
            </summary>
        </member>
        <member name="F:Rafy.Domain.DataPortalLocation.Local">
            <summary>
            将在当前机器执行。
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataPortal.ClientContextItem`1">
            <summary>
            表示 <see cref="P:Rafy.Domain.DataPortal.DistributionContext.ClientContext"/> 中的一个项。
            客户端提供的范围数据。
            这些数据只会从客户端向服务端传输。
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Rafy.Domain.DataPortal.ClientContextItem`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.DataPortal.ClientContextItem`1"/> class.
            </summary>
            <param name="key">此项在 <see cref="P:Rafy.Domain.DataPortal.DistributionContext.ClientContext" /> 中的 Key。</param>
            <param name="defaultValue">如果 <see cref="P:Rafy.Domain.DataPortal.DistributionContext.ClientContext" /> 中没有值时，本项对应的默认值。</param>
        </member>
        <member name="T:Rafy.Domain.DataPortal.DataPortalApi">
            <summary>
            数据门户。
            内部封装了对数据层的调用，如果是远程，则使用对应的代理来访问，这使得单机版、网络版的调用完全一致。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.DataPortalApi.Fetch(System.Type,System.Object,Rafy.Domain.DataPortalLocation)">
            <summary>
            使用门户查询
            </summary>
            <param name="objectType"></param>
            <param name="criteria"></param>
            <param name="loc">如果一个数据层方法需要在本地执行，应该在把本参数指明为 Local。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataPortal.DataPortalApi.Update(System.Object,Rafy.Domain.DataPortalLocation)">
            <summary>
            Called by the business object's Save() method to
            insert, update or delete an object in the database.
            </summary>
            <param name="obj">A reference to the business object to be updated.</param>
            <param name="loc">The loc.</param>
            <returns>
            A reference to the updated business object.
            </returns>
            <remarks>
            Note that this method returns a reference to the updated business object.
            If the server-side DataPortal is running remotely, this will be a new and
            different object from the original, and all object references MUST be updated
            to use this new object.
            </remarks>
        </member>
        <member name="M:Rafy.Domain.DataPortal.DataPortalApi.CreateDataPortalContext">
            <summary>
            Creates the data portal context.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.DataPortal.DataPortalException">
            <summary>
            数据访问异常
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataPortal.DistributionContext">
            <summary>
            分布式数据上下文。
            在这个类中控制：调用者端（客户端）与被调用者端（服务端）之间的范围性数据的传输。
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.DistributionContext.ClientContext">
            <summary>
            客户端提供的范围数据。
            这些数据只会从客户端向服务端传输。
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.DistributionContext.GlobalContext">
            <summary>
            伴随每次传输的上下文数据。
            这些数据会伴随客户端到服务端、服务端到客户端的双向传输。
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataPortal.GlobalContextItem`1">
            <summary>
            表示 <see cref="P:Rafy.Domain.DataPortal.DistributionContext.GlobalContext"/> 中的一个项。
            伴随每次传输的上下文数据。
            这些数据会伴随客户端到服务端、服务端到客户端的双向传输。
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Rafy.Domain.DataPortal.GlobalContextItem`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.DataPortal.GlobalContextItem`1" /> class.
            </summary>
            <param name="key">此项在 <see cref="P:Rafy.Domain.DataPortal.DistributionContext.GlobalContext" /> 中的 Key。</param>
            <param name="defaultValue">如果 <see cref="P:Rafy.Domain.DataPortal.DistributionContext.GlobalContext" /> 中没有值时，本项对应的默认值。</param>
        </member>
        <member name="T:Rafy.Domain.DataPortal.IDataPortalProxy">
            <summary>
            客户端的代理
            
            它同样有 IDataPortalServer 的所有方法。
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataPortal.DataPortalContext">
            <summary>
            Provides consistent context information between the client
            and server DataPortal objects. 
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.DataPortalContext.Principal">
            <summary>
            The current principal object
            if CSLA security is being used.
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.DataPortalContext.ClientCulture">
            <summary>
            The culture setting on the client
            workstation.
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.DataPortalContext.ClientUICulture">
            <summary>
            The culture setting on the client
            workstation.
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataPortal.DataPortalFacade">
            <summary>
            Implements the server-side DataPortal 
            message router as discussed
            in Chapter 4.
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.DataPortalFacade.Fetch(System.Type,System.Object,Rafy.Domain.DataPortal.DataPortalContext)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context"><see cref="T:Rafy.Domain.DataPortal.DataPortalContext" /> object passed to the server.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataPortal.DataPortalFacade.Update(System.Object,Rafy.Domain.DataPortal.DataPortalContext)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context">
            <see cref="T:Rafy.Domain.DataPortal.DataPortalContext" /> object passed to the server.
            </param>
        </member>
        <member name="T:Rafy.Domain.DataPortal.DataPortalResult">
            <summary>
            Returns data from the server-side DataPortal to the 
            client-side DataPortal. Intended for internal CSLA .NET
            use only.
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.DataPortalResult.ReturnObject">
            <summary>
            The business object being returned from
            the server.
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.DataPortalResult.GlobalContext">
            <summary>
            The global context being returned from
            the server.
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.DataPortalResult.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.DataPortalResult.#ctor(System.Object)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="returnObject">Object to return as part
            of the result.</param>
        </member>
        <member name="T:Rafy.Domain.DataPortal.FinalDataPortal">
            <summary>
            最终调用实体的 IDataPortalServer 门户实现。
            </summary>
        </member>
        <member name="F:Rafy.Domain.DataPortal.FinalDataPortal.CurrentQueryCriteriaItem">
            <summary>
            当前查询正在使用的单一条件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.FinalDataPortal.CurrentIEQC">
            <summary>
            当前正在使用的查询参数
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.FinalDataPortal.Fetch(System.Type,System.Object,Rafy.Domain.DataPortal.DataPortalContext)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context"><see cref="T:Rafy.Domain.DataPortal.DataPortalContext" /> object passed to the server.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataPortal.FinalDataPortal.Update(System.Object,Rafy.Domain.DataPortal.DataPortalContext)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context">
            <see cref="T:Rafy.Domain.DataPortal.DataPortalContext" /> object passed to the server.
            </param>
        </member>
        <member name="M:Rafy.Domain.DataPortal.FinalDataPortal.Update(System.Object)">
            <summary>
            直接更新某个对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Rafy.Domain.DataPortal.IDataPortalServer">
            <summary>
            Interface implemented by server-side data portal
            components.
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.IDataPortalServer.Fetch(System.Type,System.Object,Rafy.Domain.DataPortal.DataPortalContext)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context"><see cref="T:Rafy.Domain.DataPortal.DataPortalContext" /> object passed to the server.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataPortal.IDataPortalServer.Update(System.Object,Rafy.Domain.DataPortal.DataPortalContext)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context"><see cref="T:Rafy.Domain.DataPortal.DataPortalContext" /> object passed to the server.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.DataPortal.WCF.ClientProxy">
            <summary>
            Implements a data portal proxy to relay data portal
            calls to a remote application server by using WCF.
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.WCF.ClientProxy.GetChannelFactory">
            <summary>
            Returns an instance of the channel factory
            used by GetProxy() to create the WCF proxy
            object.
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.WCF.ClientProxy.Fetch(System.Type,System.Object,Rafy.Domain.DataPortal.DataPortalContext)">
            <summary>
            Called by <see cref="N:Rafy.Domain.DataPortal" /> to load an
            existing business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context"><see cref="T:Rafy.Domain.DataPortal.DataPortalContext" /> object passed to the server.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataPortal.WCF.ClientProxy.Update(System.Object,Rafy.Domain.DataPortal.DataPortalContext)">
            <summary>
            Called by <see cref="N:Rafy.Domain.DataPortal" /> to update a
            business object.
            </summary>
            <param name="obj">The business object to update.</param>
            <param name="context">
            <see cref="T:Rafy.Domain.DataPortal.DataPortalContext" /> object passed to the server.
            </param>
        </member>
        <member name="T:Rafy.Domain.DataPortal.WCF.FetchRequest">
            <summary>
            Request message for retrieving
            an existing business object.
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.WCF.FetchRequest.ObjectType">
            <summary>
            The type of the business object
            to be retrieved.
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.WCF.FetchRequest.Criteria">
            <summary>
            Criteria object describing business object.
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.WCF.FetchRequest.Context">
            <summary>
            Data portal context from client.
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataPortal.WCF.IWcfPortal">
            <summary>
            Defines the service contract for the WCF data
            portal.
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.WCF.IWcfPortal.Fetch(Rafy.Domain.DataPortal.WCF.FetchRequest)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Rafy.Domain.DataPortal.WCF.IWcfPortal.Update(Rafy.Domain.DataPortal.WCF.UpdateRequest)">
            <summary>
            Update a business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="T:Rafy.Domain.DataPortal.WCF.ServerPortal">
            <summary>
            使用 WCF 实现的统一的数据门户。
            
            标记了 ConcurrencyMode.Multiple 来表示多线程进行
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.WCF.ServerPortal.Fetch(Rafy.Domain.DataPortal.WCF.FetchRequest)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Rafy.Domain.DataPortal.WCF.ServerPortal.Update(Rafy.Domain.DataPortal.WCF.UpdateRequest)">
            <summary>
            Update a business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="T:Rafy.Domain.DataPortal.WCF.UpdateRequest">
            <summary>
            Request message for updating
            a business object.
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.WCF.UpdateRequest.Object">
            <summary>
            Business object to be updated.
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.WCF.UpdateRequest.Context">
            <summary>
            Data portal context from client.
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataPortal.WCF.WcfResponse">
            <summary>
            Response message for returning
            the results of a data portal call.
            </summary>
        </member>
        <member name="T:Rafy.Domain.DbSettingNames">
            <summary>
            数据库使用的连接字符串名
            统一管理Connection字符串
            </summary>
        </member>
        <member name="F:Rafy.Domain.DbSettingNames.RafyPlugins">
            <summary>
            默认情况下 Rafy 插件使用的库配置名。
            
            外界可以在程序启动时修改这个值以使得它和其它的库使用同一个配置。
            </summary>
        </member>
        <member name="F:Rafy.Domain.DbSettingNames.DbMigrationHistory">
            <summary>
            默认情况下迁移记录库使用的库配置名。
            
            外界可以在程序启动时修改这个值以使得它和其它的库使用同一个配置。
            </summary>
        </member>
        <member name="T:Rafy.Domain.DomainApp">
            <summary>
            领域应用程序（用于启动领域实体框架）
            </summary>
        </member>
        <member name="M:Rafy.Domain.DomainApp.NotifyExit">
            <summary>
            当外部程序在完全退出时，通过领域应用程序也同时退出。
            </summary>
        </member>
        <member name="T:Rafy.Domain.DomainMetaExtension">
            <summary>
            Rafy.Library 对元数据的扩展
            </summary>
        </member>
        <member name="M:Rafy.Domain.DomainMetaExtension.EnableServerCache(Rafy.MetaModel.EntityMeta)">
            <summary>
            启用服务端内存缓存。
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DomainMetaExtension.EnableClientCache(Rafy.MetaModel.EntityMeta,System.Int32)">
            <summary>
            启用缓存，并估计缓存的数量。
            </summary>
            <param name="meta"></param>
            <param name="estimatedDataCount">
            预估的数据行数。
            系统会根据此数量来选择使用的缓存策略。例如：超过 1000 条的组合子对象使用组合缓存。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DomainMetaExtension.EnableClientCache(Rafy.MetaModel.EntityMeta,Rafy.MetaModel.ClientCacheScopeType)">
            <summary>
            根据简单策略来启用缓存。
            </summary>
            <param name="meta"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.DomainMetaExtension.SaveListServiceTypeKey">
            <summary>
            '列表保存服务类型'属性在扩展属性中的键。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DomainMetaExtension.SetSaveListServiceType(Rafy.MetaModel.EntityMeta,System.Type)">
            <summary>
            设置对象的'列表保存服务类型'属性。
            </summary>
            <param name="ext">扩展属性的对象。</param>
            <param name="value">设置的属性值。</param>
            <returns>扩展属性的对象。</returns>
        </member>
        <member name="M:Rafy.Domain.DomainMetaExtension.GetSaveListServiceType(Rafy.MetaModel.EntityMeta)">
            <summary>
            获取对象的'列表保存服务类型'属性。
            </summary>
            <param name="ext">扩展属性的对象。</param>
            <returns>被扩展的属性值，或者该属性的默认值。</returns>
        </member>
        <member name="T:Rafy.Domain.Caching.AggregateChecker">
            <summary>
            组合检测条件的检测器
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.AggregateChecker.Add(Rafy.Utils.Caching.ChangeChecker)">
            <summary>
            添加一个新的检测器
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Rafy.Domain.Caching.AggregateChecker.Check">
            <summary>
            所有条件通过，才算通过。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Caching.CacheInstances">
            <summary>
            缓存的几个默认实例。
            
            应用层可修改这些属性来实现自己的缓存逻辑。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Caching.CacheInstances.CACHE_FILE_NAME">
            <summary>
            默认使用的硬盘 sqlce 缓存文件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.CacheInstances.Memory">
            <summary>
            内存缓存
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.CacheInstances.Disk">
            <summary>
            硬盘缓存。
            默认使用 SqlCe 的硬盘缓存
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.CacheInstances.MemoryDisk">
            <summary>
            一个先用内存，后用硬盘的二级缓存
            默认使用 SqlCe 作为二级缓存的硬盘缓存
            </summary>
        </member>
        <member name="T:Rafy.Domain.Caching.RepositoryCache">
            <summary>
            ServerCache，ClientCache 的基类。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.RepositoryCache.FindAll">
            <summary>
            使用Cache获取所有对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Caching.RepositoryCache.FindByParent(Rafy.Domain.Entity)">
            <summary>
            使用Cache获取某个父对象下的所有子对象。
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Caching.RepositoryCache.FindById(System.Object)">
            <summary>
            使用Cache获取某个指定的对象。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Caching.RepositoryCache.ConvertTable(System.Collections.Generic.IList{Rafy.Domain.Entity})">
            <summary>
            把一个 table 转换为新的实体列表
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.Caching.ServerRepositoryCache">
            <summary>
            服务端使用的缓存。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Caching.ServerRepositoryCache.ServerCacheAPI">
            <summary>
            应用层可以修改此属性来达到服务端缓存逻辑的变更。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.ServerRepositoryCache.IsEnabled">
            <summary>
            是否已经被启用。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Caching.AggregateRootCache">
            <summary>
            聚合根对象的内存缓存对象
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.AggregateRootCache.ModifyRootEntity(Rafy.Domain.IRepository,Rafy.Domain.Entity)">
            <summary>
            直接设置根对象为缓存
            </summary>
            <param name="repository">The repository.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Rafy.Domain.Caching.AggregateRootCache.CacheById(Rafy.Domain.IRepository,System.Object)">
            <summary>
            从缓存中读取指定实体类型的所有数据。
            如果缓存中不存在，或者缓存数据已经过期，则调用 GetByIdCore 方法获取数据，并把最终数据加入到缓存中。
            </summary>
            <param name="repository">The repository.</param>
            <param name="id">The unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Caching.AggregateRootCache.GetAggregateChildrenTypes(System.Type,System.Collections.Generic.IList{System.Type})">
            <summary>
            递归获取指定类型下所有的子类型
            </summary>
            <param name="entityType"></param>
            <param name="types"></param>
        </member>
        <member name="T:Rafy.Domain.Caching.ClientRepositoryCache">
            <summary>
            基本版本号更新方案的客户端缓存的 API
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.ClientRepositoryCache.EntityType">
            <summary>
            本缓存对象对应的实体类型。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.ClientRepositoryCache.Repository">
            <summary>
            对应的仓库对象。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.ClientRepositoryCache.ClientCacheDefinition">
            <summary>
            使用的客户端缓存方案
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.ClientRepositoryCache.IsEnabled">
            <summary>
            指定当前的仓库是否支持Cache
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.ClientRepositoryCache.CacheRootEntity(Rafy.Domain.Entity)">
            <summary>
            直接设置根对象为缓存
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.Caching.ClientRepositoryCache.FindById(System.Object)">
            <summary>
            使用Cache获取某个指定的对象。
            
            注意：
            根对象和子对象分别以不同的方式进行处理：
            根对象：使用单个根对象的内存缓存。
            子对象：在子对象的集合中查询。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Caching.ClientRepositoryCache.UpdateServerVersion">
            <summary>
            在某实体更新时，通知服务器更新对象整张表的版本号。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.ClientRepositoryCache.UpdateServerVersion(Rafy.Domain.Entity)">
            <summary>
            在某实体更新时，通知服务器更新指定范围内对象的版本号。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.ClientRepositoryCache.ClearOnClient">
            <summary>
            即刻清空该实体类型在客户端中的所有缓存对象。
            
            使用场景：
            在服务端的数据变化后，客户端缓存会定时更新，如果此时想用这个即时刷新客户端缓存，则可以调用此方法。
            
            注意，不要在服务端事务中调用此方法，这是因为其中会访问 SQLCE 数据库，这会导致事务提升为分布式事务。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.ClientRepositoryCache.GetCachedTable">
            <summary>
            从缓存中获取整个列表。
            从缓存中读取指定实体类型的所有数据。
            如果缓存中不存在，或者缓存数据已经过期，则调用 GetAll 方法获取数据，并把最终数据加入到缓存中。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Caching.ClientRepositoryCache.GetCachedTableByParent(Rafy.Domain.Entity)">
            <summary>
            从缓存中读取指定实体类型的某个父对象下的所有子对象。
            如果缓存中不存在，或者缓存数据已经过期，则调用 GetByParentId 方法获取数据，并把最终数据加入到缓存中。
            </summary>
            <param name="parent">The parent.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.Caching.EntityListVersion">
            <summary>
            逻辑上实体列表的版本号。
            用于客户端缓存。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.EntityListVersion.ClassRegion">
            <summary>
            属性哪个实体类的范围
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.EntityListVersion.ScopeClass">
            <summary>
            是否基于某个父类型来进行分开缓存。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.EntityListVersion.ScopeId">
            <summary>
            如果是基于父类型来缓存，则这个属性表示当前列表对应的父对象的 Id。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.EntityListVersion.Value">
            <summary>
            当前这个列表缓存的时间戳。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Caching.IEntityListVersionRepository">
            <summary>
            实体列表版本号的仓库。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.IEntityListVersionRepository.GetOrNew(System.Type,System.Type,System.String)">
            <summary>
            获取指定的列表范围，如果不存储，则构造一个新的。
            </summary>
            <param name="region"></param>
            <param name="scopeClass"></param>
            <param name="scopeId"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Caching.IEntityListVersionRepository.Add(System.Type,System.Type,System.String)">
            <summary>
            添加一个指定的范围版本号
            </summary>
            <param name="region"></param>
            <param name="scopeClass"></param>
            <param name="scopeId"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Caching.IEntityListVersionRepository.Get(System.Type,System.Type,System.String)">
            <summary>
            获取一个指定的范围版本号
            </summary>
            <param name="region"></param>
            <param name="scopeClass"></param>
            <param name="scopeId"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Caching.IEntityListVersionRepository.Clear">
            <summary>
            清空所有版本号，所有缓存都会过期。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.IEntityListVersionRepository.UpdateVersion(System.Type)">
            <summary>
            通知整个表被改变
            </summary>
            <param name="region"></param>
        </member>
        <member name="M:Rafy.Domain.Caching.IEntityListVersionRepository.UpdateVersion(System.Type,System.Type,System.String)">
            <summary>
            更新指定的范围的版本号
            </summary>
            <param name="region"></param>
            <param name="scopeClass"></param>
            <param name="scopeId"></param>
        </member>
        <member name="M:Rafy.Domain.Caching.IEntityListVersionRepository.BatchSaveScope">
            <summary>
            如果要进行批量的更新，请先调用此方法。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.Caching.VersionChecker">
            <summary>
            Rafy中使用的版本号检测器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.VersionChecker.#ctor">
            <summary>
            Used by Memoto
            </summary>
        </member>
        <member name="T:Rafy.Domain.Caching.VersionChecker.VCM">
            <summary>
            VersionChecker的Memoto
            “VersionCheckerMemoto”
            </summary>
        </member>
        <member name="T:Rafy.Domain.Caching.VersionSyncMgr">
            <summary>
            基于版本号同步方案的缓存 API
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.VersionSyncMgr.IsEnabled">
            <summary>
            是否启用了缓存同步方案。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.VersionSyncMgr.Repository">
            <summary>
            版本号同步方案的服务端提供程序。
            
            如果没有使用 SetProvider 来设置服务端提供程序，则基于版本号同步方案的缓存则不起作用。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.VersionSyncMgr.SetProvider(Rafy.Domain.Caching.IEntityListVersionRepository)">
            <summary>
            设置版本号同步方案的服务端提供程序。
            </summary>
            <param name="provider"></param>
        </member>
        <member name="T:Rafy.Domain.CommonQueryCriteria">
            <summary>
            通用查询条件。使用该条件，可以解决大部分的查询需求。
            用于表示使用 Or 连接多个组，每个组使用 And 进行连接查询的查询条件。
            
            <example>
            示例一，只有一个 And 组：
            var criteria = new CommonQueryCriteria
            {
                new PropertyMatch(Entity.TreeIndexProperty, "1."),
                new PropertyMatch(Entity.IdProperty, 1)
            };
            表示以下条件：
            TreeIndex.Contains("1.") And Id == 1
            
            示例二，多个 Or 组，使用 And 进行连接：
            var criteria = new CommonQueryCriteria
            {
                new PropertyMatchGroup
                {
                    new PropertyMatch(Entity.TreeIndexProperty, PropertyOperator.StartWith, "1."),
                    new PropertyMatch(Entity.TreePIdProperty, "1."),
                },
                new PropertyMatchGroup
                {
                    new PropertyMatch(Entity.TreeIndexProperty, PropertyOperator.StartWith, "2."),
                    new PropertyMatch(Entity.TreePIdProperty, "2."),};
                }
            };
            表示：
            (TreeIndex.StartWith("1.") || TreePId == "1." )
                And (TreeIndex.StartWith("2.") || TreePId == "2.")
            
            示例三，多个 And 组，使用 Or 进行连接：
            var criteria = new CommonQueryCriteria(BinaryOperator.Or)
            {
                new PropertyMatch(Entity.TreeIndexProperty, "1."),
                new PropertyMatch(Entity.IdProperty, 1),
                new PropertyMatchGroup(BinaryOperator.And)
                {
                    new PropertyMatch(Entity.TreeIndexProperty, PropertyOperator.StartWith, "1."),
                    new PropertyMatch(Entity.TreePIdProperty, "1."),
                },
                new PropertyMatchGroup(BinaryOperator.And)
                {
                    new PropertyMatch(Entity.TreeIndexProperty, PropertyOperator.StartWith, "2."),
                    new PropertyMatch(Entity.TreePIdProperty, "2."),};
                }
            };
            表示：
            TreeIndex.Contains("1.") Or Id == 1 
                Or TreeIndex.StartWith("1.") And TreePId == "1." 
                Or TreeIndex.StartWith("2.") And TreePId == "2."
            </example>
            </summary>
        </member>
        <member name="M:Rafy.Domain.CommonQueryCriteria.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.CommonQueryCriteria"/> class.
            </summary>
        </member>
        <member name="M:Rafy.Domain.CommonQueryCriteria.#ctor(Rafy.Domain.BinaryOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.CommonQueryCriteria"/> class.
            </summary>
            <param name="concat">组与组之间的连接方式。</param>
        </member>
        <member name="P:Rafy.Domain.CommonQueryCriteria.Groups">
            <summary>
            所有进行 Or 连接查询的组。每个组中的属性使用 And 进行连接。
            </summary>
        </member>
        <member name="P:Rafy.Domain.CommonQueryCriteria.Concat">
            <summary>
            组与组之间的连接方式，默认使用 And 连接。
            </summary>
        </member>
        <member name="P:Rafy.Domain.CommonQueryCriteria.IgnoreNull">
            <summary>
            如果值为空（包括空字符串），则忽略该对比项。
            默认为 false。
            </summary>
        </member>
        <member name="P:Rafy.Domain.CommonQueryCriteria.OrderBy">
            <summary>
            根据该属性进行排序。
            </summary>
        </member>
        <member name="P:Rafy.Domain.CommonQueryCriteria.OrderByAscending">
            <summary>
            是否正序排列。默认为 true。
            </summary>
        </member>
        <member name="P:Rafy.Domain.CommonQueryCriteria.GroupsCount">
            <summary>
            返回当前已经拥有的组的个数。
            </summary>
        </member>
        <member name="M:Rafy.Domain.CommonQueryCriteria.Add(Rafy.Domain.PropertyMatchGroup)">
            <summary>
            添加一个 And 连接的属性匹配组。
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Rafy.Domain.CommonQueryCriteria.Add(Rafy.Domain.PropertyMatch)">
            <summary>
            添加一个属性匹配条件为一个单独的组。
            </summary>
            <param name="propertyMatch">The property match.</param>
        </member>
        <member name="M:Rafy.Domain.CommonQueryCriteria.Add(Rafy.ManagedProperty.IManagedProperty,System.Object)">
            <summary>
            添加一个属性匹配条件到本组中。使用 Equal 进行对比。
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rafy.Domain.CommonQueryCriteria.Add(Rafy.ManagedProperty.IManagedProperty,Rafy.Domain.PropertyOperator,System.Object)">
            <summary>
            添加一个属性匹配条件到最后一个组中。
            </summary>
            <param name="property">The property.</param>
            <param name="op">The op.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rafy.Domain.CommonQueryCriteria.AddToLastGroup(Rafy.Domain.PropertyMatch)">
            <summary>
            添加一个属性匹配条件到最后一个组中。
            如果此时不没有任何一个组，则会自动创建一个新组。
            </summary>
            <param name="propertyMatch">The property match.</param>
        </member>
        <member name="M:Rafy.Domain.CommonQueryCriteria.AddToGroup(Rafy.Domain.IPropertyMatchGroup,Rafy.Domain.PropertyMatch)">
            <summary>
            添加指定的属性匹配到组集合中。
            </summary>
            <param name="group"></param>
            <param name="item"></param>
        </member>
        <member name="T:Rafy.Domain.PropertyMatchGroup">
            <summary>
            一组属性匹配。
            </summary>
        </member>
        <member name="M:Rafy.Domain.PropertyMatchGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.PropertyMatchGroup"/> class.
            </summary>
        </member>
        <member name="M:Rafy.Domain.PropertyMatchGroup.#ctor(Rafy.Domain.BinaryOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.PropertyMatchGroup"/> class.
            </summary>
            <param name="concat">属性条件之间的连接符。</param>
        </member>
        <member name="P:Rafy.Domain.PropertyMatchGroup.Concat">
            <summary>
            属性条件之间的连接符，默认是 Or。
            </summary>
        </member>
        <member name="M:Rafy.Domain.PropertyMatchGroup.Add(Rafy.ManagedProperty.IManagedProperty,System.Object)">
            <summary>
            添加一个属性匹配条件到本组中。使用 Equal 进行对比。
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rafy.Domain.PropertyMatchGroup.Add(Rafy.ManagedProperty.IManagedProperty,Rafy.Domain.PropertyOperator,System.Object)">
            <summary>
            添加一个属性匹配条件到本组中。
            </summary>
            <param name="property">The property.</param>
            <param name="op">The op.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rafy.Domain.PropertyMatch">
            <summary>
            属性的对比条件
            </summary>
        </member>
        <member name="P:Rafy.Domain.PropertyMatch.PropertyName">
            <summary>
            属性名称。
            </summary>
        </member>
        <member name="P:Rafy.Domain.PropertyMatch.Operator">
            <summary>
            属性操作符。
            </summary>
        </member>
        <member name="P:Rafy.Domain.PropertyMatch.Value">
            <summary>
            对比的值。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IPropertyMatchGroup">
            <summary>
            一组属性匹配。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IPropertyMatchGroup.Item(System.Int32)">
            <summary>
            获取指定索引的元素。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.IPropertyMatchGroup.Count">
            <summary>
            有多个属性属性在其中。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IPropertyMatchGroup.Concat">
            <summary>
            属性条件之间的连接符，默认是 Or。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IEQC">
            <summary>
            Internal Entity Query Criteria
            实体查询的参数。一个多参数查询的对象容器。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEQC.Parameters">
            <summary>
            所有的参数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEQC.MethodName">
            <summary>
            数据层查询方法。如果为空，表示使用约定的数据层方法。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEQC.QueryType">
            <summary>
            获取数据的类型。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IEntityQueryCriteria">
            <summary>
            实体查询的参数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEntityQueryCriteria.MethodName">
            <summary>
            数据层查询方法。如果为空，表示使用约定的数据层方法。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEntityQueryCriteria.Parameters">
            <summary>
            所有的参数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEntityQueryCriteria.QueryType">
            <summary>
            获取数据的类型
            </summary>
        </member>
        <member name="T:Rafy.Domain.RepositoryQueryType">
            <summary>
            仓库返回数据的类型
            </summary>
        </member>
        <member name="F:Rafy.Domain.RepositoryQueryType.List">
            <summary>
            查询实体列表
            </summary>
        </member>
        <member name="F:Rafy.Domain.RepositoryQueryType.First">
            <summary>
            查询单个实体
            </summary>
        </member>
        <member name="F:Rafy.Domain.RepositoryQueryType.Count">
            <summary>
            查询数据条数统计
            </summary>
        </member>
        <member name="F:Rafy.Domain.RepositoryQueryType.Table">
            <summary>
            查询数据表格
            </summary>
        </member>
        <member name="T:Rafy.Domain.ODataFilterParser">
            <summary>
            用于解析类 OData 查询中的 filter 查询字符串。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ODataFilterParser.ReadPart">
            <summary>
            Part 有以下类型：括号、单词。
            </summary>
            <returns>
            空字符串：表示没有字符，无法读取。
            null：表示读取到空值。
            </returns>
        </member>
        <member name="T:Rafy.Domain.ODataQueryCriteria">
            <summary>
            <para>一个简单的支持 OData 协议的查询器。</para>
            <para>
            OData 语法简介：
            http://www.cnblogs.com/PurpleTide/archive/2010/12/21/1912299.html
            http://www.cnblogs.com/PurpleTide/archive/2010/12/21/1912395.html
            </para>
            <para>支持的操作符：</para>
            <para>只支持以下 OData 操作符：</para>
            <para>    $orderby、$filter、$inlinecount、$expand                                                                       </para>
            <para>新操作符：                                                                                                         </para>
            <para>    $pageNumber：从 1 开始的页码；                                                                                  </para>
            <para>    $pageSize：一页中的数据量。                                                                                     </para>
            <para>$expand 说明：                                                                                                     </para>
            <para>    除了可以需要贪婪加载的属性列表，还可以指定属性名为 TreeChildren，表示贪婪加载树节点的所有子节点。                     </para>
            <para>$filter 说明：                                                                                                      </para>
            <para>    * 支持的对比操作符：eq,ne,lt,le,gt,ge。                                                                          </para>
            <para>    * 支持字符串的模糊匹配操作符：contains、startsWith、endsWith、notContains、notStartsWith、notEndsWith。            </para>
            <para>    * 对时间类型进行比较时，直接使用字符串来表示时间值，如：CreateTime lt '2014-12-18 10:30'。                          </para>
            <para>    * Or 与 And 没有优先级之分。                                                                                     </para>
            <para>    * 可以使用空值 null。注意：null 表示空值，而 'null' 则表示字符串值。                                                </para>
            <para>    * （另外，不支持对集合进行对比的操作 in 和 notIn，这两个操作需要转换为 A eq 1 or A eq 2 or A eq 3                    </para>
            <para>    示例（详见源码单元测试）：                                                                                        </para>
            <para>        NickName eq 'huqf'                                                                                          </para>
            <para>        NickName eq 'huqf' and UserName eq 'huqf'                                                                   </para>
            <para>        NickName eq 'huqf' or UserName eq 'huqf' and ActiveTimeStamp lt '2014-12-17 19:00'                          </para>
            <para>        NickName eq 'huqf' and UserName eq 'huqf' or ActiveTimeStamp lt '2014-12-17 19:00'                          </para>
            <para>        ActiveTimeStamp lt '2014-12-17 19:00' and (NickName eq 'huqf' or UserName eq 'huqf')                        </para>
            <para>        (NickName eq 'huqf' or UserName eq 'huqf') and (Email eq 'email' or Present eq 'persent')                   </para>
            <para>        (NickName eq 'huqf' or UserName eq 'huqf')                                                                  </para>
            <para>        (NickName eq 'huqf')                                                                                        </para>
            <para>        (ActiveTimeStamp lt '2014-12-17 19:00') and (((NickName eq 'huqf' or UserName eq 'huqf')))                  </para>
            <para>        (NickName eq 'huqf' or (Email eq 'email' or Present eq 'persent')) and UserName eq 'huqf'                   </para>
            </summary>
        </member>
        <member name="P:Rafy.Domain.ODataQueryCriteria.OrderBy">
            <summary>
            根据该属性进行排序。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ODataQueryCriteria.Filter">
            <summary>
            过滤器。
            支持 OData 的六个操作符。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ODataQueryCriteria.Expand">
            <summary>
            EagerLoadProperties
            </summary>
        </member>
        <member name="P:Rafy.Domain.ODataQueryCriteria.MarkTreeFullLoaded">
            <summary>
            如果某次查询结果是一棵完整的子树，那么必须设置此参数为 true，才可以把整个树标记为完整加载。
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataProviderForAttribute">
            <summary>
            标记在某个数据提供器上，标识其为指定的仓库服务。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataProviderForAttribute.#ctor(System.Type)">
            <summary>
            构造器。
            </summary>
            <param name="repositoryType">本数据层可以为指定的这个仓库及其子类服务。</param>
        </member>
        <member name="T:Rafy.Domain.DataQueryer">
            <summary>
            数据查询器
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.Init(Rafy.Domain.RepositoryDataProvider)">
            <summary>
            Initializes the specified data provider.
            </summary>
            <param name="dataProvider">The data provider.</param>
        </member>
        <member name="P:Rafy.Domain.DataQueryer.Repo">
            <summary>
            对应的仓库
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataQueryer.DataProvider">
            <summary>
            对应的仓库数据提供程序
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.CreateLinqQuery``1">
            <summary>
            创建一个实体 Linq 查询对象。
            只能在服务端调用此方法。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.QueryData(System.Linq.IQueryable,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            从持久层中查询数据。
            本方法只能由仓库中的方法来调用。本方法的返回值的类型将与仓库中方法的返回值保持一致。
            支持的返回值：EntityList、Entity、int、LiteDataTable。
            </summary>
            <param name="queryable"></param>
            <param name="paging"></param>
            <param name="eagerLoad"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.ConvertToQuery(System.Linq.IQueryable)">
            <summary>
            把一个 Linq 查询转换为 IQuery 查询。
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.QueryData(Rafy.Domain.ORM.Query.IQuery,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions,System.Boolean)">
            <summary>
            通过 IQuery 对象从持久层中查询数据。
            本方法只能由仓库中的方法来调用。本方法的返回值的类型将与仓库中方法的返回值保持一致。
            支持的返回值：EntityList、Entity、int、LiteDataTable。
            </summary>
            <param name="query">查询对象。</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <param name="markTreeFullLoaded">如果某次查询结果是一棵完整的子树，那么必须设置此参数为 true ，才可以把整个树标记为完整加载。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.QueryData(Rafy.Domain.EntityQueryArgs)">
            <summary>
            通过 IQuery 对象从持久层中查询数据。
            本方法只能由仓库中的方法来调用。本方法的返回值的类型将与仓库中方法的返回值保持一致。
            支持的返回值：EntityList、Entity、int。
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.QueryTable(Rafy.Domain.ORM.Query.IQuery,Rafy.PagingInfo)">
            <summary>
            通过 IQuery 对象来查询数据表。
            </summary>
            <param name="query">查询条件。</param>
            <param name="paging">分页信息。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.QueryDataCore(Rafy.Domain.EntityQueryArgs,Rafy.Domain.EntityList)">
            <summary>
            子类重写此方法，查询从持久层加载列表的具体实现。
            </summary>
            <param name="args">The arguments.</param>
            <param name="entityList">The entity list.</param>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.OnQuerying(Rafy.Domain.EntityQueryArgs)">
            <summary>
            所有使用 IQuery 的数据查询，在调用完应 queryBuilder 之后，都会执行此此方法。
            所以子类可以重写此方法实现统一的查询条件逻辑。
            （例如，对于映射同一张表的几个子类的查询，可以使用此方法统一对所有方法都过滤）。
            
            默认实现为：
            * 如果还没有进行排序，则进行默认的排序。
            * 如果单一参数实现了 IPagingCriteria 接口，则使用其中的分页信息进行分页。
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.EagerLoadOnCompleted(Rafy.Domain.EntityQueryArgsBase,Rafy.Domain.EntityList,System.Int32)">
            <summary>
            在数据加载完成后，完成其它的贪婪加载。
            </summary>
            <param name="args"></param>
            <param name="entityList"></param>
            <param name="oldCount"></param>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.OnDbLoaded(System.Collections.Generic.IList{Rafy.Domain.Entity},System.Int32)">
            <summary>
            通知所有的实体都已经被加载。
            </summary>
            <param name="allEntities"></param>
            <param name="fromIndex">从这个索引号开始的实体，才会被通知加载。</param>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.OnDbLoaded(Rafy.Domain.Entity)">
            <summary>
            子类重写这个方法，用于在从数据库获取出来时，及时地加载一些额外的属性。
            
            注意：这个方法中只应该为一般属性计算值，不能有其它的数据访问。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.OnEntityQueryed(Rafy.Domain.EntityQueryArgsBase)">
            <summary>
            QueryList 方法完成后调用。
            
            子类可重写此方法来实现查询完成后的数据修整工具。
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.EagerLoad(Rafy.Domain.EntityList,System.Collections.Generic.IList{Rafy.ManagedProperty.ConcreteProperty})">
            <summary>
            对列表加载指定的贪婪属性。
            </summary>
            <param name="list"></param>
            <param name="eagerLoadProperties">所有需要贪婪加载的属性。</param>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.EagerLoadChildren(Rafy.Domain.EntityList,Rafy.ManagedProperty.IListProperty,System.Collections.Generic.List{Rafy.ManagedProperty.ConcreteProperty})">
            <summary>
            对实体列表中每一个实体都贪婪加载出它的所有子实体。
            </summary>
            <param name="list"></param>
            <param name="listProperty">贪婪加载的列表子属性。</param>
            <param name="eagerLoadProperties">所有还需要贪婪加载的属性。</param>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.EagerLoadRef(Rafy.Domain.EntityList,Rafy.ManagedProperty.IRefProperty,System.Collections.Generic.List{Rafy.ManagedProperty.ConcreteProperty})">
            <summary>
            对实体列表中每一个实体都贪婪加载出它的所有引用实体。
            </summary>
            <param name="list"></param>
            <param name="refProperty">贪婪加载的引用属性。</param>
            <param name="eagerLoadProperties">所有还需要贪婪加载的属性。</param>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.ReturnForRepository(Rafy.Domain.EntityList)">
            <summary>
            将查询出来的实体列表类型转换为与仓库查询方法返回值一致的类型。
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.DisconnectFirst(Rafy.Domain.EntityList)">
            <summary>
            只返回列表中的唯一实体时，使用此方法。
            断开 Entity 与 EntityList 之间的关系，可防止 EntityList 内存泄漏。
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.DataSaver">
            <summary>
            仓库数据提供程序中的数据保存器。
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataSaver.SubmitInterceptors">
            <summary>
            提交功能的拦截器类型列表。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataSaver.Init(Rafy.Domain.RepositoryDataProvider)">
            <summary>
            Initializes the specified data provider.
            </summary>
            <param name="dataProvider">The data provider.</param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.EnableDeletingChildrenInMemory">
            <summary>
            是否需要在内存中进行删除。
            
            SqlCe 的数据库，常常需要打开这个选项。
            因为 SqlCe 的级联删除在遇到组合子对象是 TreeEntity 时，会出现无法成功级联删除的问题。
            
            默认情况下，对象使用级联删除，所以不需要在内存中更新组合子，本值返回 false。
            
            此功能只能打开，打开后不能再关闭。
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataSaver.DataProvider">
            <summary>
            对应的数据提供程序。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataSaver.CreateRedundanciesUpdater">
            <summary>
            子类重写此方法实现冗余属性更新器的实现。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataSaver.UpdateRedundanciesIf(Rafy.Domain.Entity)">
            <summary>
            尝试更新冗余属性值。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitComposition(Rafy.Domain.IDomainComponent)">
            <summary>
            数据门户调用本接口来保存数据。
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitChildrenComponent(Rafy.Domain.IDomainComponent,Rafy.Domain.Entity)">
            <summary>
            提交更新指定实体的组合子列表。
            </summary>
            <param name="child">The child.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitComponent(Rafy.Domain.IDomainComponent,System.Boolean)">
            <summary>
            完整提交指定的领域实体或领域实体列表。
            </summary>
            <param name="component"></param>
            <param name="markSaved">如果是最外层调用此方法，则在最终标记整个组件为保存完毕。</param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitTree(Rafy.Domain.Entity,System.Boolean)">
            <summary>
            提交以实体为根的一个树。
            </summary>
            <param name="tree"></param>
            <param name="markSaved"></param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitTreeList(Rafy.Domain.EntityList,System.Boolean)">
            <summary>
            数据层 - 提交树节点
            </summary>
            <param name="list">The list.</param>
            <param name="markSaved">if set to <c>true</c> [mark saved].</param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitTreeDeletedItems(Rafy.Domain.ITreeComponent,System.Boolean)">
            <summary>
            删除整棵树中所有需要删除的节点。
            </summary>
            <param name="tree">The tree.</param>
            <param name="markSaved">if set to <c>true</c> [mark saved].</param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitList(Rafy.Domain.EntityList,System.Boolean)">
            <summary>
            保存根对象列表
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitItem(Rafy.Domain.Entity,System.Boolean,System.Boolean)">
            <summary>
            根据实体状态来选择保存方法。
            </summary>
            <param name="entity">The entity.</param>
            <param name="markSaved">是否当前正在保存最外层组合根对象。如果是，则应该在保存完成后，把整个组合对象状态清空。</param>
            <param name="withTreeChildren">是否需要同时处理树的子节点。</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Rafy.Domain.DataSaver.Submit(Rafy.Domain.SubmitArgs)">
            <summary>
            提交聚合对象到数据库中。
            
            子类重写此方法实现整个聚合对象保存到非关系型数据库的逻辑。
            如果只想重写单个对象的 CUD 逻辑，请重写 Insert、Update、Delete 方法。
            
            注意，不论是聚合父对象，还是聚合子对象，还是没有聚合子的对象，都会执行该方法。
            它与 Insert、Update、Delete 等方法的区别在于，重写此方法可以同时阻止对聚合子对象的默认保存逻辑。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.InsertToPersistence(Rafy.Domain.Entity)">
            <summary>
            插入这个数据到持久层中。
            
            子类重写此方法来实现持久层的插入逻辑。
            重写时，注意：
            在插入完成后，把为实体新生成的 Id 赋值到实体中。否则组合子将插入失败。
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.UpdateToPersistence(Rafy.Domain.Entity)">
            <summary>
            更新这个这个数据到持久层中。
            
            子类重写此方法来实现持久层的更新逻辑。
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitChildren(Rafy.Domain.Entity)">
            <summary>
            提交更新指定实体的组合子列表。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitTreeChildren(Rafy.Domain.Entity)">
            <summary>
            提交指定树节点的所有树子节点。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.DeleteFromPersistence(Rafy.Domain.Entity)">
            <summary>
            从持久层中删除这个数据。
            
            子类重写此方法来实现持久层的删除逻辑。
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.DeleteChildren(Rafy.Domain.Entity)">
            <summary>
            删除所有组合子。
            
            子类重写此方法来实现新的删除逻辑。
            注意，此方法只会在指定了 <see cref="M:Rafy.Domain.DataSaver.EnableDeletingChildrenInMemory"/> 时，才会调用。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataSaver.DeleteTreeChildren(Rafy.Domain.Entity)">
            <summary>
            删除所有的子节点。
            
            子类重写此方法来实现新的删除逻辑。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataSaver.DeleteRef(Rafy.Domain.Entity,Rafy.ManagedProperty.IRefProperty,System.Type)">
            <summary>
            通过引用关系，来删除引用表中引用本对象的所有对象。
            
            一般情况下，子类可以在自己重写的 Submit 方法中调用此方法来先删除其它非级联有关系。
            
            注意，此方法暂时只会生成 SQL 删除引用表的对象，不主动处理更多的级联关系。（以后再实现。）
            </summary>
            <param name="entity">正在删除这个实体。</param>
            <param name="refProperty">这个引用属性表示了需要删除的另一个实体到 <c>entity</c> 的引用关系。</param>
            <param name="propertyOwner"><c>refProperty</c> 属性对应的拥有者实体类型。</param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.DeleteRefCore(Rafy.Domain.Entity,Rafy.ManagedProperty.IRefProperty)">
            <summary>
            子类重写此方法，实现 <see cref="M:Rafy.Domain.DataSaver.DeleteRef(Rafy.Domain.Entity,Rafy.ManagedProperty.IRefProperty,System.Type)" /> 的具体逻辑。
            </summary>
            <param name="entity"></param>
            <param name="refProperty"></param>
        </member>
        <member name="T:Rafy.Domain.IRepositoryDataProvider">
            <summary>
            一个关系型数据库的数据提供器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetById(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过Id在数据层中查询指定的对象
            </summary>
            <param name="id">The unique identifier.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetAll(Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            分页查询所有的实体类
            </summary>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetByParentId(System.Object,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过父对象 Id 分页查询子对象的集合。
            </summary>
            <param name="parentId"></param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetByParentIdList(System.Object[],Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过父对象 Id 分页查询子对象的集合。
            </summary>
            <param name="parentIdList">The parent identifier list.</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetByIdList(System.Object[],Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取指定 id 集合的实体列表。
            </summary>
            <param name="idList"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetByTreeParentIndex(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            递归查找所有树型子
            </summary>
            <param name="treeIndex"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetTreeRoots(Rafy.Domain.EagerLoadOptions)">
            <summary>
            查询所有的根节点。
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 <see cref="T:Rafy.Domain.CommonQueryCriteria"/> 来查询数据。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetBy(Rafy.Domain.ODataQueryCriteria)">
            <summary>
            通过 <see cref="T:Rafy.Domain.ODataQueryCriteria"/> 来查询数据。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetEntityValue(System.Object,System.String)">
            <summary>
            查询某个实体的某个属性的值。
            </summary>
            <param name="entityId">The entity identifier.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.RedundanciesUpdater">
            <summary>
            冗余属性更新器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.RedundanciesUpdater.UpdateRedundancies(Rafy.Domain.Entity,Rafy.Domain.IRepository)">
            <summary>
            尝试更新依赖指定实体的值的冗余属性的值。
            </summary>
            <param name="entity">变更了值属性的实体。依赖该实体的所有冗余属性都需要被更新。</param>
            <param name="repository">实体对应的仓库。</param>
        </member>
        <member name="M:Rafy.Domain.RedundanciesUpdater.UpdateRedundancyByValue(Rafy.Domain.Entity,Rafy.Domain.RedundantPath,System.Object)">
            <summary>
            值改变时引发的冗余值更新操作。
            </summary>
            <param name="entity">The entity.</param>
            <param name="path">The path.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Rafy.Domain.RedundanciesUpdater.UpdateRedundancyByIntermidateRef(Rafy.Domain.Entity,Rafy.Domain.RedundantPath,Rafy.ManagedProperty.IRefIdProperty)">
            <summary>
            冗余路径中非首位的引用属性变化时引发的冗余值更新操作。
            </summary>
            <param name="entity">The entity.</param>
            <param name="path">The path.</param>
            <param name="refChanged">该引用属性值变化了</param>
        </member>
        <member name="M:Rafy.Domain.RedundanciesUpdater.UpdateRedundancyByRefValue(Rafy.Domain.Entity,Rafy.Domain.RedundantPath,Rafy.ManagedProperty.IRefIdProperty)">
            <summary>
            冗余路径中非首位的引用属的值作为值属性进行冗余，那么同样要进行值属性更新操作。
            </summary>
            <param name="entity">The entity.</param>
            <param name="path">The path.</param>
            <param name="refChanged">该引用属性值变化了</param>
        </member>
        <member name="M:Rafy.Domain.RedundanciesUpdater.UpdateRedundancy(Rafy.Domain.Entity,Rafy.ManagedProperty.ConcreteProperty,System.Object,System.Collections.Generic.IList{Rafy.ManagedProperty.ConcreteProperty},System.Object)">
            <summary>
            更新某个冗余属性
            </summary>
            <param name="entity">The entity.</param>
            <param name="redundancy">更新指定的冗余属性</param>
            <param name="newValue">冗余属性的新值</param>
            <param name="refPathes">从冗余属性声明类型开始的一个引用属性集合，
            将会为这个集合路径生成更新的 Where 条件。</param>
            <param name="lastRefId">引用路径中最后一个引用属性对应的值。这个值将会作为 Where 条件的值。</param>
        </member>
        <member name="M:Rafy.Domain.RedundanciesUpdater.RefreshRedundancy(Rafy.ManagedProperty.ConcreteProperty)">
            <summary>
            完整刷新指定的冗余属性。
            </summary>
            <param name="redundancy">The redundancy.</param>
        </member>
        <member name="T:Rafy.Domain.RepositoryDataProvider">
            <summary>
            通用的仓库数据层实现。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RepositoryDataProvider.Repository">
            <summary>
            为此仓库提供数据。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RepositoryDataProvider.DataSaver">
            <summary>
            数据的保存器。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RepositoryDataProvider.DataQueryer">
            <summary>
            数据的查询器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.SubmitComposition(Rafy.Domain.IDomainComponent)">
            <summary>
            数据门户调用本接口来保存数据。
            </summary>
            <param name="component"></param>
        </member>
        <member name="E:Rafy.Domain.RepositoryDataProvider.Inserting">
            <summary>
            某个实体增加前事件。
            静态事件，不能经常修改此列表。建议在插件初始化时使用。
            </summary>
        </member>
        <member name="E:Rafy.Domain.RepositoryDataProvider.Updating">
            <summary>
            某个实体修改前事件。
            静态事件，不能经常修改此列表。建议在插件初始化时使用。
            </summary>
        </member>
        <member name="E:Rafy.Domain.RepositoryDataProvider.Deleting">
            <summary>
            某个实体删除前事件。
            静态事件，不能经常修改此列表。建议在插件初始化时使用。
            </summary>
        </member>
        <member name="E:Rafy.Domain.RepositoryDataProvider.Querying">
            <summary>
            查询实体的事件。
            静态事件，不能经常修改此列表。建议在插件初始化时使用。
            </summary>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.OnDbLoaded(Rafy.Domain.Entity)">
            <summary>
            子类重写这个方法，用于在从数据库获取出来时，及时地加载一些额外的属性。
            
            注意：这个方法中只应该为一般属性计算值，不能有其它的数据访问。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.OnEntityQueryed(Rafy.Domain.EntityQueryArgsBase)">
            <summary>
            QueryList 方法完成后调用。
            
            子类可重写此方法来实现查询完成后的数据修整工具。
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.OnQuerying(Rafy.Domain.EntityQueryArgs)">
            <summary>
            所有使用 IQuery 的数据查询，在调用完应 queryBuilder 之后，都会执行此此方法。
            所以子类可以重写此方法实现统一的查询条件逻辑。
            （例如，对于映射同一张表的几个子类的查询，可以使用此方法统一对所有方法都过滤）。
            
            默认实现为：
            * 如果还没有进行排序，则进行默认的排序。
            * 如果单一参数实现了 IPagingCriteria 接口，则使用其中的分页信息进行分页。
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.Submit(Rafy.Domain.SubmitArgs,Rafy.Domain.ISubmitInterceptorLink)">
            <summary>
            DataProvider 提交拦截器中的最后一个拦截器。
            </summary>
            <param name="e">The e.</param>
            <param name="locator">The locator.</param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.Submit(Rafy.Domain.SubmitArgs)">
            <summary>
            提交聚合对象到数据库中。
            
            子类重写此方法实现整个聚合对象保存到非关系型数据库的逻辑。
            如果只想重写单个对象的 CUD 逻辑，请重写 Insert、Update、Delete 方法。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.Insert(Rafy.Domain.Entity)">
            <summary>
            插入这个实体到仓库中。
            
            子类重写此方法来实现非关系型数据库的插入逻辑。
            重写时，注意：
            在插入完成后，把为实体新生成的 Id 赋值到实体中。否则组合子将插入失败。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.Update(Rafy.Domain.Entity)">
            <summary>
            更新这个实体到仓库中。
            
            子类重写此方法来实现非关系型数据库的更新逻辑。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.Delete(Rafy.Domain.Entity)">
            <summary>
            从仓库中删除这个实体。
            
            子类重写此方法来实现非关系型数据库的删除逻辑。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetAll(Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            子类可以重写这个方法，用于实现 GetAll 的数据层查询逻辑。
            </summary>
            <param name="paging">The paging information.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetTreeRoots(Rafy.Domain.EagerLoadOptions)">
            <summary>
            子类可以重写这个方法，用于实现 GetTreeRoots 的数据层查询逻辑。
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetById(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            子类可以重写这个方法，用于实现 GetById 的数据层查询逻辑。
            </summary>
            <param name="id">The unique identifier.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetByIdList(System.Object[],Rafy.Domain.EagerLoadOptions)">
            <summary>
            子类重写此方法，来实现自己的 GetByIdList 方法的数据层代码。
            </summary>
            <param name="idList"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetByParentId(System.Object,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            子类重写此方法，来实现自己的 GetByParentId 方法的数据层代码。
            </summary>
            <param name="parentId"></param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetByParentIdList(System.Object[],Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            子类重写此方法来实现通过父 Id 列表来获取所有组合子对象的列表
            </summary>
            <param name="parentIdList">The parent identifier list.</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetByTreeParentIndex(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过树型编码，找到所有对应的子节点。
            </summary>
            <param name="treeIndex"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetByTreePId(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            查找指定树节点的直接子节点。
            </summary>
            <param name="treePId">需要查找的树节点的Id.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetAllTreeParents(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取指定树节点的所有父节点。
            </summary>
            <param name="treeIndex">Index of the tree.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            <see cref="T:Rafy.Domain.CommonQueryCriteria"/> 查询的数据层实现。
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetBy(Rafy.Domain.ODataQueryCriteria)">
            <summary>
            <see cref="T:Rafy.Domain.ODataQueryCriteria"/> 查询的数据层实现。
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetEntityValue(System.Object,System.String)">
            <summary>
            子类重写此方法，来实现自己的 GetEntityValue 方法的数据层代码。
            </summary>
            <param name="entityId"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.QueryData(Rafy.Domain.ORM.Query.IQuery,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions,System.Boolean)">
            <summary>
            通过 IQuery 对象从持久层中查询数据。
            本方法只能由仓库中的方法来调用。本方法的返回值的类型将与仓库中方法的返回值保持一致。
            支持的返回值：EntityList、Entity、int、LiteDataTable。
            </summary>
            <param name="query">查询对象。</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <param name="markTreeFullLoaded">如果某次查询结果是一棵完整的子树，那么必须设置此参数为 true，才可以把整个树标记为完整加载。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.QueryData(Rafy.Domain.EntityQueryArgs)">
            <summary>
            通过 IQuery 对象从持久层中查询数据。
            本方法只能由仓库中的方法来调用。本方法的返回值的类型将与仓库中方法的返回值保持一致。
            支持的返回值：EntityList、Entity、int。
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.QueryData(System.Linq.IQueryable,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            从持久层中查询数据。
            本方法只能由仓库中的方法来调用。本方法的返回值的类型将与仓库中方法的返回值保持一致。
            支持的返回值：EntityList、Entity、int。
            </summary>
            <param name="queryable"></param>
            <param name="paging"></param>
            <param name="eagerLoad"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.QueryTable(Rafy.Domain.ORM.Query.IQuery,Rafy.PagingInfo)">
            <summary>
            通过 IQuery 对象来查询数据表。
            </summary>
            <param name="query">查询条件。</param>
            <param name="paging">分页信息。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.CreateLinqQuery``1">
            <summary>
            创建一个实体 Linq 查询对象。
            只能在服务端调用此方法。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.ConvertToQuery(System.Linq.IQueryable)">
            <summary>
            把一个 Linq 查询转换为 IQuery 查询。
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.EntityCUDEventArgs">
            <summary>
            某个实体被在数据层执行增加、删除、修改前的事件的参数。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityCUDEventArgs.#ctor(Rafy.Domain.Entity)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.EntityCUDEventArgs"/> class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:Rafy.Domain.EntityCUDEventArgs.Entity">
            <summary>
            被操作的实体。
            </summary>
        </member>
        <member name="T:Rafy.Domain.QueryingEventArgs">
            <summary>
            查询实体前的事件的参数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.QueryingEventArgs.Args">
            <summary>
            查询参数
            </summary>
        </member>
        <member name="T:Rafy.Domain.SubmitInterceptor">
            <summary>
            提交数据的拦截器。
            
            实现拦截器模式的原因在于：提交数据的扩展点需要满足以下几个条件：
            * 支持高频调用。（使用传统的事件会在触发事件时生成事件的参数对象，这会导致为组合中的每一个实体都生成一个事件参数对象，垃圾回收压力过大。）
            * 可以在被拦截的功能代码之前、之后做相应扩展。（传统事件的话，需要同时声明两个事件才行。）
            * 在扩展点中需要能够控制是否继续调用下一个被拦截的功能代码，。（传统事件需要使用 <see cref="T:System.ComponentModel.CancelEventArgs"/> 才可以。)
            * 线程安全。（DataSaver 本身是线程安全的）。
            </summary>
        </member>
        <member name="F:Rafy.Domain.SubmitInterceptor.SubmitInterceptorIndex">
            <summary>
            拦截器在拦截器链表中的位置。
            </summary>
        </member>
        <member name="M:Rafy.Domain.SubmitInterceptor.Submit(Rafy.Domain.SubmitArgs,Rafy.Domain.ISubmitInterceptorLink)">
            <summary>
            提交指定的实体。
            子类在此方法中，使用 locator.InvokeNext(e, this); 来调用被拦截的功能。
            </summary>
            <param name="e">提交参数，其中封装了需要对实体进行的操作。</param>
            <param name="link">使用此定位器来调用被拦截的实际提交器。</param>
        </member>
        <member name="T:Rafy.Domain.ISubmitInterceptorLink">
            <summary>
            使用此定位器来调用被拦截的实际提交器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ISubmitInterceptorLink.InvokeNext(Rafy.Domain.SubmitInterceptor,Rafy.Domain.SubmitArgs)">
            <summary>
            调用指定拦截器所拦截的功能。
            </summary>
            <param name="current">传入当前的拦截器，框架会调用该拦截器之后的拦截器。</param>
            <param name="e">提交参数，其中封装了需要对实体进行的操作。</param>
        </member>
        <member name="T:Rafy.Domain.DictionaryRepositoryFactory">
            <summary>
            实体仓库工厂类
            
            用于创建指定实体的仓库。
            
            Repository 全部使用单例模式
            </summary>
        </member>
        <member name="F:Rafy.Domain.DictionaryRepositoryFactory._repoByEntityType">
            <summary>
            使用 EntityType 作为查询键的字典。
            </summary>
        </member>
        <member name="F:Rafy.Domain.DictionaryRepositoryFactory._repoByType">
            <summary>
            使用 RepositoryType 作为查询键的字典。
            </summary>
        </member>
        <member name="F:Rafy.Domain.DictionaryRepositoryFactory._lastRepository">
            <summary>
            使用这个字段高速缓存最后一次使用的Repository。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DictionaryRepositoryFactory.Find(System.Type)">
            <summary>
            通过仓库类型查找指定的仓库。
            </summary>
            <param name="repositoryType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DictionaryRepositoryFactory.FindByEntity(System.Type)">
            <summary>
            用于查找指定实体的仓库。
            如果还没有创建，则直接创建一个。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DictionaryRepositoryFactory.DoCreate(System.Type)">
            <summary>
            创建一个实体类型的仓库。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.DictionaryRepositoryFactory._extLoaded">
            <summary>
            是否所有的仓库扩展已经加载完成。
            </summary>
        </member>
        <member name="F:Rafy.Domain.DictionaryRepositoryFactory._extByType">
            <summary>
            所有的仓库扩展类。
            
            Key: 仓库类型。
            Value: 一个仓库扩展类型的列表。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DictionaryRepositoryFactory.AddExtensions(Rafy.Domain.EntityRepository)">
            <summary>
            为指定的仓库加载所有的仓库扩展类。
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:Rafy.Domain.DictionaryRepositoryFactory.LoadAllExtensions">
            <summary>
            加载所有插件中的实体仓库扩展类
            </summary>
        </member>
        <member name="M:Rafy.Domain.DictionaryRepositoryFactory.CreateInstanceProxy(System.Type)">
            <summary>
            生成仓库、仓库扩展的代理类型。
            </summary>
            <param name="instanceType"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.DictionaryRepositoryFactory.RepoQueryMethodDeterminationHook">
            <summary>
            只有标记了 RepositoryQueryMethodAttribute 标记的方法，才需要进行拦截。
            </summary>
        </member>
        <member name="T:Rafy.Domain.DiffSaveService">
            <summary>
            差异保存类
            </summary>
        </member>
        <member name="M:Rafy.Domain.DiffSaveService.CreateClear">
            <summary>
            创建一个数据的“清理器”
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.IDataClear">
            <summary>
            数据清理器
            </summary>
        </member>
        <member name="M:Rafy.Domain.IDataClear.ClearData(Rafy.Domain.Entity)">
            <summary>
            删除不必要的对象，只留下需要保存的数据
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.IDataClear.MakeSaved(Rafy.Domain.Entity)">
            <summary>
            设置对象树的状态为“已保存”。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Rafy.Domain.CleanDataClear">
            <summary>
            把未修改的数据都清除的清理器
            </summary>
        </member>
        <member name="M:Rafy.Domain.CleanDataClear.ClearDataCore(Rafy.Domain.Entity,Rafy.MetaModel.EntityMeta)">
            <summary>
            删除不必要的对象，只留下需要保存的“脏”数据
            </summary>
            <param name="diffEntity">The difference entity.</param>
            <param name="entityInfo">The entity information.</param>
        </member>
        <member name="M:Rafy.Domain.CleanDataClear.MakeSavedCore(Rafy.Domain.Entity,Rafy.MetaModel.EntityMeta)">
            <summary>
            清除子对象集合
            </summary>
            <param name="oldEntity">The old entity.</param>
            <param name="entityInfo">The entity information.</param>
        </member>
        <member name="T:Rafy.Domain.EagerLoadOptions">
            <summary>
            贪婪加载选项。
            其中的每一个项都是一个需要即时加载属性。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EagerLoadOptions.LoadWithTreeChildren">
            <summary>
            贪婪加载树实体的子节点。
            
            如果设置了此选项，那么会先加载所有的树子节点，然后再加载其它的贪婪属性。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EagerLoadOptions.LoadWith(Rafy.ManagedProperty.IListProperty)">
            <summary>
            加载某个指定的组合子属性。
            </summary>
            <param name="childrenProperty">组合子属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EagerLoadOptions.LoadWith(Rafy.ManagedProperty.IListProperty,System.Type)">
            <summary>
            加载某个指定的组合子属性。
            </summary>
            <param name="childrenProperty">组合子属性。</param>
            <param name="owner">该属性对应的具体类型。
            这个具体的类型必须是属性的拥有类型或者它的子类型。如果传入 null，则默认为属性的拥有类型。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EagerLoadOptions.LoadWith(Rafy.ManagedProperty.IRefEntityProperty)">
            <summary>
            加载某个指定的组合子属性。
            </summary>
            <param name="refProperty">引用实体属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EagerLoadOptions.LoadWith(Rafy.ManagedProperty.IRefEntityProperty,System.Type)">
            <summary>
            加载某个指定的组合子属性。
            </summary>
            <param name="refProperty">引用实体属性。</param>
            <param name="owner">该属性对应的具体类型。
            这个具体的类型必须是属性的拥有类型或者它的子类型。如果传入 null，则默认为属性的拥有类型。</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.EntityRepository">
            <summary>
            仓库类
            用于某个实体类型及其实体列表类的管理
            注意：
            1. 其子类必须是线程安全的！
            2. 子类的构建函数建议使用protected，不要向外界暴露。使用者只能全部通过仓库工厂获取。
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:Rafy.Domain.EntityRepository.New">
            <summary>
            创建一个新的实体。
            
            如果在已经获取 Repository 的场景下，使用本方法返回的实体会设置好内部的 Repository 属性，
            这会使得 FindRepository、GetRepository 方法更加快速。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.NewList">
            <summary>
            创建一个全新的列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.NewListOrderBy``1(System.Collections.Generic.IEnumerable{Rafy.Domain.Entity},System.Func{Rafy.Domain.Entity,``0})">
            <summary>
            把旧的实体列表中的实体按照一定的排序规则，排序后组装一个新的列表返回
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="oldList"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.ListType">
            <summary>
            被本仓库管理的列表类型
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.EntityType">
            <summary>
            被本仓库管理的实体类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetConventionItem">
            <summary>
            获取当前的实体类型组合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetConventionItemCore">
            <summary>
            查询实体类型组合
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.Extensions">
            <summary>
            本仓库对应所有插件的仓库扩展类实例。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.Extension``1">
            <summary>
            获取指定类型的仓库扩展。
            </summary>
            <typeparam name="TRepositoryExt"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.SupportTree">
            <summary>
            对应的实体是否为树型实体
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.TreeIndexOption">
            <summary>
            如果本仓库对应的实体是一个树型实体，那么这个属性表示这个实体使用的树型编号方案。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.LoadAllTreeParents(Rafy.Domain.Entity)">
            <summary>
            递归加载某个节点的所有父节点。
            使用此方法后，指定节点的父节点将被赋值到它的 TreeParent 属性上。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.FindParentPropertyInfo(System.Boolean)">
            <summary>
            找到实体中对应聚合关系中的父实体引用属性元数据。
            
            注意，此函数返回的是引用实体属性，而非引用 Id 属性。
            </summary>
            <param name="throwOnNotFound"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetPropertiesInRedundancyPath">
            <summary>
            所有本实体中所有声明的冗余属性。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.EntityMeta">
            <summary>
            对应的实体元数据
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetChildProperties">
            <summary>
            所有本实体中所有声明的子属性。
            
            每一个子属性值可能是一个列表，也可能是一个单一实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.LoadAllChildren(Rafy.Domain.Entity)">
            <summary>
            把指定实体的所有组合子实体都加载到内存中。（非递归）
            </summary>
            <param name="entity"></param>
        </member>
        <member name="F:Rafy.Domain.EntityRepository._tableInfo">
            <summary>
            这个字段用于存储运行时解析出来的表的信息。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.CreateList(System.Collections.IEnumerable)">
            <summary>
            创建一个列表。
            列表的数据来自于 srcList 中的所有项。
            </summary>
            <param name="srcList"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.CreateList(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            创建一个列表。
            列表的数据来自于 srcList 中的所有项。
            </summary>
            <param name="srcList"></param>
            <param name="resetParent">此参数表示是否需要把 srcList 中的每一个实体的 <see cref="P:Rafy.Domain.IEntity.ParentList"/> 属性设置为新列表，并把实体的 ParentEntity 也设置为新列表的父实体。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.MergeIdRecur(Rafy.Domain.Entity,Rafy.Domain.Entity)">
            <summary>
            把整个聚合对象的 Id 设置完整。
            </summary>
            <param name="oldEntity"></param>
            <param name="newEntity"></param>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.Save(Rafy.Domain.IDomainComponent)">
            <summary>
            把这个组件中的所有改动保存到仓库中。
            
            <remarks>
            * 当本地保存时，方法返回的就是传入的实体。
            * 当客户端保存时，方法返回的是服务端保存后并向客户端回传的实体。
                此时，会对传入的实体或列表进行融合 Id 的操作。
                也就是说，在服务端生成的所有 Id 都会设置到参数实体中。
                而服务端设置其它的属性则会被忽略，如果想要使用其它的属性，则可以从返回值中获取。
                
            在客户端调用本方法保存实体的同时，服务端会把服务端保存完毕后的实体数据传输回客户端，这样才能保证客户端的实体能获取服务端生成的 Id 数据。
            如果希望不进行如何大数据量的传输，则尽量不要在客户端直接调用 Save 来进行实体的保存。（例如可以通过 Service 来定义数据的传输。）
            </remarks>
            </summary>
            <param name="component">需要保存的组件，可以是一个实体，也可以是一个实体列表。</param>
            <returns>
            返回在仓库中保存后的实体。
            </returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.SaveToPortal(Rafy.Domain.IDomainComponent)">
            <summary>
            通过门户来保存指定的实体类/列表。
            
            所有使用 Save 方法保存的实体，都会通过这个方法来选择是分布式保存、还是直接保存。
            此方法是仓库接口门户层的最后一个方法，之后将会在服务端（如果是分布式）发布 Submit 数据提交操作。
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.OnSaving(Rafy.Domain.IDomainComponent)">
            <summary>
            在使用 Save 方法保存实体数据时，进入数据门户前，Rafy 会调用此方法。
            <remarks>
            子类可重写此方法实现一些仓库保存前的检查。
            例如，一些仓库只允许在客户端进行调用时，可以在方法中判断，如果当前处在服务端，则抛出异常的逻辑。
            </remarks>
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.HasNewEntity(Rafy.Domain.Entity)">
            <summary>
            迭归检测一个组合实体中是否有新添加的实体
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.DataPortalLocation">
            <summary>
            获取或设置本仓库数据门户所在位置。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.ClientCache">
            <summary>
            基于版本号更新的客户端缓存 API
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.ServerCache">
            <summary>
            服务端内存缓存 API
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.CacheAll">
            <summary>
            优先使用缓存中的数据来查询所有的实体类。
            
            如果该实体的缓存没有打开，则本方法会直接调用 GetAll 并返回结果。
            如果缓存中没有这些数据，则本方法同时会把数据缓存起来。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.CacheById(System.Object)">
            <summary>
            优先使用缓存中的数据来通过 Id 获取指定的实体对象
            
            如果该实体的缓存没有启用，则本方法会直接调用 GetById 并返回结果。
            如果缓存中没有这些数据，则本方法同时会把数据缓存起来。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetAll(Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            分页查询所有的实体类
            </summary>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetFirst(Rafy.Domain.EagerLoadOptions)">
            <summary>
            查询第一个实体。
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.CountAll">
            <summary>
            统计仓库中所有的实体数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.CountByParentId(System.Object)">
            <summary>
            统计某个父对象下的子对象条数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetById(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过Id在数据层中查询指定的对象
            </summary>
            <param name="id">The unique identifier.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetByIdList(System.Object[],Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取指定 id 集合的实体列表。
            </summary>
            <param name="idList"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetByParentIdList(System.Object[],Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过组合父对象的 Id 列表，查找所有的组合子对象的集合。
            </summary>
            <param name="parentIdList">The parent identifier list.</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetByParentId(System.Object,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过父对象 Id 分页查询子对象的集合。
            </summary>
            <param name="parentId"></param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 <see cref="T:Rafy.Domain.CommonQueryCriteria"/> 来查询实体列表。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetFirstBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询实体列表。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.CountBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询实体的个数。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetBy(Rafy.Domain.ODataQueryCriteria)">
            <summary>
            通过 <see cref="T:Rafy.Domain.ODataQueryCriteria"/> 来查询实体列表。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetFirstBy(Rafy.Domain.ODataQueryCriteria)">
            <summary>
            通过 <see cref="T:Rafy.Domain.ODataQueryCriteria"/> 来查询某个实体。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.CountBy(Rafy.Domain.ODataQueryCriteria)">
            <summary>
            通过 <see cref="T:Rafy.Domain.ODataQueryCriteria"/> 来查询实体的个数。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetByTreeParentIndex(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            递归查找指定父索引号的节点下的所有子节点。
            </summary>
            <param name="treeIndex"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetAllTreeParents(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取指定索引对应的树节点的所有父节点。
            查询出的父节点同样以一个部分树的形式返回。
            </summary>
            <param name="treeIndex"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetByTreePId(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            查找指定树节点的直接子节点。
            </summary>
            <param name="treePId">需要查找的树节点的Id.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetTreeRoots(Rafy.Domain.EagerLoadOptions)">
            <summary>
            查询所有的根节点。
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.CountTreeRoots">
            <summary>
            查询所有的根节点数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetBy(System.Object)">
            <summary>
            通过某个具体的参数来调用数据层查询。
            <para>调用逻辑：                                                                 </para>
            <para>1.尝试调用子类的 <see cref="M:Rafy.Domain.EntityRepository.DoGetBy(System.Object)"/> 方法逻辑。                   </para>
            <para>2.尝试通过反射来调用仓库扩展类型中的名为 GetBy，参数为具体参数的查询方法。     </para>
            <para>3.如果上述都没有实现，则抛出异常。                                           </para>
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetEntityValue(System.Object,System.String)">
            <summary>
            查询某个实体的某个属性的值。
            </summary>
            <param name="id"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoCacheAll">
            <summary>
            使用Cache获取所有对象。
            
            如果Cache中不存在时，则会主动查询数据层，并加入到缓存中。
            如果缓存没有被启用，则直接查询数据层，返回数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoCacheByParent(Rafy.Domain.Entity)">
            <summary>
            使用Cache获取某个父对象下的所有子对象。
            
            如果Cache中不存在时，则会主动查询数据层，并加入到缓存中。
            如果缓存没有被启用，则直接查询数据层，返回数据。
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoCacheById(System.Object)">
            <summary>
            使用Cache获取某个指定的对象。
            
            如果Cache中不存在时，则会主动查询数据层，并加入到缓存中。
            如果缓存没有被启用，则直接查询数据层，返回数据。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetByParent(Rafy.Domain.Entity)">
            <summary>
            获取指定父对象下的子对象集合。
            
            此方法会被组合父实体的 GetLazyList 方法的默认逻辑所调用。
            子类重写此方法来实现 GetLazyList 的默认查询逻辑。
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetAll(Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            分页查询所有实体
            </summary>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetFirst(Rafy.Domain.EagerLoadOptions)">
            <summary>
            查询第一个实体
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetById(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过 Id 查询某个实体
            </summary>
            <param name="id"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetTreeRoots(Rafy.Domain.EagerLoadOptions)">
            <summary>
            查询所有的根节点、数量。
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoCountTreeRoots">
            <summary>
            查询所有的根节点数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetByIdList(System.Object[],Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过 Id 列表查询实体列表。
            </summary>
            <param name="idList"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetByParentIdList(System.Object[],Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过组合父对象的 Id 列表，查找所有的组合子对象的集合。
            </summary>
            <param name="parentIdList">The parent identifier list.</param>
            <param name="paging">The paging information.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetByParentId(System.Object,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过父对象 Id 分页查询子对象的集合。
            </summary>
            <param name="parentId"></param>
            <param name="paging"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 <see cref="T:Rafy.Domain.CommonQueryCriteria"/> 来查询实体列表。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetFirstBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 <see cref="T:Rafy.Domain.CommonQueryCriteria"/> 来查询单一实体。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoCountBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 <see cref="T:Rafy.Domain.CommonQueryCriteria"/> 来查询实体个数。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetBy(Rafy.Domain.ODataQueryCriteria)">
            <summary>
            通过 <see cref="T:Rafy.Domain.ODataQueryCriteria"/> 来查询实体列表。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetFirstBy(Rafy.Domain.ODataQueryCriteria)">
            <summary>
            通过 <see cref="T:Rafy.Domain.ODataQueryCriteria"/> 来查询单一实体。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoCountBy(Rafy.Domain.ODataQueryCriteria)">
            <summary>
            通过 <see cref="T:Rafy.Domain.ODataQueryCriteria"/> 来查询实体的个数。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetByTreeParentIndex(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            递归查找所有树型子
            </summary>
            <param name="treeIndex"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetByTreePId(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            查找指定树节点的直接子节点。
            </summary>
            <param name="treePId">需要查找的树节点的Id.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoCountAll">
            <summary>
            统计仓库中所有的实体数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoCountByParentId(System.Object)">
            <summary>
            查询某个父对象下的子对象
            </summary>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetBy(System.Object)">
            <summary>
            通过某个具体的参数来调用数据层查询。
            
            子类重写此方法来实现 <see cref="M:Rafy.Domain.EntityRepository.GetBy(System.Object)"/> 的接口层逻辑。
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetEntityValue(System.Object,System.String)">
            <summary>
            通过某个具体的参数来调用数据层查询。
            子类重写此方法来实现 <see cref="M:Rafy.Domain.EntityRepository.GetEntityValue(System.Object,System.String)" /> 的接口层逻辑。
            </summary>
            <param name="id">The unique identifier.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetAllTreeParents(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取指定索引对应的树节点的所有父节点。
            查询出的父节点同样以一个部分树的形式返回。
            </summary>
            <param name="treeIndex"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.DataProvider">
            <summary>
            数据层提供程序。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.PortalFetch(Rafy.Domain.IEQC)">
            <summary>
            来自数据门户的数据查询
            </summary>
            <param name="criteria">The criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.NotifyLoaded(Rafy.Domain.Entity)">
            <summary>
            当一个实体最终要出仓库时，才调用此方法完成加载。
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.NotifyLoaded(Rafy.Domain.EntityList)">
            <summary>
            当一个实体列表最终要出仓库时，才调用此方法完成加载。
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.Rafy#Domain#IRepositoryInternal#ConvertRow(Rafy.Domain.Entity)">
            <summary>
            把一行数据转换为一个实体。
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.EntityRepositoryExt">
            <summary>
            实体仓库类的扩展类。
            仓库扩展将是一个非常轻量级的对象。
            
            实体仓库扩展，支持在基类上进行扩展，这样所有的仓库子类都直接被扩展。
            
            如果本扩展是扩展在某个抽象的仓库基类上，那么系统会为被扩展的仓库基类的所有子类都建立一个本扩展的实例。
            </summary>
        </member>
        <member name="T:Rafy.Domain.EntityRepositoryExt`1">
            <summary>
            泛型 API，简化上层使用。
            <see cref="T:Rafy.Domain.EntityRepositoryExt"/>
            </summary>
            <typeparam name="TRepository"></typeparam>
        </member>
        <member name="P:Rafy.Domain.EntityRepositoryExt`1.RepositoryType">
            <summary>
            被扩展的仓库类型。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRepositoryExt`1.Repository">
            <summary>
            被扩展的仓库对象。
            </summary>
        </member>
        <member name="M:Rafy.Domain.IRepositoryExtInternal.IsExtending(Rafy.Domain.IRepository)">
            <summary>
            判断是否当前扩展是为指定的仓库编写的。
            </summary>
            <param name="repository"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryExtInternal.BindRepository(Rafy.Domain.EntityRepository)">
            <summary>
            使用一个具体的仓库子类来绑定这个对象
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:Rafy.Domain.EntityRepositoryQueryBase">
            <summary>
            数据仓库查询基类。
            作为 EntityRepository、EntityRepositoryExt 两个类的基类，本类提取了所有数据访问的公共方法。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRepositoryQueryBase.DataQueryer">
            <summary>
            本仓库使用的数据查询器。
            如果在仓库中直接实现数据层代码，则可以使用该查询器来查询数据。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityRepositoryQueryBase.CreateLinqQuery``1">
            <summary>
            创建一个实体 Linq 查询对象。
            只能在服务端调用此方法。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepositoryQueryBase.QueryData(System.Linq.IQueryable,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            从持久层中查询数据。
            本方法只能由仓库中的方法来调用。本方法的返回值的类型将与仓库中方法的返回值保持一致。
            支持的返回值：EntityList、Entity、int、LiteDataTable。
            </summary>
            <param name="queryable"></param>
            <param name="paging"></param>
            <param name="eagerLoad"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepositoryQueryBase.ConvertToQuery(System.Linq.IQueryable)">
            <summary>
            把一个 Linq 查询转换为 IQuery 查询。
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepositoryQueryBase.QueryData(Rafy.Domain.ORM.Query.IQuery,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions,System.Boolean)">
            <summary>
            通过 IQuery 对象从持久层中查询数据。
            本方法只能由仓库中的方法来调用。本方法的返回值的类型将与仓库中方法的返回值保持一致。
            支持的返回值：EntityList、Entity、int、LiteDataTable。
            </summary>
            <param name="query">查询对象。</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <param name="markTreeFullLoaded">如果某次查询结果是一棵完整的子树，那么必须设置此参数为 true ，才可以把整个树标记为完整加载。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepositoryQueryBase.QueryData(Rafy.Domain.EntityQueryArgs)">
            <summary>
            通过 IQuery 对象从持久层中查询数据。
            本方法只能由仓库中的方法来调用。本方法的返回值的类型将与仓库中方法的返回值保持一致。
            支持的返回值：EntityList、Entity、int。
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepositoryQueryBase.QueryTable(Rafy.Domain.ORM.Query.IQuery,Rafy.PagingInfo)">
            <summary>
            通过 IQuery 对象来查询数据表。
            </summary>
            <param name="query">查询条件。</param>
            <param name="paging">分页信息。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepositoryQueryBase.QueryInBatches``1(``0[],System.Func{``0[],Rafy.Domain.EntityList},System.Int32)">
            <summary>
            由于使用数据库的 In 语句有个数的限制。所以当 In 的参数个数比较多时，需要进行分批查询并汇总最后的列表。
            本方法用于帮助实现这种场景。
            </summary>
            <param name="inParameters">In 语句的参数列表。</param>
            <param name="batchQueryer">分批进行查询的查询实现。</param>
            <param name="batchSize">每一个批次的大小。</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.MemoryEntityRepository">
            <summary>
            本地实体的仓库基类。
            
            提供了为本地实体生成 Id 的功能。
            本仓库会把所有的生成的实体的数据都存储在内存中。
            （
            不用存储到数据库，只存在于内存中。
            不论是客户端还是服务端，在哪调用仓库的查询接口，就存在哪的内存中。
            在内存中，只存在实体的数据，在查询时，会把这些数据转换为实体。
            ）
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.MemoryEntityRepository.GetRealKey(Rafy.Domain.Entity)">
            <summary>
            获取给定实体的真实键。
            
            由于这些实体的 Id 是自动生成的，所以子类需要提供真实的字符串类型的主键。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.MemoryEntityRepository.DoGetById(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过本地 Id 查找实体。
            </summary>
            <param name="id"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.ORM.MemoryEntityRepository.MemoryRepositoryDataProvider._memoryRows">
            <summary>
            当前已经生成 Id
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.MemoryEntityRepository.MemoryRepositoryDataProvider.Clear">
            <summary>
            清除本地内存数据库
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.MemoryEntityRepository.MemoryRepositoryDataProvider.FindByRealKey(System.String)">
            <summary>
            通过真实的键查找目标实体。
            </summary>
            <param name="realKey"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.MemoryEntityRepository.MemoryRepositoryDataProvider.LoadAll">
            <summary>
            子类重写此方法来实现一次性加载所有对象到内存中的逻辑。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.MemoryEntityRepository.MemoryRepositoryDataProvider.MemoryClone(Rafy.Domain.Entity,Rafy.Domain.Entity)">
            <summary>
            从指定的对象中拷贝所有数据到另一对象中。
            
            默认实体只拷贝所有数据属性。
            子类可重写此方法来拷贝更多一般字段。
            </summary>
            <param name="src">数据源对象。</param>
            <param name="dst">目标对象。</param>
        </member>
        <member name="M:Rafy.Domain.ORM.MemoryEntityRepository.MemoryRepositoryDataProvider.MemorySaver.CreateRedundanciesUpdater">
            <summary>
            未实现
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.ConditionalSql">
            <summary>
            Sql 构造器
            
            调用本类对象的 Write 打头的一系统方法来构造条件，本类型会自动添加 Where、And 等连接符。
            相关配置可以查看属性 AutoConcat 及 HasWhere。
            
            如果想直接面向 Sql 字符串进行操作，可以使用 Append 打头的方法，或者使用 InnerStringBuider 属性获取内部的 StringBuider 后再进行操作。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteWhereSqlIf(System.String,System.Object)">
            <summary>
            如果值不为空，则添加自定义 Where 语句 Sql
            </summary>
            <param name="sql"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteEqualIf(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            如果值不为空，则添加某属性与某值相等的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">将会对该值进行是否为空的检测。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteNotEqualIf(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            如果值不为空，则添加某属性与某值不相等的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">将会对该值进行是否为空的检测。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteGreaterIf(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            如果值不为空，则添加某属性比某值大的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">将会对该值进行是否为空的检测。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteGreaterEqualIf(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            如果值不为空，则添加某属性 >= 某值的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">将会对该值进行是否为空的检测。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteLessIf(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            如果值不为空，则添加某属性 <![CDATA[<]]> 某值的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">将会对该值进行是否为空的检测。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteLessEqualIf(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            如果值不为空，则添加某属性 <![CDATA[<=]]> 某值的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">将会对该值进行是否为空的检测。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteContainsIf(Rafy.ManagedProperty.IManagedProperty,System.String,System.Type)">
            <summary>
            如果值不为空，则添加某属性包含某值的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">将会对该值进行是否为空的检测。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteStartWithIf(Rafy.ManagedProperty.IManagedProperty,System.String,System.Type)">
            <summary>
            如果值不为空，则添加某属性以某字符串值开头的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">将会对该值进行是否为空的检测。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteLikeIf(Rafy.ManagedProperty.IManagedProperty,System.String,System.Type)">
            <summary>
            如果值不为空，则添加某属性以某字符串值为模糊匹配的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">将会对该值进行是否为空的检测。值中需要带有通配符。如 '%'</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.IsNotEmpty(System.Object)">
            <summary>
            判断某个值是否非空。
            
            如果是字符串，则检测它是否为非空字符。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.ORM.ConditionalSql.HasWhere">
            <summary>
            是否当前 SQL 中已经存在了 Where 关键字。
            
            如果没有存在 Where，则会在再次添加条件时，自动添加 Where 关键字。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ConditionalSql.AutoConcat">
            <summary>
            自动添加的连接符。
            默认是 AND
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteWhereSql(System.String,System.Object[])">
            <summary>
            添加自定义 Where 语句 Sql
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteEqual(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            添加某属性与某值相等的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteNotEqual(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            添加某属性与某值不相等的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteGreater(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            添加某属性比某值大的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteGreaterEqual(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            添加某属性 >= 某值的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteLess(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            添加某属性 <![CDATA[<]]> 某值的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteLessEqual(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            添加某属性 <![CDATA[<=]]> 某值的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteContains(Rafy.ManagedProperty.IManagedProperty,System.String,System.Type)">
            <summary>
            添加某属性包含某值的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteStartWith(Rafy.ManagedProperty.IManagedProperty,System.String,System.Type)">
            <summary>
            添加某属性以某字符串值开头的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteLike(Rafy.ManagedProperty.IManagedProperty,System.String,System.Type)">
            <summary>
            添加某属性以某字符串值为模糊匹配的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">作为比较的值。值中需要带有通配符。如 '%'</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteIn(Rafy.ManagedProperty.IManagedProperty,System.Collections.IList,System.Type)">
            <summary>
            添加某属性在某个序列中的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="values">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteNotIn(Rafy.ManagedProperty.IManagedProperty,System.Collections.IList,System.Type)">
            <summary>
            添加某属性不在某个序列中的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="values">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.GetDbTable(Rafy.ManagedProperty.IManagedProperty,System.Type)">
            <summary>
            找到指定托管属性对应的 ORM 表元数据。
            </summary>
            <param name="property">The property.</param>
            <param name="propertyOwner">The property owner.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.GetPropertyTable(Rafy.ManagedProperty.IManagedProperty,System.Type,System.Collections.Generic.Dictionary{System.Type,Rafy.Domain.ORM.RdbTable})">
            <summary>
            通过托管属性及其对应的实体类型，并通过可用的缓存列表，查找对应的 DbTable。
            </summary>
            <param name="property"></param>
            <param name="propertyOwner"></param>
            <param name="tablesCache"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlConditionAutoConcat">
            <summary>
            自动添加的连接符。
            默认是 AND
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.SqlConditionAutoConcat.And">
            <summary>
            自动用 And 连接两个 Where 语句
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.SqlConditionAutoConcat.Or">
            <summary>
            自动用 Or 连接两个 Where 语句
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.SqlConditionAutoConcat.None">
            <summary>
            关闭自动连接
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.DbMigration.ClassMetaReader">
            <summary>
            从 Rafy 元数据中读取整个数据库的元数据。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.ClassMetaReader.IgnoreTables">
            <summary>
            需要忽略的表的表名的集合。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.ClassMetaReader.ReadComment">
            <summary>
            是否需要同时读取出相应的注释。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.ClassMetaReader.AdditionalPropertiesComments">
            <summary>
            额外的一些属性注释的字典。
            Key:属性名。
            Value:注释值。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.ClassMetaReader.Read">
            <summary>
            读取整个类型对应的数据库的元数据。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.ClassMetaReader.TypesMetaReader.AdditionalPropertiesComments">
            <summary>
            额外的一些属性注释的字典。
            Key:属性名。
            Value:注释值。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.DbMigration.ClassMetaReader.TypesMetaReader._foreigns">
            <summary>
            临时存储在这个列表中，最后再整合到 Database 中。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.ClassMetaReader.TypesMetaReader.BuildTable(Rafy.MetaModel.EntityMeta)">
            <summary>
            根据实体类型创建表的描述信息，并添加到数据库中
            </summary>
            <param name="em">The memory.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException">refMeta.ReferenceInfo == null</exception>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.ClassMetaReader.TypesMetaReader.AddTable(Rafy.DbMigration.Model.Table)">
            <summary>
            将表添加到数据库中，对于已经存在的表进行全并
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.ClassMetaReader.TypesMetaReader.BuildFKRelations">
            <summary>
            构造外键的描述，并创建好与数据库、表、列的相关依赖关系
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.DbMigration.ClassMetaReader.TypesMetaReader.ForeignConstraintInfo">
            <summary>
            简单描述外键约束的信息，在表构建完成后，用些信息构造外键约束
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.DbMigration.CommentFinder">
            <summary>
            实体类、实体属性的注释查找器。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.CommentFinder.AdditionalPropertiesComments">
            <summary>
            额外的一些属性注释的字典。
            Key:属性名。
            Value:注释值。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.CommentFinder.AppendEnumValues(System.String,Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            枚举值的注释，需要同时序列化所有枚举的值。
            </summary>
            <param name="comment"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.CommentFinder.FormatEnumValues(System.Type)">
            <summary>
            Formats the enum values.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.DbMigration.DbHistoryRepository">
            <summary>
            使用 DbMigrationHistory 库来记录数据库升级日志的日志仓库类。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.DbMigration.MigrateService">
            <summary>
            在服务端升级数据库的服务
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.DbMigration.MigratingOptions">
            <summary>
            需要升级的数据库集合选项。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.MigratingOptions.RunDataLossOperation">
            <summary>
            是否执行删除操作。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.MigratingOptions.ReserveHistory">
            <summary>
            是否需要保存数据库的升级记录到 <see cref="F:Rafy.Domain.DbSettingNames.DbMigrationHistory"/> 的库中。
            如果本属性为 true，需要在连接字符串配置中添加该库对应的连接配置。
            默认为 false。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.MigratingOptions.Databases">
            <summary>
            要升级的数据库列表。不能为 null。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.MigratingOptions.IgnoreTables">
            <summary>
            在自动升级过程中，需要忽略掉的表的列表。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistory.TimeId">
            <summary>
            SqlCE 数据库的 DateTime 类型的精度不够，会造成数据丢失，使得历史记录的时间对比出错。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistory.TimeString">
            <summary>
            由于 TimeId 不利于显示，所以添加一个 TimeString 冗余字符专用于显示时间。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryList.Item(System.Int32)">
            <summary>
            获取或设置指定位置的实体。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryList.GetEnumerator">
            <summary>
            获取本实体列表的迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryList.Concrete">
            <summary>
            返回子实体的强类型迭代接口，方便使用 Linq To Object 操作。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryList.Add(Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistory)">
            <summary>
            添加指定的实体到集合中。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryList.Contains(Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistory)">
            <summary>
            判断本集合是否包含指定的实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryList.IndexOf(Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistory)">
            <summary>
            判断指定的实体在本集合中的索引号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryList.Insert(System.Int32,Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistory)">
            <summary>
            在指定的位置插入实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryList.Remove(Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistory)">
            <summary>
            在集合中删除指定的实体。返回是否成功删除。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.CreateLinqQuery">
            <summary>
            创建一个实体类的 Linq 查询器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.New">
            <summary>
            创建一个新的实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.NewList">
            <summary>
            创建一个全新的列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.CacheById(System.Object)">
            <summary>
            优先使用缓存中的数据来通过 Id 获取指定的实体对象
            
            如果该实体的缓存没有打开，则本方法会直接调用 GetById 并返回结果。
            如果缓存中没有这些数据，则本方法同时会把数据缓存起来。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.CacheAll">
            <summary>
            优先使用缓存中的数据来查询所有的实体类
            
            如果该实体的缓存没有打开，则本方法会直接调用 GetAll 并返回结果。
            如果缓存中没有这些数据，则本方法同时会把数据缓存起来。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetById(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过Id在数据层中查询指定的对象
            </summary>
            <param name="id"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetFirst(Rafy.Domain.EagerLoadOptions)">
            <summary>
            查询第一个实体类
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetAll(Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            分页查询所有的实体类
            </summary>
            <param name="paging"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetByIdList(System.Object[],Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取指定 id 集合的实体列表。
            </summary>
            <param name="idList"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetByParentIdList(System.Object[],Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过组合父对象的 Id 列表，查找所有的组合子对象的集合。
            </summary>
            <param name="parentIdList"></param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetByParentId(System.Object,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过父对象 Id 分页查询子对象的集合。
            </summary>
            <param name="parentId"></param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询实体列表。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetFirstBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询单一实体。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetByTreeParentIndex(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            递归查找所有树型子
            </summary>
            <param name="treeIndex"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetByTreePId(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            查找指定树节点的直接子节点。
            </summary>
            <param name="treePId">需要查找的树节点的Id.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionList.Item(System.Int32)">
            <summary>
            获取或设置指定位置的实体。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionList.GetEnumerator">
            <summary>
            获取本实体列表的迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionList.Concrete">
            <summary>
            返回子实体的强类型迭代接口，方便使用 Linq To Object 操作。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionList.Add(Rafy.Domain.ORM.DbMigration.Presistence.DbVersion)">
            <summary>
            添加指定的实体到集合中。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionList.Contains(Rafy.Domain.ORM.DbMigration.Presistence.DbVersion)">
            <summary>
            判断本集合是否包含指定的实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionList.IndexOf(Rafy.Domain.ORM.DbMigration.Presistence.DbVersion)">
            <summary>
            判断指定的实体在本集合中的索引号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionList.Insert(System.Int32,Rafy.Domain.ORM.DbMigration.Presistence.DbVersion)">
            <summary>
            在指定的位置插入实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionList.Remove(Rafy.Domain.ORM.DbMigration.Presistence.DbVersion)">
            <summary>
            在集合中删除指定的实体。返回是否成功删除。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.CreateLinqQuery">
            <summary>
            创建一个实体类的 Linq 查询器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.New">
            <summary>
            创建一个新的实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.NewList">
            <summary>
            创建一个全新的列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.CacheById(System.Object)">
            <summary>
            优先使用缓存中的数据来通过 Id 获取指定的实体对象
            
            如果该实体的缓存没有打开，则本方法会直接调用 GetById 并返回结果。
            如果缓存中没有这些数据，则本方法同时会把数据缓存起来。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.CacheAll">
            <summary>
            优先使用缓存中的数据来查询所有的实体类
            
            如果该实体的缓存没有打开，则本方法会直接调用 GetAll 并返回结果。
            如果缓存中没有这些数据，则本方法同时会把数据缓存起来。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetById(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过Id在数据层中查询指定的对象
            </summary>
            <param name="id"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetFirst(Rafy.Domain.EagerLoadOptions)">
            <summary>
            查询第一个实体类
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetAll(Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            分页查询所有的实体类
            </summary>
            <param name="paging"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetByIdList(System.Object[],Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取指定 id 集合的实体列表。
            </summary>
            <param name="idList"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetByParentIdList(System.Object[],Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过组合父对象的 Id 列表，查找所有的组合子对象的集合。
            </summary>
            <param name="parentIdList"></param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetByParentId(System.Object,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过父对象 Id 分页查询子对象的集合。
            </summary>
            <param name="parentId"></param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询实体列表。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetFirstBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询单一实体。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetByTreeParentIndex(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            递归查找所有树型子
            </summary>
            <param name="treeIndex"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetByTreePId(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            查找指定树节点的直接子节点。
            </summary>
            <param name="treePId">需要查找的树节点的Id.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.DbMigration.RafyDbMigrationContext">
            <summary>
            在 DbMigrationContext 的基础上实现以下功能：
            * 读取元数据，获取目标数据库 Schema
            * 使用 DbMigrationHistory 库来支持历史日志
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.RafyDbMigrationContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.ORM.DbMigration.RafyDbMigrationContext"/> class.
            </summary>
            <param name="dbSetting">The database setting.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.RafyDbMigrationContext.#ctor(Rafy.Data.DbSetting)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.ORM.DbMigration.RafyDbMigrationContext"/> class.
            </summary>
            <param name="dbSetting">The database setting.</param>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.RafyDbMigrationContext.ClassMetaReader">
            <summary>
            从实体类型元数据中读取数据库结构的读取器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.RafyDbMigrationContext.AutoMigrate">
            <summary>
            使用实体类型的数据库映射元数据来自动更新数据库。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.RafyDbMigrationContext.RefreshComments">
            <summary>
            使用实体类中的注释来更新数据库中的相关注释内容。
            注意，要成功使用此方法，需要在编译领域实体所在的程序集时，同时生成对应的 XML 注释文件。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.DisabledTypedEntityContext">
            <summary>
            一个没有任何功能的上下文。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.EntityContext">
            <summary>
            实体唯一上下文
            
            保证了同一个 id 的实体在内存中只有一个运行时对象：
            申请实体上下文块后，块中的所有代码经过实体仓库操作的实体，都会被保存在内存中。
            当再次查询出同样的实体时，则会返回出之前已经查询出来的实体。
            
            注意，目前此功能只能在服务端使用。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.EntityContext.Current">
            <summary>
            当前线程所对应的实体上下文
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.EntityContext.Disabled">
            <summary>
            是否已经禁用了 EntityContext 功能。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.EntityContext._lastContext">
            <summary>
            为最后一次被查询的对象进行缓存，提高查询效率。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.EntityContext._contexts">
            <summary>
            所有实体类型对应的上下文对象。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.EntityContext.GetOrCreateTypeContext(System.Type)">
            <summary>
            查找或者直接创建某一特定实体类型的上下文对象。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.EntityContext.FindTypeContext(System.Type)">
            <summary>
            查找对应实体的类型上下文
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.EntityContext.Enter">
            <summary>
            申明一个实体上下文操作代码块。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.EntityContext.Disable">
            <summary>
            声明一个禁用了 EntityContext 功能的代码块。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.EntityContextWrapper">
            <summary>
            一个实现 IDisposable 模式，辅助声明实体上下文代码块的类型。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.EntityContextDisableWrapper">
            <summary>
            一个实现 IDisposable 模式，辅助禁用实体上下文代码块的类型。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.TypedEntityContext">
            <summary>
            某一特定实体类型对应的实体上下文
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.TypedEntityContext._entities">
            <summary>
            从 id 到 实体 的键值对。
            Key：id
            Value：Entity
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.TypedEntityContext.EntityType">
            <summary>
            特定的实体类型。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.TypedEntityContext.TryGetById(System.Object)">
            <summary>
            通过 id 在上下文中查找对应的实体。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.TypedEntityContext.Add(System.Object,Rafy.Domain.IEntity)">
            <summary>
            直接添加一个实体到上下文中
            </summary>
            <param name="id"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.TypedEntityContext.Set(System.Object,Rafy.Domain.IEntity)">
            <summary>
            设置或者刷新上下文中对应 id 的实体
            </summary>
            <param name="id"></param>
            <param name="entity"></param>
        </member>
        <member name="T:Rafy.Domain.ORM.Linq.EntityQueryable`1">
            <summary>
            实体查询器。
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.EntityQueryable`1.#ctor(Rafy.Domain.EntityRepository)">
            <summary>
            为指定的仓库进行查询
            </summary>
            <param name="repo"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.EntityQueryable`1.#ctor(Rafy.Domain.ORM.Linq.EntityQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            为反射提供，见：EntityQueryProvider.CreateQuery(Expression)
            </summary>
            <param name="provider"></param>
            <param name="exp"></param>
        </member>
        <member name="P:Rafy.Domain.ORM.Linq.EntityQueryable`1.ElementType">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Linq.EntityQueryable`1.Expression">
            <summary>
            表达式
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Linq.EntityQueryable`1.Provider">
            <summary>
            提供程序
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Linq.EntityQueryBuilder">
            <summary>
            通过 Linq 表达式，调用 SqlSelect 来构造查询。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Linq.EntityQueryBuilder._query">
            <summary>
            正在组织的查询对象。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Linq.EntityQueryBuilder._reverseWhere">
            <summary>
            是否需要反转查询中的所有条件操作符。
            场景：当转换 Linq 表达式中的 All 方法到 Sql 的 NotExsits 时，需要把内部的条件都转换为反向操作符。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Linq.EntityQueryBuilder._hasNot">
            <summary>
            是否有 Not 操作。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.EntityQueryBuilder.MakeConstraint">
            <summary>
            通过目前已经收集到的属性、操作符、值，来生成一个属性条件结果。
            并清空已经收集的信息。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.EntityQueryBuilder.MakeBooleanConstraintIfNoValue">
            <summary>
            如果只读取到了一个 Boolean 属性，没有读取到操作符、对比值，
            而这时已经完成了条件的组装，那么必须把这个属性变成一个对判断条件。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Linq.EntityQueryProvider">
            <summary>
            实体 Linq 查询提供器。
            
            作为 EntityRepository 的一个字段，单例。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.EntityQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            通过查询表达式来查询实体。
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.EntityQueryProvider.QueryEntityList(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            通过查询表达式来查询实体。
            </summary>
            <param name="expression">The expression.</param>
            <param name="counting">if set to <c>true</c> [counting].</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.Evaluator.PartialEval(System.Linq.Expressions.Expression)">
            <summary> 
            <![CDATA[ 
            Performs evaluation & replacement of independent sub-trees > 
            ]]>
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns> 
        </member>
        <member name="T:Rafy.Domain.ORM.Linq.Evaluator.SubtreeEvaluator">
            <summary> 
            <![CDATA[ 
            Evaluates & replaces sub-trees when first candidate is reached (top-down) 
            ]]>
            </summary> 
        </member>
        <member name="T:Rafy.Domain.ORM.Linq.Evaluator.EvaluableTreeFinder">
            <summary> 
            Performs bottom-up analysis to determine which nodes can possibly 
            be part of an evaluated sub-tree. 
            </summary> 
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.Evaluator.EvaluableTreeFinder.Find(System.Linq.Expressions.Expression)">
            <summary>
            查找出所有可被计算值的表达式。
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.Linq.PropertyFinder">
            <summary>
            访问一个属性的表达式，如 A.B.C.Name，并执行以下操作：
            * 对其中使用到的引用属性，在查询对象中添加表的 Join。
            * 返回找到的最终属性（如上面的 Name，或者是 A.Children 中的 Children），以及该属性对应的表对象。
            * 如果引用属性是可空引用属性，则同时还会生成该可空引用属性不为空的条件。（因为是对这个引用实体的属性进行判断，所以需要这个引用不能为空。）
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Linq.PropertyFinder.ReverseConstraint">
            <summary>
            是否需要在查询中反转所有条件。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Linq.PropertyFinder.Property">
            <summary>
            查找到的属性。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Linq.PropertyFinder.PropertyOwnerTable">
            <summary>
            查找到的属性对应的表。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Linq.PropertyFinder.NullableRefConstraint">
            <summary>
            如果使用了引用属性，而且是可空的引用属性，那么添加这可空外键不为空的条件。
            这个属性将返回这个条件，外界使用时，需要主动将这个条件添加到查询中。
            
            例如：
            Book.Category.Name = 'a'
            应该转换为
            Book.CategoryId IS NOT NULL AND BookCategory.Name = 'a'；
            如果同时 <see cref="F:Rafy.Domain.ORM.Linq.PropertyFinder._reverseConstraint"/> 是 true，则应该转换为
            Book.CategoryId IS NULL OR BookCategory.Name != 'a'；
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Linq.PropertyFinder._lastJoinRefResult">
            <summary>
            关联操作的最后一个引用属性。
            用于在访问 A.B.C.Name 时记录 C；在访问完成后，值回归到 null。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Linq.PropertyFinder._visitRefProperties">
            <summary>
            是否当前正在访问引用对象中的属性。
            主要用于错误提示，引用属性不能进行对比。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.PropertyFinder.VisitRefEntity(System.Linq.Expressions.Expression)">
            <summary>
            如果是 A.B.C.Name，则先读取 A.B.C
            </summary>
            <param name="exp"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.SubEntityQueryBuilder.Build(System.Linq.Expressions.Expression,Rafy.Domain.ORM.Query.IQuery,Rafy.Domain.ORM.Linq.PropertyFinder)">
            <summary>
            <![CDATA[
            将聚合子表达式解析为嵌入式子查询条件。
            例如：
            将表达式
            book.ChapterList.Cast<Chapter>().Any(c => c.Name == chapterName)
            转换为：
            f.Exists(f.Query(chapter,
                where: f.And(
                    f.Constraint(chapter.Column(Chapter.BookIdProperty), book.IdColumn),
                    f.Constraint(chapter.Column(Chapter.NameProperty), chapterName)
                )
            ))
            SQL：
            SELECT * FROM [Book] b
            WHERE EXISTS(
                SELECT * FROM [Chapter] c
                WHERE c.BookId = b.Id AND
                    c.Name = {0}
            )
            ]]>
            </summary>
            <param name="exp">需要解析的表达式</param>
            <param name="parentQuery"></param>
            <param name="propertyFinder">The property finder.</param>
        </member>
        <member name="T:Rafy.Domain.ORM.OrderDirection">
            <summary>
            排序方向。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.OrderDirection.Ascending">
            <summary>
            正序排列。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.OrderDirection.Descending">
            <summary>
            反序排列。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.ORMException">
            <summary>
            ORM 操作异常
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.IPersistanceColumnInfo">
            <summary>
            数据表列
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceColumnInfo.ColumnMeta">
            <summary>
            对应的列的元数据。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceColumnInfo.Table">
            <summary>
            对应的表
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceColumnInfo.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceColumnInfo.DataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceColumnInfo.IsBooleanType">
            <summary>
            返回本列是否为一个 Boolean 类型的属性（专为 Oracle 特制）
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceColumnInfo.IsStringType">
            <summary>
            返回本列是否为一个 String 类型的属性（专为 Oracle 特制）
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceColumnInfo.IsIdentity">
            <summary>
            是否为自增长主键列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceColumnInfo.IsNullable">
            <summary>
            是否可空列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceColumnInfo.IsPrimaryKey">
            <summary>
            是否主键列
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceColumnInfo.Property">
            <summary>
            对应的托管属性
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.IPersistanceTableInfo">
            <summary>
            某个实体类型对应的‘逻辑表’的元数据。
            这个表并不一定就是数据库中的表，而可能是 MongoDb 中的表、一个 XML 文档等。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceTableInfo.Class">
            <summary>
            对应的实体类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceTableInfo.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceTableInfo.PKColumn">
            <summary>
            主键列（每个表肯定有一个主键列）
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceTableInfo.Columns">
            <summary>
            所有的列
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.PersistanceTableInfo.Class">
            <summary>
            对应的实体类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.PersistanceTableInfo.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.PersistanceTableInfo.PKColumn">
            <summary>
            主键列（每个表肯定有一个主键列）
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.PersistanceTableInfo.Columns">
            <summary>
            所有的列
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.PersistanceTableInfoFactory.CreateTableInfo(Rafy.Domain.IRepositoryInternal)">
            <summary>
            为某个指定的仓库对象构造一个 DbTable
            </summary>
            <param name="repo"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.QueryExtensions">
            <summary>
            链式查询条件拼装接口。
            
            简单封装了 QueryFactory 类型。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryExtensions.AddConstraintIf(Rafy.Domain.ORM.Query.IQuery,Rafy.ManagedProperty.IManagedProperty,System.Object)">
            <summary>
            如果提供的值是不可空的，则为查询添加一个对应的约束条件，并以 And 与原条件进行连接。
            </summary>
            <param name="query">查询.</param>
            <param name="property">要约束的属性.</param>
            <param name="value">当 value 不可空时，才添加这个对比约束条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryExtensions.AddConstraintIf(Rafy.Domain.ORM.Query.IQuery,Rafy.ManagedProperty.IManagedProperty,Rafy.Domain.PropertyOperator,System.Object)">
            <summary>
            如果提供的值是不可空的，则为查询添加一个对应的约束条件，并以 And 与原条件进行连接。
            </summary>
            <param name="query">查询.</param>
            <param name="property">要约束的属性.</param>
            <param name="op">约束条件操作符.</param>
            <param name="value">当 value 不可空时，才添加这个对比约束条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryExtensions.AddConstraintIf(Rafy.Domain.ORM.Query.IQuery,Rafy.ManagedProperty.IManagedProperty,Rafy.Domain.PropertyOperator,System.Object,Rafy.Domain.ORM.Query.ITableSource)">
            <summary>
            如果提供的值是不可空的，则为查询添加一个对应的约束条件，并以 And 与原条件进行连接。
            </summary>
            <param name="query">查询.</param>
            <param name="property">要约束的属性.</param>
            <param name="op">约束条件操作符.</param>
            <param name="value">当 value 不可空时，才添加这个对比约束条件。</param>
            <param name="propertySource">指定该属性所属的实体数据源。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryExtensions.AddConstraint(Rafy.Domain.ORM.Query.IQuery,Rafy.ManagedProperty.IManagedProperty,System.Object)">
            <summary>
            为查询添加一个对应的约束条件，并以 And 与原条件进行连接。
            </summary>
            <param name="query">查询.</param>
            <param name="property">要约束的属性.</param>
            <param name="value">对比的值。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryExtensions.AddConstraint(Rafy.Domain.ORM.Query.IQuery,Rafy.ManagedProperty.IManagedProperty,Rafy.Domain.PropertyOperator,System.Object)">
            <summary>
            为查询添加一个对应的约束条件，并以 And 与原条件进行连接。
            </summary>
            <param name="query">查询.</param>
            <param name="property">要约束的属性.</param>
            <param name="op">约束条件操作符.</param>
            <param name="value">对比的值。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryExtensions.AddConstraint(Rafy.Domain.ORM.Query.IQuery,Rafy.ManagedProperty.IManagedProperty,Rafy.Domain.PropertyOperator,System.Object,Rafy.Domain.ORM.Query.ITableSource)">
            <summary>
            为查询添加一个对应的约束条件，并以 And 与原条件进行连接。
            </summary>
            <param name="query">查询.</param>
            <param name="property">要约束的属性.</param>
            <param name="op">约束条件操作符.</param>
            <param name="value">对比的值。</param>
            <param name="propertySource">指定该属性所属的实体数据源。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryExtensions.FindTable(Rafy.Domain.ORM.Query.ISource,System.Type,System.String)">
            <summary>
            从当前数据源中查找指定仓库对应的表。
            </summary>
            <param name="source">The source.</param>
            <param name="entityType">要查找这个仓库对应的表。
            如果这个参数传入 null，则表示查找主表（最左边的表）。</param>
            <param name="alias">
            要查找表的别名。
            如果仓库在本数据源中匹配多个实体源，那么将使用别名来进行精确匹配。
            如果仓库在本数据源中只匹配一个实体源，那么忽略本参数。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryExtensions.FindTable``1(Rafy.Domain.ORM.Query.ISource,System.String)">
            <summary>
            从当前数据源中查找指定仓库对应的表。
            </summary>
            <typeparam name="TRepository">要查找这个仓库对应的表。
            如果这个参数传入 null，则表示查找主表（最左边的表）。</typeparam>
            <param name="source">The source.</param>
            <param name="alias">
            要查找表的别名。
            如果仓库在本数据源中匹配多个实体源，那么将使用别名来进行精确匹配。
            如果仓库在本数据源中只匹配一个实体源，那么忽略本参数。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryExtensions.Add(System.Collections.Generic.ICollection{Rafy.Domain.ORM.Query.IOrderBy},Rafy.Domain.ORM.Query.IColumnNode,Rafy.Domain.ORM.OrderDirection)">
            <summary>
            构造一个排序节点并添加到当前集合中。。
            </summary>
            <param name="orderByList">实例.</param>
            <param name="property">使用这个属性进行排序。</param>
            <param name="direction">使用这个方向进行排序。</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IArray">
            <summary>
            节点的数组
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IArray.Items">
            <summary>
            集合中的所有项。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IBinaryConstraint">
            <summary>
            二位操作符连接的节点
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IBinaryConstraint.Left">
            <summary>
            二位运算的左操作结点。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IBinaryConstraint.Opeartor">
            <summary>
            二位运算类型。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IBinaryConstraint.Right">
            <summary>
            二位运算的右操作节点。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IColumnConstraint">
            <summary>
            列的约束条件节点
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IColumnConstraint.Column">
            <summary>
            要对比的列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IColumnConstraint.Operator">
            <summary>
            对比操作符
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IColumnConstraint.Value">
            <summary>
            要对比的值。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IColumnNode">
            <summary>
            一个列节点
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IColumnNode.Owner">
            <summary>
            本列属于指定的数据源
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IColumnNode.Property">
            <summary>
            本属性对应一个实体的托管属性
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IColumnNode.Alias">
            <summary>
            本属性在查询结果中使用的别名。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IColumnsComparison">
            <summary>
            两个列进行对比的约束条件节点
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IColumnsComparison.LeftColumn">
            <summary>
            第一个需要对比的列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IColumnsComparison.RightColumn">
            <summary>
            第二个需要对比的列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IColumnsComparison.Operator">
            <summary>
            对比条件。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IConstraint">
            <summary>
            表示一个约束条件对象。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IExistsConstraint">
            <summary>
            是否存在查询结果的约束条件节点
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IExistsConstraint.Query">
            <summary>
            要检查的查询。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IJoin">
            <summary>
            数据源与实体数据源连接后的结果节点
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IJoin.Left">
            <summary>
            左边需要连接的数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IJoin.JoinType">
            <summary>
            连接方式
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IJoin.Right">
            <summary>
            右边需要连接的数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IJoin.Condition">
            <summary>
            连接所使用的约束条件。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.JoinType">
            <summary>
            支持的连接方式。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.JoinType.Inner">
            <summary>
            内连接
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.JoinType.LeftOuter">
            <summary>
            左外连接
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.ILiteral">
            <summary>
            查询文本。
            查询文本可以表示一个条件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.ILiteral.FormattedSql">
            <summary>
            查询文本。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.ILiteral.Parameters">
            <summary>
            对应的参数值列表
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.Impl.TableQuery._allJoinTables">
            <summary>
            除基础表外，所有连接的表。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.Impl.TableQuery.FindOrCreateJoinTable(Rafy.Domain.ORM.Query.ITableSource,Rafy.ManagedProperty.IRefEntityProperty)">
            <summary>
            在查询对象中查找或者创建指定引用属性对应的连接表对象。
            </summary>
            <param name="propertyOwner">引用属性所在的实体对应的表。也是外键关系中外键列所在的表。</param>
            <param name="refProperty">指定的引用属性。</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.Impl.TableQuery.MainTable">
            <summary>
            本查询所对应的基础表。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.Impl.SqlTableSource">
            <summary>
            这个类型用于表示某一个 SqlTable 是由哪一个属性关联出来的。
            属性可以是一个引用属性，也可以是一个组合子属性。
            
            同一个属性关联出来的表，在整个 Select 中，应该是唯一的。这样可以防止为同一个引用属性生成多个重复的表。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.Impl.SqlTableSource.ForeignKeyTable">
            <summary>
            外键所在表。
            引用属性所在的实体对应的表。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.Impl.SqlTableSource.RefProperty">
            <summary>
            引用属性
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.Impl.SqlTableSource.PrimaryKeyTable">
            <summary>
            主键所在的表。
            被引用的表。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.Impl.TableSource._tableInfo">
            <summary>
            对应 ORM 中的运行时表。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.Impl.TableSource._columns">
            <summary>
            这个表中的所有可用的列。
            一次性生成这些表，方便查找。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.Impl.TableSource.LoadAllColumns">
            <summary>
            返回所有列对应的节点。
            本方法会生成所有还没有生成的列的节点。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.Impl.TableSourceFinder">
            <summary>
            从指定的数据源中查找指定仓库对应的实体数据源的查询器类型。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.Impl.TableSourceFinder._resultMatched">
            <summary>
            此字段表明结果是否已经被精确找到。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.QueryGenerationContext">
            <summary>
            生成 Sql 时的上下文对象。用于生成过程的上下文共享。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.QueryGenerationContext.TablesCount">
            <summary>
            当前已经使用过 <see cref="M:Rafy.Domain.ORM.Query.QueryGenerationContext.NextTableAlias"/> 生成的表的个数。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryGenerationContext.NextTableAlias">
            <summary>
            自动生成的 SQL 需要使用这个方法来统一生成表名。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.INamedSource">
            <summary>
            一个拥有名字、可被引用的数据源。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.INamedSource.GetName">
            <summary>
            获取需要引用本数据源时可用的名字。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.INotConstraint">
            <summary>
            对指定约束条件节点执行取反规则的约束条件节点
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.INotConstraint.Constraint">
            <summary>
            需要被取反的条件。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IOrderBy">
            <summary>
            排序节点
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IOrderBy.Column">
            <summary>
            使用这个属性进行排序。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IOrderBy.Direction">
            <summary>
            使用这个方向进行排序。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IQuery">
            <summary>
            表示一个可进行查询的节点。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IQuery.IsCounting">
            <summary>
            是否只查询数据的条数。
            
            如果这个属性为真，那么不再需要使用 Selection。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IQuery.IsDistinct">
            <summary>
            是否需要查询不同的结果。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IQuery.Selection">
            <summary>
            要查询的内容。
            如果本属性为空，表示要查询所有数据源的所有属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IQuery.From">
            <summary>
            要查询的数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IQuery.Where">
            <summary>
            查询的过滤条件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IQuery.OrderBy">
            <summary>
            查询的排序规则。
            可以指定多个排序条件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IQuery.MainTable">
            <summary>
            获取这个查询中的主实体数据源。
            
            在使用 QueryFactory.Query 方法构造 IQuery 时，需要传入 from 参数，
            如果传入的就是一个 IEntitySource，那么它就是本查询的主实体数据源；
            如果传入的是一个连接的结果，那么整个连接中最左端的实体数据源就是主数据源。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IQueryNode">
            <summary>
            表示查询语法树中的一个节点。
            Rafy.Domain.ORM.Query 中的接口，构成了面向 IManagedProperty 的查询语法树。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IQueryNode.NodeType">
            <summary>
            节点的类型。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.QueryNodeType">
            <summary>
            查询树节点的类型。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.Query">
            <summary>
            查询结果
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.SubQuery">
            <summary>
            可嵌套的子查询
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.Array">
            <summary>
            节点的数组
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.TableSource">
            <summary>
            查询的表数据源
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.SelectAll">
            <summary>
            表示查询数据源中的所有属性的节点
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.Join">
            <summary>
            数据源与实体数据源连接后的结果节点
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.OrderBy">
            <summary>
            排序节点
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.Column">
            <summary>
            列节点
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.ColumnConstraint">
            <summary>
            列的约束条件节点
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.ColumnsComparisonConstraint">
            <summary>
            两个列进行对比的约束条件节点
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.BinaryConstraint">
            <summary>
            二位操作符连接的节点
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.ExistsConstraint">
            <summary>
            是否存在查询结果的约束条件节点
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.NotConstraint">
            <summary>
            对指定约束条件节点执行取反规则的约束条件节点
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.Literal">
            <summary>
            查询文本
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.ISelectAll">
            <summary>
            表示查询数据源中的所有属性的节点、也可以表示查询某个指定数据源的所有属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.ISelectAll.Source">
            <summary>
            如果本属性为空，表示选择所有数据源的所有属性；否则表示选择指定数据源的所有属性。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.ISource">
            <summary>
            查询的数据源。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.ISource.FindTable(Rafy.Domain.IRepository,System.String)">
            <summary>
            从当前数据源中查找指定仓库对应的表。
            </summary>
            <param name="repo">要查找这个仓库对应的表。
            如果这个参数传入 null，则表示查找主表（最左边的表）。</param>
            <param name="alias">
            要查找表的别名。
            如果仓库在本数据源中匹配多个表，那么将使用别名来进行精确匹配。
            如果仓库在本数据源中只匹配一个表，那么忽略本参数。
            </param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.ISubQuery">
            <summary>
            子查询。
            对一个子查询分配别名后，可以作为一个新的源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.ISubQuery.Query">
            <summary>
            内部的查询对象。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.ISubQuery.Alias">
            <summary>
            必须对这个子查询指定别名。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.ISubQuery.Column(Rafy.Domain.ORM.Query.IColumnNode)">
            <summary>
            为这个子查询结果中的某个列来生成一个属于这个 ISubQueryRef 对象的结果列。
            </summary>
            <param name="rawColumn">子查询结果中的某个列。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.ISubQuery.Column(Rafy.Domain.ORM.Query.IColumnNode,System.String)">
            <summary>
            为这个子查询结果中的某个列来生成一个属于这个 ISubQueryRef 对象的结果列。
            同时，设置它的查询的别名。
            </summary>
            <param name="rawColumn">子查询结果中的某个列。</param>
            <param name="alias">别名。</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.ITableSource">
            <summary>
            一个表数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.ITableSource.EntityRepository">
            <summary>
            本表数据源来对应这个实体仓库。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.ITableSource.Alias">
            <summary>
            同一个实体仓库可以表示多个不同的数据源。这时，需要这些不同的数据源指定不同的别名。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.ITableSource.IdColumn">
            <summary>
            返回 Id 属性对应的列节点。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.ITableSource.Column(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            查找出某个列对应的节点。
            如果没有找到，则会抛出异常。
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.ITableSource.Column(Rafy.ManagedProperty.IManagedProperty,System.String)">
            <summary>
            在查找出某个列的同时，设置它的查询的别名。
            如果没有找到，则会抛出异常。
            </summary>
            <param name="property">The property.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.ITableSource.FindColumn(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            查找出某个属性对应的列节点。
            没有找到，不会抛出异常。
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.MainTableWhereAppender">
            <summary>
            可以为查询中的主表的 Where 条件添加一个指定条件的类。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.MainTableWhereAppender.AddConditionToLast">
            <summary>
            是把新的条件添加到 Where 条件的最后。
            true：添加到最后。
            false：作为第一个条件插入。
            默认：false。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.MainTableWhereAppender.Append(Rafy.Domain.ORM.Query.IQuery)">
            <summary>
            把条件添加到查询中的主表对应的 Where 中。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.MainTableWhereAppender.VisitQuery(Rafy.Domain.ORM.Query.IQuery)">
            <summary>
            为所有的 IQuery 对象都添加相应的多租户查询。
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.MainTableWhereAppender.GetCondition(Rafy.Domain.ORM.Query.ITableSource,Rafy.Domain.ORM.Query.IQuery)">
            <summary>
            获取指定的主表对应的条件。
            </summary>
            <param name="mainTable">The main table.</param>
            <param name="query">The node.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.QueryFactory">
            <summary>
            查询构造工厂
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Query(Rafy.Domain.IRepository)">
            <summary>
            为指定的仓库构造一个查询。
            </summary>
            <param name="mainTableRepository">主表对应的实体的仓库。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Query``1">
            <summary>
            为指定的仓库构造一个查询。
            </summary>
            <typeparam name="TEntity">主表对应的实体。</typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Query(Rafy.Domain.ORM.Query.ISource,Rafy.Domain.ORM.Query.IQueryNode,Rafy.Domain.ORM.Query.IConstraint,System.Collections.Generic.List{Rafy.Domain.ORM.Query.IOrderBy},System.Boolean,System.Boolean)">
            <summary>
            构造一个查询对象。
            </summary>
            <param name="from">要查询的数据源。</param>
            <param name="selection">
            要查询的内容。
            如果本属性为空，表示要查询所有数据源的所有属性。
            </param>
            <param name="where">查询的过滤条件。</param>
            <param name="orderBy">
            查询的排序规则。
            可以指定多个排序条件。
            </param>
            <param name="isCounting">
            是否只查询数据的条数。
            
            如果这个属性为真，那么不再需要使用 Selection。
            </param>
            <param name="isDistinct">是否需要查询不同的结果。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Array(Rafy.Domain.ORM.Query.IQueryNode[])">
            <summary>
            构造一个数组节点。
            </summary>
            <param name="nodes">所有数组中的项。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Array(System.Collections.Generic.IEnumerable{Rafy.Domain.ORM.Query.IQueryNode})">
            <summary>
            构造一个数组节点。
            </summary>
            <param name="nodes">所有数组中的项。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.AutoSelectionColumns(System.Collections.Generic.IEnumerable{Rafy.Domain.ORM.Query.IQueryNode})">
            <summary>
            构造一个数组节点。
            </summary>
            <param name="nodes">所有数组中的项。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.SelectAll(Rafy.Domain.ORM.Query.ITableSource)">
            <summary>
            构造一个 SelectAll 节点。
            </summary>
            <param name="table">如果本属性为空，表示选择所有数据源的所有属性；否则表示选择指定数据源的所有属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Table``1(System.String)">
            <summary>
            构造一个实体的数据源节点。
            </summary>
            <typeparam name="TEntity">本实体数据源来自于这个实体对应的仓库。</typeparam>
            <param name="alias">同一个实体仓库可以表示多个不同的数据源。这时，需要这些不同的数据源指定不同的别名。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Table(Rafy.Domain.IRepository,System.String)">
            <summary>
            构造一个实体的数据源节点。
            </summary>
            <param name="repository">本实体数据源来自于这个实体仓库。</param>
            <param name="alias">同一个实体仓库可以表示多个不同的数据源。这时，需要这些不同的数据源指定不同的别名。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">entityRepository</exception>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.FindOrCreateJoinTable(Rafy.Domain.ORM.Query.IQuery,Rafy.Domain.ORM.Query.ITableSource,Rafy.ManagedProperty.IRefEntityProperty)">
            <summary>
            在查询对象中查找或者创建指定引用属性对应的连接表对象。
            </summary>
            <param name="query">需要在这个查询对象中查找或创建连接表。</param>
            <param name="propertyOwner">引用属性对应外键所在的表。</param>
            <param name="refProperty">指定的引用属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Constraint(Rafy.Domain.ORM.Query.IColumnNode,System.Object)">
            <summary>
            构造一个属性与指定值"相等"的约束条件节点。
            </summary>
            <param name="column">要对比的属性。</param>
            <param name="value">要对比的值。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Constraint(Rafy.Domain.ORM.Query.IColumnNode,Rafy.Domain.PropertyOperator,System.Object)">
            <summary>
            构造一个属性的约束条件节点。
            </summary>
            <param name="column">要对比的属性。</param>
            <param name="op">对比操作符</param>
            <param name="value">要对比的值。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Constraint(Rafy.Domain.ORM.Query.IColumnNode,Rafy.Domain.ORM.Query.IColumnNode)">
            <summary>
            构造一个两个属性"相等"的约束条件节点。
            </summary>
            <param name="leftColumn">第一个需要对比的列。</param>
            <param name="rightColumn">第二个需要对比的列。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Constraint(Rafy.Domain.ORM.Query.IColumnNode,Rafy.Domain.PropertyOperator,Rafy.Domain.ORM.Query.IColumnNode)">
            <summary>
            构造一个两个属性进行对比的约束条件节点。
            </summary>
            <param name="leftColumn">第一个需要对比的列。</param>
            <param name="op">对比条件。</param>
            <param name="rightColumn">第二个需要对比的列。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            leftProperty
            or
            rightProperty
            </exception>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Exists(Rafy.Domain.ORM.Query.IQuery)">
            <summary>
            构造一个 是否存在查询结果的约束条件节点
            </summary>
            <param name="query">要检查的查询。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">query</exception>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Not(Rafy.Domain.ORM.Query.IConstraint)">
            <summary>
            构造一个对指定约束条件节点执行取反规则的约束条件节点。
            </summary>
            <param name="constraint">需要被取反的条件。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">constraint</exception>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Literal(System.String,System.Object[])">
            <summary>
            构造一个查询文本。
            </summary>
            <param name="formattedSql">查询文本。</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">text</exception>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.And(Rafy.Domain.ORM.Query.IConstraint[])">
            <summary>
            对指定的所有约束构造一个 And 连接串节点。
            </summary>
            <param name="constraints">需要使用 And 进行连接的所有约束。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.And(Rafy.Domain.ORM.Query.IConstraint,Rafy.Domain.ORM.Query.IConstraint)">
            <summary>
            构造一个 And 连接的节点。
            </summary>
            <param name="left">二位运算的左操作结点。</param>
            <param name="right">二位运算的右操作节点。</param>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Or(Rafy.Domain.ORM.Query.IConstraint[])">
            <summary>
            对指定的所有约束构造一个 Or 连接串节点。
            </summary>
            <param name="constraints">需要使用 Or 进行连接的所有约束。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Or(Rafy.Domain.ORM.Query.IConstraint,Rafy.Domain.ORM.Query.IConstraint)">
            <summary>
            构造一个 Or 连接的节点。
            </summary>
            <param name="left">二位运算的左操作结点。</param>
            <param name="right">二位运算的右操作节点。</param>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Binary(Rafy.Domain.ORM.Query.IConstraint,Rafy.Domain.BinaryOperator,Rafy.Domain.ORM.Query.IConstraint)">
            <summary>
            构造一个二位操作符连接的节点。
            </summary>
            <param name="left">二位运算的左操作结点。</param>
            <param name="op">二位运算类型。</param>
            <param name="right">二位运算的右操作节点。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            left
            or
            right
            </exception>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Join(Rafy.Domain.ORM.Query.ITableSource,Rafy.Domain.ORM.Query.ITableSource)">
            <summary>
            通过左实体数据源和右实体数据源，来找到它们之间的第一个的引用属性，用以构造一个连接。
            </summary>
            <param name="left">拥有引用关系的左数据源。</param>
            <param name="right">右实体数据源。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Join(Rafy.Domain.ORM.Query.ITableSource,Rafy.Domain.ORM.Query.ITableSource,Rafy.ManagedProperty.IRefProperty)">
            <summary>
            通过左数据源和右实体数据源，以及从左到右的引用属性，来构造一个连接。
            </summary>
            <param name="left">左实体数据源。</param>
            <param name="right">右实体数据源。</param>
            <param name="leftToRight">从左到右的引用属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Join(Rafy.Domain.ORM.Query.ISource,Rafy.Domain.ORM.Query.ITableSource,Rafy.ManagedProperty.IRefProperty)">
            <summary>
            通过左数据源和右实体数据源，以及从左到右的引用属性，来构造一个连接。
            </summary>
            <param name="left">左数据源。</param>
            <param name="right">右实体数据源。</param>
            <param name="leftToRight">从左到右的引用属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Join(Rafy.Domain.ORM.Query.ISource,Rafy.Domain.ORM.Query.ITableSource,Rafy.Domain.ORM.Query.IConstraint,Rafy.Domain.ORM.Query.JoinType)">
            <summary>
            构造一个数据源与实体数据源连接后的结果节点
            </summary>
            <param name="left">左边需要连接的数据源。</param>
            <param name="right">右边需要连接的数据源。</param>
            <param name="condition">连接所使用的约束条件。</param>
            <param name="joinType">连接方式</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            left
            or
            right
            or
            condition
            </exception>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.SubQuery(Rafy.Domain.ORM.Query.IQuery,System.String)">
            <summary>
            构造一个子查询。
            </summary>
            <param name="query">内部的查询对象。</param>
            <param name="alias">必须对这个子查询指定别名。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            query
            or
            alias
            </exception>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.OrderBy(Rafy.Domain.ORM.Query.IColumnNode,Rafy.Domain.ORM.OrderDirection)">
            <summary>
            构造一个排序节点。
            </summary>
            <param name="property">使用这个属性进行排序。</param>
            <param name="direction">使用这个方向进行排序。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">property</exception>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.QueryNodeTester">
            <summary>
            方便测试使用的测试器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryNodeTester.GenerateTestSql(Rafy.Domain.ORM.Query.IQueryNode)">
            <summary>
            生成 SqlServer 可用的测试 Sql 语句。
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.QueryNodeVisitor">
            <summary>
            如果需要遍历 IQuery 对象，可以使用本类来进行访问。
            
            Rafy.Domain.ORM.Query 中的所有接口，构成了新的面向 Entity、IManagedProperty 的查询语法树。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.AggregateDescriptor">
            <summary>
            聚合加载描述器。
            
            目前只包含一些聚合加载选项“AggregateSQLItem”
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.AggregateDescriptor.Items">
            <summary>
            所有的AggregateSQLItem
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.AggregateDescriptor.DirectlyQueryType">
            <summary>
            直接加载的实体类型
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateDescriptor.AddItem(Rafy.Domain.ORM.LoadOptionItem)">
            <summary>
            追加一个聚合加载选项
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Rafy.Domain.ORM.AggregateEntityLoader">
            <summary>
            聚合实体的加载器
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateEntityLoader.Query(Rafy.Domain.EntityList,System.String)">
            <summary>
            通过聚合SQL加载整个聚合对象列表。
            </summary>
            <param name="list">The list.</param>
            <param name="sql">The SQL.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateEntityLoader.ReadFromTable(Rafy.Domain.EntityList,Rafy.Domain.ORM.IDataTable,System.Collections.Generic.LinkedListNode{Rafy.Domain.ORM.LoadOptionItem})">
            <summary>
            根据 optionNode 中的描述信息，读取 table 中的数据组装为对象列表并返回。
            如果 optionNode 中指定要加载更多的子/引用对象，则会递归调用自己实现聚合加载。
            </summary>
            <param name="list">The list.</param>
            <param name="table">The table.</param>
            <param name="optionNode">The option node.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateEntityLoader.AggregateEntityLoaderHelper.ReadFromTable(Rafy.Domain.EntityList,Rafy.Domain.ORM.IDataTable,System.Action{Rafy.Domain.Entity,Rafy.Domain.ORM.IDataTable})">
            <summary>
            这个方法把table中的数据全部读取并转换为对象存入对象列表中。
            
            算法简介：
            由于子对象的数据都是存储在这个IGTable中，所以每一个TEntity可能对应多个行，
            每一行数据其实就是一个子对象的数据，而TEntity的属性值是重复的。
            所以这里找到每个TEntity对应的第一行和最后一行，把它封装为一个子表格，传给子对象集合进行加载。
            这样的设计是为了实现重用这个方法：集合加载IGTable中的数据。
            </summary>
            <param name="list">转换的对象存入这个列表中</param>
            <param name="table">表格数据，数据类型于以下形式：
            TableA  TableB  TableC  TableD...
            a1      b1      c1
            a1      b1      c2
            a2      b2      NULL
            a3      NULL    NULL
            ...</param>
            <param name="relationLoader">为每个TEntity调用此方法，从IGTable中加载它对应的孩子对象。
            加载完成后的对象会被加入到list中，所以此方法有可能返回一个全新的TEntity。</param>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateEntityLoader.AggregateEntityLoaderHelper.CreateEntity(System.Type,Rafy.Domain.ORM.IDataTable,System.Int32,System.Int32,System.Action{Rafy.Domain.Entity,Rafy.Domain.ORM.IDataTable})">
            <summary>
            把 table 从 startRow 到 endRow 之间的数据，都转换为一个 TEntity 并返回。
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="table">The table.</param>
            <param name="startRow">The start row.</param>
            <param name="endRow">The end row.</param>
            <param name="relationLoader">The relation loader.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.AggregateSQLGenerator">
            <summary>
            聚合SQL的生成器
            
            使用了以下约定：
            主键名是 "Id"
            属性名就是列名。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateSQLGenerator.#ctor(Rafy.Domain.ORM.AggregateDescriptor,System.String,System.String)">
            <summary>
            生成指定加载选项的聚合SQL。
            </summary>
            <param name="aggregate">
            聚合加载选项
            </param>
            <param name="whereCondition">
            简单的过滤条件，如：
            PBS.PBSTypeId = '...'
            
            如果传入Null，则默认生成以根对象为条件的格式化字符串。
            </param>
            <param name="joinFilterCondition">
            用于配合where条件进行过滤的join条件
            select 
            {0},
            {1}
            from PBS 
                join ProjectPBS pp on pbs.Id = pp.PBSId
                left outer join PBSBQItem i on pbs.Id = i.PBSId
            where pp.ProjectId = '{{0}}'
            order by pbs.Id, i.Id"
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateSQLGenerator.Generate">
            <summary>
            生成对应的SQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateSQLGenerator.GetTableAlias(System.String)">
            <summary>
            获取/生成表名的临时表名
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.AggregateSQL">
            <summary>
            聚合SQL的简单API。
            “Facade”
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateSQL.GenerateQuerySQL``1(System.Action{Rafy.Domain.ORM.PropertySelector{``0}},System.Object)">
            <summary>
            生成指定加载选项的聚合SQL。
            此方法使用父对象的Id作为查询条件。
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="loader">The loader.</param>
            <param name="parentId">The parent unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateSQL.GenerateQuerySQL``1(System.Action{Rafy.Domain.ORM.PropertySelector{``0}},System.String,System.String)">
            <summary>
            生成指定加载选项的聚合SQL。
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="loader">The loader.</param>
            <param name="whereCondition">简单的过滤条件，如：
            PBS.PBSTypeId = '...'</param>
            <param name="joinCondition">The join condition.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateSQL.BeginLoadOptions``1">
            <summary>
            开始为TEntity进行加载。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateSQL.GenerateQuerySQL(Rafy.Domain.ORM.LoadOptionSelector,System.Object)">
            <summary>
            生成指定加载选项的聚合SQL。
            
            此方法使用父对象的Id作为查询条件。
            </summary>
            <param name="loadOptions"></param>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateSQL.GenerateQuerySQL(Rafy.Domain.ORM.LoadOptionSelector,System.String,System.String)">
            <summary>
            生成指定加载选项的聚合SQL。
            </summary>
            <param name="loadOptions">The load options.</param>
            <param name="whereCondition">简单的过滤条件，如：
            PBS.PBSTypeId = '...'</param>
            <param name="joinCondition">The join condition.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateSQL.LoadEntities(Rafy.Domain.EntityList,System.String,Rafy.Domain.ORM.LoadOptionSelector)">
            <summary>
            通过聚合SQL加载整个聚合对象列表。
            </summary>
            <param name="list">The list.</param>
            <param name="sql">聚合SQL</param>
            <param name="loadOptions">聚合加载选项</param>
        </member>
        <member name="T:Rafy.Domain.ORM.ChildrenSelector">
            <summary>
            孩子选择器
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.ChildrenSelector.Continue``1">
            <summary>
            把孩子集合转换为实体对象，需要继续加载它的子对象
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.LoadOptionSelector">
            <summary>
            存储了加载的项
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.PropertySelector`1">
            <summary>
            属性选择器
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Rafy.Domain.ORM.PropertySelector`1.LoadFK``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            需要同时加载外键
            </summary>
            <typeparam name="TFKEntity"></typeparam>
            <param name="fkEntityExp">
            需要加载的外键实体属性表达式
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.PropertySelector`1.LoadChildren``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            需要同时加载孩子
            </summary>
            <typeparam name="TChildren"></typeparam>
            <param name="propExp">
            需要加载的孩子属性表达式
            </param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.IDataTable">
            <summary>
            一个存储表格数据的对象
            
            注意：
            以此为参数的方法只能在服务端执行
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IDataTable.Count">
            <summary>
            行数
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IDataTable.Item(System.Int32)">
            <summary>
            获取指定的行。
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.LoadOptionItem">
            <summary>
            生成聚合SQL的加载项中的某一项
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.LoadOptionItem.PropertyMeta">
            <summary>
            加载这个属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.LoadOptionItem.LoadType">
            <summary>
            指标这个属性是一般的实体
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.LoadOptionItem.OwnerType">
            <summary>
            拥有这个属性的实体类型。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.LoadOptionItem.PropertyEntityType">
            <summary>
            这个属性对应的实体类型
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.AggregateLoadType">
            <summary>
            属性的加载类型
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.AggregateLoadType.Children">
            <summary>
            加载子对象集合属性
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.AggregateLoadType.ReferenceEntity">
            <summary>
            加载外键引用实体。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.RawTable">
            <summary>
            封装了DataRowCollection的一般Table
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SQLColumnsGenerator">
            <summary>
            聚合SQL列名的生成器
            
            从原有的EntityRepository中直接抽取出来的类。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SQLColumnsGenerator.ReadDataDirectly(System.Data.DataRow)">
            <summary>
            数据行中的列名必须由 SQLColumnsGenerator 生成的列名对应。
            </summary>
            <param name="rowData"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.SubTable">
            <summary>
            这是个子表格。
            
            它表示的是某一表格中的一些指定的行。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SubTable.#ctor(Rafy.Domain.ORM.IDataTable,System.Int32,System.Int32)">
            <summary>
            构造一个指定table的子表。
            </summary>
            <param name="table"></param>
            <param name="startRow">这个表在table中的开始行。</param>
            <param name="endRow">这个表在table中的结束行。</param>
        </member>
        <member name="P:Rafy.Domain.ORM.SubTable.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="rowIndex">
            这里的索引其实是相对startRow的偏移量。
            </param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.ISqlSelectArgs">
            <summary>
            IDb Select 方法的参数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ISqlSelectArgs.EntityType">
            <summary>
            查询的实体类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ISqlSelectArgs.FormattedSql">
            <summary>
            查询 Sql
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ISqlSelectArgs.Parameters">
            <summary>
            查询 Sql 对应的参数列表。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.ITableQueryArgs">
            <summary>
            IDb QueryTable 方法的参数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ITableQueryArgs.EntityType">
            <summary>
            查询的主实体类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ITableQueryArgs.FormattedSql">
            <summary>
            查询 Sql
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ITableQueryArgs.Parameters">
            <summary>
            查询 Sql 对应的参数列表。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ITableQueryArgs.PagingInfo">
            <summary>
            分页信息
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ITableQueryArgs.ResultTable">
            <summary>
            结果数据表。
            返回的结果不能为 null。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlQueryArgs">
            <summary>
            使用 Sql 查询的参数。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlQueryArgs.#ctor">
            <summary>
            空构造函数，配合属性使用。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlQueryArgs.#ctor(Rafy.Data.FormattedSql)">
            <summary>
            通过一个 FormatSql 来构造。
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlQueryArgs.#ctor(System.String,System.Object[])">
            <summary>
            通过标准跨库 Sql 及参数值来构造。
            </summary>
            <param name="formattedSql"></param>
            <param name="parameters"></param>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlQueryArgs.FormattedSql">
            <summary>
            格式化参数的标准 SQL。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlQueryArgs.Parameters">
            <summary>
            FormatSql 对应的参数值。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.TableQueryArgs">
            <summary>
            数据表查询的参数
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.TableQueryArgs.#ctor">
            <summary>
            空构造函数，配合属性使用。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.TableQueryArgs.#ctor(Rafy.Domain.ORM.ConditionalSql)">
            <summary>
            通过一个 ConditionalSql 来构造。
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.TableQueryArgs.#ctor(Rafy.Data.FormattedSql)">
            <summary>
            通过一个 FormattedSql 来构造。
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.TableQueryArgs.#ctor(Rafy.Data.FormattedSql,Rafy.PagingInfo)">
            <summary>
            通过 FormattedSql 及分页信息来构造。
            </summary>
            <param name="sql">The SQL.</param>
            <param name="pagingInfo">The paging information.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.TableQueryArgs.#ctor(System.String,System.Object[])">
            <summary>
            通过标准跨库 Sql 及参数值来构造。
            </summary>
            <param name="formattedSql"></param>
            <param name="parameters"></param>
        </member>
        <member name="P:Rafy.Domain.ORM.TableQueryArgs.QueryType">
            <summary>
            获取数据的类型。
            返回 <see cref="F:Rafy.Domain.RepositoryQueryType.Table" />
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.TableQueryArgs.ResultTable">
            <summary>
            结果数据表
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.TableQueryArgs.FormattedSql">
            <summary>
            格式化参数的标准 SQL。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.TableQueryArgs.Parameters">
            <summary>
            FormatSql 对应的参数值。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.TableQueryArgs.PagingInfo">
            <summary>
            要对结果进行分页的分页信息。
            默认为 PagingInfo.Empty。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.RdbDataProvider">
            <summary>
            本类是为关系型数据库设计的数据提供器。
            IRepositoryDataProvider 则是更通用的接口。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbDataProvider.DataSaver">
            <summary>
            数据的保存器。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbDataProvider.DataQueryer">
            <summary>
            数据的查询器。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.RdbDataProvider._ormTable">
            <summary>
            这个字段用于存储运行时解析出来的 ORM 信息。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataProvider.CreateDbAccesser">
            <summary>
            创建数据库操作对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbDataProvider.DbSetting">
            <summary>
            数据库配置（每个库有一个唯一的配置名）
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbDataProvider.ConnectionStringSettingName">
            <summary>
            数据库配置名称（每个库有一个唯一的配置名）
            
            默认使用 ConnectionStringNames.RafyPlugins 中配置的数据库。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataProvider.GetEntityValue(System.Object,System.String)">
            <summary>
            子类重写此方法，来实现自己的 GetEntityValue 方法的数据层代码。
            </summary>
            <param name="entityId"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataProvider.OnTableQueryed(Rafy.Domain.ORM.TableQueryArgs)">
            <summary>
            QueryTable 方法完成后调用。
            
            子类可重写此方法来实现查询完成后的数据修整工具。
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataProvider.QueryData(Rafy.Data.FormattedSql,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            从持久层中查询数据。
            本方法只能由仓库中的方法来调用。本方法的返回值的类型将与仓库中方法的返回值保持一致。
            支持的返回值：EntityList、Entity、int、LiteDataTable。
            </summary>
            <param name="sql"></param>
            <param name="paging"></param>
            <param name="eagerLoad"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataProvider.QueryData(Rafy.Domain.ORM.SqlQueryArgs)">
            <summary>
            从持久层中查询数据。
            本方法只能由仓库中的方法来调用。本方法的返回值的类型将与仓库中方法的返回值保持一致。
            支持的返回值：EntityList、Entity、int、LiteDataTable。
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataProvider.QueryTable(Rafy.Data.FormattedSql,Rafy.PagingInfo)">
            <summary>
            使用 sql 语句来查询数据表。
            </summary>
            <param name="sql">Sql 语句.</param>
            <param name="paging">分页信息。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataProvider.QueryTable(Rafy.Domain.ORM.TableQueryArgs)">
            <summary>
            使用 sql 语句查询数据表。
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataProvider.Get(Rafy.Domain.IRepository)">
            <summary>
            强制转换指定仓库的数据提供程序为关系数据库的数据提供程。
            如果该仓库的 <see cref="P:Rafy.Domain.IRepository.DataProvider"/> 不是此类型的子类，则会抛出异常。
            </summary>
            <param name="repository"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.RdbDataQueryer">
            <summary>
            关系数据库的查询器。
            对接 ORM 查询(<see cref="T:Rafy.Domain.ORM.RdbTable"/> )的实现。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataQueryer.QueryDataCore(Rafy.Domain.EntityQueryArgs,Rafy.Domain.EntityList)">
            <summary>
            子类重写此方法，查询从持久层加载列表的具体实现。
            </summary>
            <param name="args">The arguments.</param>
            <param name="entityList">The entity list.</param>
            <exception cref="T:System.NotSupportedException">使用内存过滤器的同时，不支持提供分页参数。</exception>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataQueryer.QueryDataCore(Rafy.Domain.ORM.SqlQueryArgs,Rafy.Domain.EntityList)">
            <summary>
            子类重写此方法，查询从持久层加载列表的具体实现。
            </summary>
            <param name="args">The arguments.</param>
            <param name="entityList">The entity list.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataQueryer.QueryTableCore(Rafy.Domain.ORM.TableQueryArgs)">
            <summary>
            子类重写此方法，查询从持久层加载表格的具体实现。
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataQueryer.QueryTable(Rafy.Domain.ORM.Query.IQuery,Rafy.PagingInfo)">
            <summary>
            通过 IQuery 对象来查询数据表。
            </summary>
            <param name="query">查询条件。</param>
            <param name="paging">分页信息。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataQueryer.QueryData(Rafy.Data.FormattedSql,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            从持久层中查询数据。
            本方法只能由仓库中的方法来调用。本方法的返回值的类型将与仓库中方法的返回值保持一致。
            支持的返回值：EntityList、Entity、int、LiteDataTable。
            </summary>
            <param name="sql"></param>
            <param name="paging"></param>
            <param name="eagerLoad"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataQueryer.QueryData(Rafy.Domain.ORM.SqlQueryArgs)">
            <summary>
            从持久层中查询数据。
            本方法只能由仓库中的方法来调用。本方法的返回值的类型将与仓库中方法的返回值保持一致。
            支持的返回值：EntityList、Entity、int、LiteDataTable。
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataQueryer.QueryTable(Rafy.Data.FormattedSql,Rafy.PagingInfo)">
            <summary>
            使用 sql 语句来查询数据表。
            </summary>
            <param name="sql">Sql 语句.</param>
            <param name="paging">分页信息。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataQueryer.QueryTable(Rafy.Domain.ORM.TableQueryArgs)">
            <summary>
            使用 sql 语句查询数据表。
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataQueryer.OnTableQueryed(Rafy.Domain.ORM.TableQueryArgs)">
            <summary>
            QueryTable 方法完成后调用。
            
            子类可重写此方法来实现查询完成后的数据修整工具。
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Rafy.Domain.ORM.RdbDataSaver">
            <summary>
            关系数据库使用的数据保存器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataSaver.CreateRedundanciesUpdater">
            <summary>
            创建一个关系数据库的冗余属性更新器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataSaver.InsertToPersistence(Rafy.Domain.Entity)">
            <summary>
            插入这个实体到仓库中。
            
            子类重写此方法来实现非关系型数据库的插入逻辑。
            重写时，注意：
            在插入完成后，把为实体新生成的 Id 赋值到实体中。否则组合子将插入失败。
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataSaver.UpdateToPersistence(Rafy.Domain.Entity)">
            <summary>
            更新这个实体到仓库中。
            
            子类重写此方法来实现非关系型数据库的更新逻辑。
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataSaver.DeleteFromPersistence(Rafy.Domain.Entity)">
            <summary>
            从仓库中删除这个实体。
            
            子类重写此方法来实现非关系型数据库的删除逻辑。
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataSaver.DeleteRefCore(Rafy.Domain.Entity,Rafy.ManagedProperty.IRefProperty)">
            <summary>
            实现删除关联数据的逻辑。
            </summary>
            <param name="entity"></param>
            <param name="refProperty"></param>
        </member>
        <member name="T:Rafy.Domain.ORM.RdbRedundanciesUpdater.RefPropertyTable">
            <summary>
            某个引用属性与其所在类对应的表元数据
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.AppContextDependentConnectionManager">
            <summary>
            它把自己存储在上下文中，
            以提供一个简单的方式来在一个数据上下文环境中重用单个连接。
            
            注意：
            暂时不再使用，原因：
            多个线程使用同一个连接，可以解决大部分不需要分布式事务的情况，但是连接变为共享资源，混用会出错（如线程A在读取数据时，线程B想写数据则会报错）。
            多个线程使用多个连接，则会会造成分布式事务的情况。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.AppContextDependentConnectionManager.GetManager(Rafy.Data.DbSetting)">
            <summary>
            根据数据库配置获取一个连接管理器
            </summary>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.ORM.AppContextDependentConnectionManager.Connection">
            <summary>
            Dispose object, dereferencing or
            disposing the connection it is
            managing.
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.AppContextDependentConnectionManager.DbSetting">
            <summary>
            对应的数据库配置信息
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.AppContextDependentConnectionManager.Dispose">
            <summary>
            Dispose 时减少引用数
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.DbAccesserFactory">
            <summary>
            使用此工厂来创建一个被管理连接的数据库访问器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.DbAccesserFactory.Create(System.String)">
            <summary>
            根据配置文件，构造一个数据库访问器。
            </summary>
            <param name="dbSettingName">数据库配置的名称。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbAccesserFactory.Create(Rafy.Data.DbSetting)">
            <summary>
            根据配置文件，构造一个数据库访问器。
            </summary>
            <param name="dbSetting">数据库配置。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbAccesserFactory.Create(Rafy.Domain.IRepository)">
            <summary>
            根据配置文件，构造一个数据库访问器。
            </summary>
            <param name="repository">实体仓库所代表的数据库配置。</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.IConnectionManager">
            <summary>
            一个连接的管理容器
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IConnectionManager.Connection">
            <summary>
            对应的连接对象。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IConnectionManager.DbSetting">
            <summary>
            对应的数据库配置信息
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.ManagedConnectionDbAccesser">
            <summary>
            使用 ConnectionManager 管理链接的数据库访问器。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.TransactionDependentConnectionManager">
            <summary>
            数据库连接的管理只是依赖当前线程中的事务。
            如果代码没有在事务中时，则每次都构建新的连接，不再进行连接对象的共享。
            依赖于 <see cref="T:Rafy.Data.LocalTransactionBlock"/> 的连接管理器。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbColumn.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbColumn.Info">
            <summary>
            列的信息
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbColumn.ReadParameterValue(Rafy.Domain.Entity)">
            <summary>
            读取实体中本列对应的属性的值，该值将被写入到数据库中对应的列。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbColumn.LoadValue(Rafy.Domain.Entity,System.Object)">
            <summary>
            把数据库中列的值写入到实体对应的属性中。
            </summary>
            <param name="entity"></param>
            <param name="val"></param>
        </member>
        <member name="T:Rafy.Domain.ORM.RdbTable">
            <summary>
            数据表的 ORM 运行时对象
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbTable.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbTable.Info">
            <summary>
            表的信息
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbTable.PKColumn">
            <summary>
            主键列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbTable.IdentityColumn">
            <summary>
            自增列。
            （某些表可以会没有自增列。）
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbTable.Columns">
            <summary>
            本表中可用的所有字段信息。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.Insert(Rafy.Data.IDbAccesser,Rafy.Domain.Entity)">
            <summary>
            执行 sql 插入一个实体到数据库中。
            基类的默认实现中，只是简单地实现了 sql 语句的生成和执行。
            </summary>
            <param name="dba"></param>
            <param name="item"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.GetPagingLocation(Rafy.PagingInfo)">
            <summary>
            判断指定的分页操作，支持在哪个层面进行分页。
            </summary>
            <param name="pagingInfo">The paging information.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.QueryList(Rafy.Data.IDbAccesser,Rafy.Domain.IEntitySelectArgs)">
            <summary>
            使用 IQuery 条件进行查询。
            分页默认实现为使用内存进行分页。
            </summary>
            <param name="dba">The dba.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.QueryDataReader(Rafy.Data.IDbAccesser,Rafy.Domain.IEntitySelectArgs,Rafy.Domain.ORM.RdbTable.ReadDataType,Rafy.Data.FormattedSql)">
            <summary>
            执行 Sql 并读取 DataReader 中的值到实体。
            </summary>
            <param name="dba">The dba.</param>
            <param name="args">The arguments.</param>
            <param name="readType">Type of the read.</param>
            <param name="sql">The SQL.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.AutoSelectionForLOB(Rafy.Domain.ORM.Query.IQuery)">
            <summary>
            如果没有选择项，而且有 LOB 字段时，Selection 需要被自动生成，则按生成的属性的顺序来生成列的获取。
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.QueryList(Rafy.Data.IDbAccesser,Rafy.Domain.ORM.ISqlSelectArgs)">
            <summary>
            使用 Sql 进行查询。
            分页默认实现为使用内存进行分页。
            </summary>
            <param name="dba">The dba.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.QueryTable(Rafy.Data.IDbAccesser,Rafy.Domain.ORM.ITableQueryArgs)">
            <summary>
            使用 Sql 进行查询。
            分页默认实现为使用内存进行分页。
            </summary>
            <param name="dba">The dba.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.FillDataIntoList(System.Data.IDataReader,Rafy.Domain.ORM.RdbTable.ReadDataType,System.Collections.Generic.IList{Rafy.Domain.Entity},System.Boolean,Rafy.PagingInfo,System.Boolean)">
            <summary>
            在内存中对 IDataReader 进行读取。
            注意！！！
            此方法中会释放 Reader。外层不能再用 Using。
            </summary>
            <param name="reader">表格类数据。</param>
            <param name="readType">是否索引还是名称去读取 IDataReader。</param>
            <param name="list">需要把读取的实体，加入到这个列表中。</param>
            <param name="fetchingFirst">是否只读取一条数据即返回。</param>
            <param name="pagingInfo">如果不是只取一行数据，则这个参数表示列表内存分页的信息。</param>
            <param name="markTreeFullLoaded">如果某次查询结果是一棵完整的子树，那么必须设置此参数为 true ，才可以把整个树标记为完整加载。</param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.FillTreeIntoList(System.Data.IDataReader,Rafy.Domain.ORM.RdbTable.ReadDataType,System.Collections.Generic.IList{Rafy.Domain.Entity},System.Boolean,Rafy.PagingInfo)">
            <summary>
            在内存中对 IDataReader 进行读取，并以树的方式进行节点的加载。
            </summary>
            <param name="reader">表格类数据。</param>
            <param name="readType">是否索引还是名称去读取 IDataReader。</param>
            <param name="list">需要把读取的实体中的第一级的节点，加入到这个列表中。</param>
            <param name="markTreeFullLoaded">如果某次查询结果是一棵完整的子树，那么必须设置此参数为 true ，才可以把整个树标记为完整加载。</param>
            <param name="pagingInfo">对根节点进行分页的信息。</param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.CreateByIndex(System.Data.IDataReader)">
            <summary>
            把某一行翻译成一个实体对象
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.TryReplaceByContext(Rafy.Domain.IEntity)">
            <summary>
            如果目前使用了 EntityContext，则应该使用内存中已经存在的对象。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.NotifyLoaded(Rafy.Domain.IEntity)">
            <summary>
            如果目前使用了 EntityContext，则应该把加载好的对象都存储在内存中。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.Translate(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            把属性名转换为列名
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.Translate(System.String)">
            <summary>
            把属性名转换为列名
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.AppendQuote(System.IO.TextWriter,System.String)">
            <summary>
            引用某个标识符后，向 sql 输出。
            </summary>
            <param name="sql">The SQL.</param>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.AppendPrepare(System.IO.TextWriter,System.String)">
            <summary>
            每个标记符被 SQL 语句使用前都需要使用此语句进行准备。
            </summary>
            <param name="sql"></param>
            <param name="identifier"></param>
        </member>
        <member name="T:Rafy.Domain.ORM.PagingLocation">
            <summary>
            分页的位置
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.PagingLocation.Memory">
            <summary>
            内存分页
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.PagingLocation.Database">
            <summary>
            数据库分页
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTableFactory.CreateORMTable(Rafy.Domain.IRepositoryInternal)">
            <summary>
            为某个指定的仓库对象构造一个 DbTable
            </summary>
            <param name="repo"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.RdbTableFinder">
            <summary>
            DbTable 查找器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTableFinder.TableFor(System.Type)">
            <summary>
            获取该实体对应的 ORM 运行时对象。
            
            如果该实体没有对应的实体元数据或者该实体没有被配置为映射数据库，
            则本方法则无法创建对应的 ORM 运行时，此时会返回 null。
            </summary>
            <param name="entityType">实体类型</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.SingleConnectionTransactionScope">
            <summary>
            单连接事务块。
            
            可用于声明一个事务块，在这个事务块中，同一个线程执行的代码，如果是访问同一个数据库，则只会用到同一个数据库连接。
            这样也就不会造成为分布式事务。（分布式事务在一些数据库中并不支持，例如 SQLCE。）
            
            连接与事务的关系，见：<see cref="T:Rafy.Domain.ORM.TransactionDependentConnectionManager"/>。
            事务与线程及上下文的关系，见：<see cref="T:Rafy.Data.LocalTransactionBlock"/>。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SingleConnectionTransactionScope.#ctor(Rafy.Data.DbSetting)">
            <summary>
            构造一个事务块
            </summary>
            <param name="dbSetting">整个数据库的配置名</param>
        </member>
        <member name="M:Rafy.Domain.ORM.SingleConnectionTransactionScope.#ctor(Rafy.Data.DbSetting,System.Data.IsolationLevel)">
            <summary>
            构造一个事务块
            </summary>
            <param name="dbSetting">整个数据库的配置名</param>
            <param name="level">事务的孤立级别</param>
        </member>
        <member name="T:Rafy.Domain.ORM.FirstTableFinder">
            <summary>
            在 Sql 树中找到第一个表。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Oracle.OracleSqlGenerator.ModifyToPagingTree(Rafy.Domain.ORM.SqlTree.SqlSelect,Rafy.PagingInfo)">
            <summary>
            使用 ROWNUM 来进行分页。
            </summary>
            <param name="raw">The raw.</param>
            <param name="pagingInfo">The paging information.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">pagingInfo</exception>
            <exception cref="T:System.InvalidProgramException">必须排序后才能使用分页功能。</exception>
        </member>
        <member name="F:Rafy.Domain.ORM.Oracle.OracleTable.MAX_ITEMS_IN_INCLAUSE">
            <summary>
            ORACLE 中 IN 语句的最大参数个数是 1000 个。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Oracle.OracleTable.TryBatchQuery(Rafy.Data.IDbAccesser,Rafy.Domain.IEntitySelectArgs)">
            <summary>
            只有一些特定的查询，可以进行分批查询。
            </summary>
            <param name="dba">The dba.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlCe.SqlCeTable.GetPagingLocation(Rafy.PagingInfo)">
            <summary>
            在 sqlce 下，不支持 rowNumber 方案，但是支持 not in 方案。
            鉴于实现 not in 方案比较耗时，所以暂时决定使用 IDataReader 分页完成。
            
            not in 分页，参见以下 Sql：
            select top 10 [AuditItem].* from 
            [AuditItem] where 
            [AuditItem].id not in
            (
                select top 100 [AuditItem].id from [AuditItem] order by LogTime desc
            )
            order by LogTime desc
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlGenerator">
            <summary>
            为 SqlNode 语法树生成相应 Sql 的生成器。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlGenerator.Indent">
            <summary>
            当前需要的缩进量。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlGenerator.AutoQuota">
            <summary>
            是否自动添加标识符的括号
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlGenerator.Sql">
            <summary>
            生成完毕后的 Sql 语句及参数。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.SqlGenerator.MaxItemsInInClause">
            <summary>
            In 语句中可以承受的最大的个数。
            如果超出这个个数，则会抛出
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlGenerator.ModifyToPagingTree(Rafy.Domain.ORM.SqlTree.SqlSelect,Rafy.PagingInfo)">
            <summary>
            为指定的原始查询生成指定分页效果的新查询。
            </summary>
            <param name="raw">原始查询</param>
            <param name="pagingInfo">分页信息。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">pagingInfo</exception>
            <exception cref="T:System.InvalidProgramException">必须排序后才能使用分页功能。</exception>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlGenerator.Generate(Rafy.Domain.ORM.SqlTree.SqlSelect,Rafy.PagingInfo)">
            <summary>
            访问 sql 语法树中的每一个结点，并生成相应的 Sql 语句。
            </summary>
            <param name="tree">The tree.</param>
            <param name="pagingInfo">The paging information.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlGenerator.Generate(Rafy.Domain.ORM.SqlTree.SqlNode)">
            <summary>
            访问 sql 语法树中的每一个结点，并生成相应的 Sql 语句。
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlGenerator.GenerateSelection(Rafy.Domain.ORM.SqlTree.SqlSelect)">
            <summary>
            生成 Selection 中的语句
            </summary>
            <param name="sqlSelect"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlGenerator.QuoteAppend(System.String)">
            <summary>
            把标识符添加到 Sql 语句中。
            子类可重写此方法来为每一个标识符添加引用符。
            SqlServer 生成 [identifier]
            Oracle 生成 "IDENTIFIER"
            </summary>
            <param name="identifier"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlGenerator.PrepareIdentifier(System.String)">
            <summary>
            准备所有标识符。
            Oracle 可重写此方法，使得标识符都是大写的。
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.TooManyItemsInInClauseException">
            <summary>
            表示在 In 语句中使用了过多的参数。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.TooManyItemsInInClauseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.ORM.TooManyItemsInInClauseException"/> class.
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.TooManyItemsInInClauseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.ORM.TooManyItemsInInClauseException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlOraTable">
            <summary>
            SqlServer 、 Oracle 两个数据库都支持的一些功能，封装在这个类中。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlOraTable.GetPagingLocation(Rafy.PagingInfo)">
            <summary>
            SqlServer 、 Oracle 都支持在数据库层面进行分页。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlOraTable.QueryTotalCountIf(Rafy.Data.IDbAccesser,Rafy.PagingInfo,Rafy.Domain.ORM.SqlOraTable.PagingSqlParts,System.Object[])">
            <summary>
            如果需要统计，则生成统计语句进行查询。
            </summary>
            <param name="dba"></param>
            <param name="pagingInfo"></param>
            <param name="parts"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.ORM.SqlOraTable.PagingSqlParts.RawSql">
            <summary>
            原始 SQL
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.SqlOraTable.PagingSqlParts.Select">
            <summary>
            Select 语句
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.SqlOraTable.PagingSqlParts.FromWhere">
            <summary>
            From 以及 Where 语句
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.SqlOraTable.PagingSqlParts.OrderBy">
            <summary>
            OrderBy 语句
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.SqlOraTable.PagingSqlParts.PagingSql">
            <summary>
            转换后的分页 SQL
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlServerSqlGenerator.ModifyToPagingTree(Rafy.Domain.ORM.SqlTree.SqlSelect,Rafy.PagingInfo)">
            <summary>
            为指定的原始查询生成指定分页效果的新查询。
            </summary>
            <param name="raw">原始查询</param>
            <param name="pagingInfo">分页信息。</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlArray">
            <summary>
            表示一组树结点合成的一个集合结点。
            这些结点之间，需要用逗号分隔开。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlArray.Items">
            <summary>
            所有项。
            其中每一个项必须是一个 SqlNode。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlBinaryConstraint">
            <summary>
            表示作用于两个操作结点的二位运算结点。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlBinaryConstraint.Left">
            <summary>
            二位运算的左操作节点。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlBinaryConstraint.Opeartor">
            <summary>
            二位运算类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlBinaryConstraint.Right">
            <summary>
            二位运算的右操作节点。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlBinaryConstraintType">
            <summary>
            二位运算类型
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlColumn">
            <summary>
            表示某个表、或者查询结果中的某一列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlColumn.Table">
            <summary>
            只能是<see cref="T:Rafy.Domain.ORM.SqlTree.SqlTable"/>、<see cref="T:Rafy.Domain.ORM.SqlTree.SqlSubSelect"/>
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlColumn.ColumnName">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlColumn.Alias">
            <summary>
            别名。
            列的别名只用在 Select 语句之后。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlColumnConstraint">
            <summary>
            表示某个列与某个值进行对比的约束条件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlColumnConstraint.Column">
            <summary>
            要对比的列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlColumnConstraint.Operator">
            <summary>
            对比操作符
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlColumnConstraint.Value">
            <summary>
            要对比的值。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlColumnConstraintOperator">
            <summary>
            对比操作符
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlColumnsComparisonConstraint">
            <summary>
            表示两个列进行对比的约束条件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlColumnsComparisonConstraint.LeftColumn">
            <summary>
            第一个需要对比的列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlColumnsComparisonConstraint.RightColumn">
            <summary>
            第二个需要对比的列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlColumnsComparisonConstraint.Operator">
            <summary>
            对比条件。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlConstraint">
            <summary>
            一个可用于 Where 条件的 Sql 约束
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlExistsConstraint">
            <summary>
            表示对指定的查询进行是否存在查询行的逻辑的判断。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlExistsConstraint.Select">
            <summary>
            要检查的查询。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlJoin">
            <summary>
            一个数据源与一个具体表的连接结果，同时它也是一个新的数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlJoin.Left">
            <summary>
            左边需要连接的数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlJoin.JoinType">
            <summary>
            连接方式
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlJoin.Right">
            <summary>
            右边需要连接的数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlJoin.Condition">
            <summary>
            连接所使用的约束条件。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlJoinType">
            <summary>
            支持的连接方式。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlLiteral">
            <summary>
            表示一个文本
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlLiteral.FormattedSql">
            <summary>
            Sql 文本。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlLiteral.Parameters">
            <summary>
            对应的参数值列表
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlNamedSource">
            <summary>
            一个拥有名字、可被引用的数据源。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlTree.SqlNamedSource.GetName">
            <summary>
            获取需要引用本数据源时可用的名字。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlNode">
            <summary>
            表示 Sql 语法树中的一个节点。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlNode.NodeType">
            <summary>
            返回当前树节点的类型。
            </summary>
            <value>
            The type of the node.
            </value>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlNodeType">
            <summary>
            语法树节点类型。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlNodeList">
            <summary>
            表示一组结点对象
            
            SqlNodeList 需要从 SqlConstraint 上继承，否则将不可用于 Where 语句。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlNodeList.Items">
            <summary>
            所有节点。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlNodeVisitor">
            <summary>
            SqlNode 语法树的访问器
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlNotConstraint">
            <summary>
            表示一个取反规则的条件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlNotConstraint.Constraint">
            <summary>
            需要被取反的条件。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlOrderBy">
            <summary>
            排序结点。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlOrderBy.Column">
            <summary>
            使用这个列进行排序。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlOrderBy.Direction">
            <summary>
            使用这个方向进行排序。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlOrderByList">
            <summary>
            表示一组排序条件。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlSelect">
            <summary>
            表示一个 Sql 查询语句。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSelect.IsCounting">
            <summary>
            是否只查询数据的条数。
            
            如果这个属性为真，那么不再需要使用 Selection。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSelect.IsDistinct">
            <summary>
            是否需要查询不同的结果。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSelect.Selection">
            <summary>
            要查询的内容。
            如果本属性为空，表示要查询所有列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSelect.From">
            <summary>
            要查询的数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSelect.Where">
            <summary>
            查询的过滤条件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSelect.OrderBy">
            <summary>
            查询的排序规则。
            可以指定多个排序条件，其中每一项都必须是一个 SqlOrderBy 对象。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlSelectAll">
            <summary>
            用于表示选择所有列、或者表示选择某个表的所有列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSelectAll.Table">
            <summary>
            如果本属性为空，表示选择所有数据源的所有列；否则表示选择指定表的所有列。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlSource">
            <summary>
            可查询的数据源，可用于 From 语句之后 。
            目前有：SqlTable、SqlJoin、SqlSubSelect。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlSubSelect">
            <summary>
            子查询。
            对一个子查询分配别名后，可以作为一个新的源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSubSelect.Select">
            <summary>
            子查询
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSubSelect.Alias">
            <summary>
            别名，必须填写
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlTable">
            <summary>
            表示一个具体的表。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlTable.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlTable.Alias">
            <summary>
            查询中使用的别名
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.TreeIndexHelper">
            <summary>
            目前本类只支持 Rdb。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.TreeIndexHelper.ResetTreeIndex(Rafy.Domain.EntityRepository)">
            <summary>
            重新设置整个表的所有 TreeIndex。
            注意，此方法只保证生成的 TreeIndex 有正确的父子关系，同时顺序有可能被打乱。
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:Rafy.Domain.EntityQueryArgsBase">
            <summary>
            所有实体查询的参数类型的基类。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityQueryArgsBase.QueryType">
            <summary>
            当前查询数据的类型。
            实体查询时，不会对应 <see cref="F:Rafy.Domain.RepositoryQueryType.Table" /> 类型。
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntityQueryArgsBase.MemoryList">
            <summary>
            如果是内存加载，则使用这个列表。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityQueryArgsBase.EntityList">
            <summary>
            加载的列表对象
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityQueryArgsBase.Filter">
            <summary>
            对查询出来的对象进行内存级别的过滤器，默认为 null。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityQueryArgsBase.MarkTreeFullLoaded">
            <summary>
            如果某次查询结果是一棵完整的子树，那么必须设置此属性为 true ，才可以把整个树标记为完整加载。
            否则，所有节点的子节点集合 TreeChildren 处在未加载完全的状态（IsLoaded = false）。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityQueryArgsBase.PagingInfo">
            <summary>
            要对结果进行分页的分页信息。
            默认为 PagingInfo.Empty。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityQueryArgsBase.EagerLoad(Rafy.Domain.IProperty,System.Type)">
            <summary>
            贪婪加载某个属性
            </summary>
            <param name="property">需要贪婪加载的托管属性。可以是一个引用属性，也可以是一个组合子属性。</param>
            <param name="propertyOwner">这个属性的拥有者类型。</param>
        </member>
        <member name="M:Rafy.Domain.EntityQueryArgsBase.EagerLoad(Rafy.ManagedProperty.ConcreteProperty)">
            <summary>
            贪婪加载某个属性
            </summary>
            <param name="property">需要贪婪加载的托管属性。可以是一个引用属性，也可以是一个组合子属性。</param>
        </member>
        <member name="T:Rafy.Domain.EntityQueryArgs">
            <summary>
            使用 IQuery 进行查询的参数。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityQueryArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.EntityQueryArgs"/> class.
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityQueryArgs.#ctor(Rafy.Domain.ORM.Query.IQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.EntityQueryArgs"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="P:Rafy.Domain.EntityQueryArgs.Query">
            <summary>
            对应的查询条件定义。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IEntitySelectArgs">
            <summary>
            IDb Select 方法的参数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEntitySelectArgs.Query">
            <summary>
            对应的查询条件定义。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IQueryArgs">
            <summary>
            所有查询的参数
            </summary>
        </member>
        <member name="P:Rafy.Domain.IQueryArgs.QueryType">
            <summary>
            本次查询的类型。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ISelectArgs">
            <summary>
            IDb 的查询参数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ISelectArgs.List">
            <summary>
            用于存储结果的实体列表
            </summary>
        </member>
        <member name="P:Rafy.Domain.ISelectArgs.FetchingFirst">
            <summary>
            是否只支持一个实体。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ISelectArgs.PagingInfo">
            <summary>
            分页信息
            </summary>
        </member>
        <member name="P:Rafy.Domain.ISelectArgs.MarkTreeFullLoaded">
            <summary>
            如果某次查询结果是一棵完整的子树，那么必须设置此属性为 true ，才可以把整个树标记为完整加载。
            否则，所有节点的子节点集合 TreeChildren 处在未加载完全的状态（IsLoaded = false）。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ISelectArgs.EagerLoad(Rafy.Domain.IProperty,System.Type)">
            <summary>
            贪婪加载某个属性
            </summary>
            <param name="property">需要贪婪加载的托管属性。可以是一个引用属性，也可以是一个组合子属性。</param>
            <param name="propertyOwner">这个属性的拥有者类型。</param>
        </member>
        <member name="T:Rafy.Domain.QueryArgs">
            <summary>
            所有查询的参数
            </summary>
        </member>
        <member name="P:Rafy.Domain.QueryArgs.QueryType">
            <summary>
            本次查询的类型。
            </summary>
        </member>
        <member name="T:Rafy.Domain.RepositoryInterceptor">
            <summary>
            仓库类型、仓库扩展类型的查询方法的拦截器。
            使得在调用仓库的查询方法时，不是直接执行方法代码，而是调用数据门户去间接调用此方法。
            </summary>
        </member>
        <member name="T:Rafy.Domain.RepositoryQueryAttribute">
            <summary>
            标记仓库的某个方法为公开的数据查询方法。（该方法必须是虚方法）
            <para>框架内部会拦截该方法，实现以下目的：</para>
            <para>1.判断是需要在本地、还是服务端来执行此方法。如果需要在服务端执行，则框架会转而调用 WCF 数据门户。（如果需要分布式调用，所有参数需要支持可序列化。）</para>
            <para>2.根据方法的返回值，来确定底层查询时应该返回的类型（EntityList、Entity、int、LiteDataTable）。</para>
            <para>3.查询完成后，调整查询结果的类型，与需要的类型一致。</para>
            </summary>
        </member>
        <member name="T:Rafy.Domain.RepositoryFacade">
            <summary>
            仓库门面 API（快捷方式：<see cref="T:Rafy.Domain.RF"/> 类型）
            
            封装了一些静态代理方法的实体分为代理类。
            主要是方便上层的调用。
            </summary>
        </member>
        <member name="M:Rafy.Domain.RepositoryFacade.Find(System.Type)">
            <summary>
            用于查找指定实体的仓库。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryFacade.Find``1">
            <summary>
            用于查找指定实体的仓库。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryFacade.ResolveInstance``1">
            <summary>
            用于查找指定类型的仓库。
            </summary>
            <typeparam name="TRepository"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryFacade.Concrete``1">
            <summary>
            用于查找指定类型的仓库。
            </summary>
            <typeparam name="TRepository"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryFacade.Save(Rafy.Domain.EntityList)">
            <summary>
            保存某个实体列表。
            </summary>
            <param name="entityList">The entity list.</param>
        </member>
        <member name="M:Rafy.Domain.RepositoryFacade.Save(Rafy.Domain.Entity)">
            <summary>
            保存某个实体。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryFacade.Save(Rafy.Domain.Entity,Rafy.Domain.EntitySaveType)">
            <summary>
            保存某个实体。
            </summary>
            <param name="entity"></param>
            <param name="saveWay"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryFacade.TransactionScope(System.String)">
            <summary>
            通过数据库配置名构造一个 单连接事务块。
            </summary>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryFacade.TransactionScope(Rafy.Domain.EntityRepository)">
            <summary>
            通过数据库配置名的代理：实体仓库，构造一个 单连接事务块。
            </summary>
            <param name="dbDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryFacade.TransactionScope(Rafy.Data.DbSetting)">
            <summary>
            通过数据库配置名的代理：实体仓库，构造一个 单连接事务块。
            </summary>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryFacade.TransactionScope(Rafy.Data.DbSetting,System.Data.IsolationLevel)">
            <summary>
            通过数据库配置名的代理：实体仓库，构造一个 单连接事务块。
            </summary>
            <param name="dbSetting">整个数据库的配置名</param>
            <param name="level">事务的孤立级别</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryFacade.EnterEntityContext">
            <summary>
            申明一个实体上下文操作代码块。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryFacade.DisableEntityContext">
            <summary>
            申明一个禁用了实体上下文操作代码块。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.RF">
            <summary>
            仓库门面 API
            <see cref="T:Rafy.Domain.RepositoryFacade"/> 的缩写（快捷写法）
            </summary>
        </member>
        <member name="T:Rafy.Domain.EntitySaveType">
            <summary>
            实体保存时的类型
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntitySaveType.Normal">
            <summary>
            一般保存
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntitySaveType.DiffSave">
            <summary>
            差异保存
            </summary>
        </member>
        <member name="T:Rafy.Domain.SubmitArgs">
            <summary>
            提交参数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.SubmitArgs.Entity">
            <summary>
            被保存的领域实体
            </summary>
        </member>
        <member name="P:Rafy.Domain.SubmitArgs.Action">
            <summary>
            保存的操作
            </summary>
        </member>
        <member name="P:Rafy.Domain.SubmitArgs.DataProvider">
            <summary>
            对应的数据提供器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.SubmitArgs.UpdateCurrent">
            <summary>
            标记本次操作，不但要保存所有的子实体，也要保存当前对象。
            场景：
            子类重写 Submit 方法后，在当前实体数据不脏、只更新组合子实体（ChildrenOnly）的模式下，
            如果修改了当前实体的状态，则需要使用这个方法把提交操作提升为保存整个组合对象（Update），这样当前实体才会被保存。
            
            注意，由于 SubmitArgs 是一个结构体，所以调用此方法只会更改当前对象的值。需要把这个改了值的对象传入基类的方法，才能真正地更新当前的实体对象。
            </summary>
            <exception cref="T:System.InvalidOperationException">只有在 ChildrenOnly 模式下，才可以调用此方法。</exception>
        </member>
        <member name="F:Rafy.Domain.SubmitArgs.WithTreeChildren">
            <summary>
            是否需要同时处理当前树的子节点。
            本属性只用于判断当前类型的树节点，不用于指定组合子中出现的其它树。
            </summary>
        </member>
        <member name="T:Rafy.Domain.SubmitAction">
            <summary>
            提交数据的操作类型
            </summary>
        </member>
        <member name="F:Rafy.Domain.SubmitAction.Update">
            <summary>
            更新实体
            将会执行 Update、SubmitChildren、SubmitTreeChildren。
            </summary>
        </member>
        <member name="F:Rafy.Domain.SubmitAction.Insert">
            <summary>
            插入实体
            将会执行 Insert、SubmitChildren、SubmitTreeChildren。
            </summary>
        </member>
        <member name="F:Rafy.Domain.SubmitAction.Delete">
            <summary>
            删除实体
            将会执行 DeleteChildren、DeleteTreeChildren、Delete
            </summary>
        </member>
        <member name="F:Rafy.Domain.SubmitAction.ChildrenOnly">
            <summary>
            当前对象未变更，只提交其中的子对象。
            将会执行 SubmitChildren、SubmitTreeChildren。
            </summary>
        </member>
        <member name="T:Rafy.Domain.AutoCollectHelper">
            <summary>
            组合实体自动进行汇总数据的帮助类
            </summary>
        </member>
        <member name="M:Rafy.Domain.AutoCollectHelper.AutoCollectAsChanged(Rafy.Domain.Entity,Rafy.ManagedProperty.ManagedPropertyChangedEventArgs,System.Boolean,Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            当实体的某个属性变更时，自动向父级实体的指定属性汇总。
            </summary>
            <param name="entity">实体对象</param>
            <param name="changedPropertyArgs">实体属性变更时的参数</param>
            <param name="toTreeParent">
            如果实体是树型对象，那么这个参数表明是否需要把值汇总到树中的父对象的同一个属性值上。
            </param>
            <param name="toParentProperty">
            指示需要把值汇总到组合父对象的哪一个属性上。这个属性只支持直接父对象，不支持多级父对象。
            </param>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:Rafy.Domain.CloneOptions">
            <summary>
            克隆方法选项
            </summary>
        </member>
        <member name="M:Rafy.Domain.CloneOptions.ReadSingleEntity">
            <summary>
            读取单个实体的数据
            CloneActions.NormalProperties | CloneActions.IdProperty | CloneActions.RefEntities | CloneActions.ParentRefEntity
            </summary>
        </member>
        <member name="M:Rafy.Domain.CloneOptions.ReadDbRow">
            <summary>
            读取数据行的数据
            CloneActions.NormalProperties | CloneActions.IdProperty
            </summary>
        </member>
        <member name="M:Rafy.Domain.CloneOptions.NewSingleEntity">
            <summary>
            拷贝新的实体的数据（不含 Id）。
            CloneActions.NormalProperties | CloneActions.RefEntities | CloneActions.ParentRefEntity
            </summary>
        </member>
        <member name="M:Rafy.Domain.CloneOptions.NewComposition">
            <summary>
            组合克隆。
            会克隆其所有的孩子对象。
            CloneActions.NormalProperties | CloneActions.RefEntities | CloneActions.ChildrenRecur
            </summary>
        </member>
        <member name="P:Rafy.Domain.CloneOptions.Actions">
            <summary>
            所有要进行的复制操作。
            </summary>
        </member>
        <member name="P:Rafy.Domain.CloneOptions.Method">
            <summary>
            值在复制时使用的方法。
            默认值：<see cref="F:Rafy.Domain.CloneValueMethod.SetProperty"/>。
            
            <note type="note">使用设置属性的方式来拷贝值，这样可以使得冗余属性知道自己变更了。</note>
            </summary>
        </member>
        <member name="P:Rafy.Domain.CloneOptions.Mappings">
            <summary>
            如果设置了这个属性，则会在复制过程中记住所有的映射序列。
            </summary>
        </member>
        <member name="M:Rafy.Domain.CloneOptions.NotifyCloned(Rafy.Domain.Entity,Rafy.Domain.Entity)">
            <summary>
            某一个 Entity 拷贝完成后，会调用此方法。
            </summary>
            <param name="oldEntity"></param>
            <param name="newEntity"></param>
        </member>
        <member name="M:Rafy.Domain.CloneOptions.IgnoreProperty(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            调用此方法，通知框架在复制属性值时，过滤掉一些无用的属性。
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Rafy.Domain.CloneOptions.RetrieveIgnoreListOnce">
            <summary>
            获取一次性的 IgoreList
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.CloneActions">
            <summary>
            克隆操作的参数。
            </summary>
        </member>
        <member name="F:Rafy.Domain.CloneActions.IdProperty">
            <summary>
            拷贝Id
            </summary>
        </member>
        <member name="F:Rafy.Domain.CloneActions.NormalProperties">
            <summary>
            拷贝一般的属性
            </summary>
        </member>
        <member name="F:Rafy.Domain.CloneActions.RefEntities">
            <summary>
            拷贝引用的对象
            </summary>
        </member>
        <member name="F:Rafy.Domain.CloneActions.ParentRefEntity">
            <summary>
            拷贝引用的父对象
            </summary>
        </member>
        <member name="F:Rafy.Domain.CloneActions.ChildrenRecur">
            <summary>
            使用相同的拷贝方案，递归拷贝子对象及树的子节点。
            </summary>
        </member>
        <member name="F:Rafy.Domain.CloneActions.GrabChildren">
            <summary>
            抢夺对方的组合子。
            组合子集合属性中的所有孩子对象的父指针也已经被更改为新实体。
            </summary>
        </member>
        <member name="T:Rafy.Domain.CloneValueMethod">
            <summary>
            值在复制时的方法
            </summary>
        </member>
        <member name="F:Rafy.Domain.CloneValueMethod.LoadProperty">
            <summary>
            直接把值加载到对象中。
            </summary>
        </member>
        <member name="F:Rafy.Domain.CloneValueMethod.SetProperty">
            <summary>
            使用较慢的设置值方法来拷贝值，但是发生对应的属性变更事件。
            </summary>
        </member>
        <member name="T:Rafy.Domain.CloneMappings">
            <summary>
            此类职责：记录所有被复制的对象和原有对象间的映射关系
            </summary>
        </member>
        <member name="T:Rafy.Domain.Entity">
            <summary>
            <para>对象实体                                                                                                                                                          </para>
            <para>继承此类，可以获得以下功能：                                                                                                                                        </para>
            <para>* 自动管理托管属性，可以通过属性 FindRepository().GetAvailableIndicators() 获取到所有的托管属性。                                                                     </para>
            <para>* 默认实现了所有数据库访问的方法：CDUQ。                                                                                                                             </para>
            <para>* 提供了延迟加载子对象集合的方法。                                                                                                                                   </para>
            <para>* 提供了创建延迟外键对象的方法。                                                                                                                                    </para>
            <para>* 提供实体验证规则框架。                                                                                                                                            </para>
            <para>* 提供树型实体支持。                                                                                                                                               </para>
            <para>* 支持聚合对象的路由事件。                                                                                                                                          </para>
            <para>                                                                                                                                                                  </para>
            <para>                                                                                                                                                                  </para>
            <para>                                                                                                                                                                  </para>
            <para>树型实体功能说明：                                                                                                                                                 </para>
            <para>使用时，可调用 Meta.SupportTree 方法，来使得实体支持树型操作（即自关联）：                                                                                             </para>
            <para>* 数据表：                                                                                                                                                        </para>
            <para>    * 数据库的表中添加 TreePId、TreeIndex 两个字段。                                                                                                                </para>
            <para>    * TreePId 生成可空的自关联外键。                                                                                                                                </para>
            <para>    * TreeIndex 则是一个用于查询、排序的全功能字符串编码属性。（可通过 TreeIndexOption 来调整 TreeIndex 的生成规则。）                                                  </para>
            <para>* 树结构：                                                                                                                                                        </para>
            <para>    * 使用 EntityList 来装载整棵树或部分树。                                                                                                                        </para>
            <para>    * 树可以只有一个根节点，也可以有多个根节点。当是多个根节点时，也同样表示一棵树，所以它们的编码会是顺序的。                                                             </para>
            <para>    * 列表中只能存储同级节点。                                                                                                                                      </para>
            <para>    * 每一个节点的 TreeChildren 列表存储自己的直接子节点。                                                                                                           </para>
            <para>    * 可以表达部分树的概念：即 EntityList 中的根节点并不一定完全、TreeChildren 集合也可以后期再懒加载。                                                                 </para>
            <para>* 自动维护 TreeIndex。                                                                                                                                             </para>
            <para>    * 设计限制：一个树型实体类型对应的数据表中，只能存储一棵树。                                                                                                       </para>
            <para>    * 由于一个表中，只会存储一棵树，所以 TreeIndex 在一个表中将会是唯一的。                                                                                            </para>
            <para>        （开发人员在使用时，应该要小心，不要造成重复 TreeIndex 的根节点。子节点则使用 ResetTreeIndex 方法自动生成。）                                                    </para>
            <para>    * 当在 EntityList、TreeChildren 集合中添加/删除节点时，系统会自动变化其后所有节点的 TreeIndex。                                                                    </para>
            <para>    * 调用 Entity.TreeChildren.ResetTreeIndex 可主动生成节点下子树的所有 TreeIndex。                                                                                 </para>
            <para>* 节点间的关系属性：                                                                                                                                               </para>
            <para>    * Entity.TreeChildren、Entity.TreeParent、Entity.TreePId、EntityList 将自动同步。                                                                              </para>
            <para>    * 一般情况下，都是从顶至下地遍历节点，即使用 TreeChildren 集合。较少的场景是先获取子节点，再由下至上遍历节点。                                                        </para>
            <para>        （在由下至上的场景下，如果使用 Child.Parent.Children 这样的语法，会导致 Child 并不在 Children 集合中。其本质与一对多关联的懒加载外键所遇的问题是一样的。）          </para>
            <para>* 查询：                                                                                                                                                          </para>
            <para>    * 所有树的查询，都将使用 TreeIndex 进行排序！其它排序规则无效。在使用 Sql 查询时，需要注意！                                                                        </para>
            <para>    * 如果查询出的树是加载完整的，数据层需要手动调用 MarkTreeFullLoaded 方法对结果列表进行标记。                                                                        </para>
            <para>    * 仓库自带的查询：                                                                                                                                             </para>
            <para>        * GetAll。                                                                                                                                                </para>
            <para>        * GetTreeRoots。                                                                                                                                          </para>
            <para>        * GetByTreePId。                                                                                                                                          </para>
            <para>        * GetByTreeParentIndex。                                                                                                                                  </para>
            <para>        * LoadAllTreeParents、GetAllTreeParents。                                                                                                                 </para>
            </summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Rafy.Domain.Entity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.Entity"/> class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.Entity"/> class.
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.#cctor">
            <summary>
            Initializes the <see cref="T:Rafy.Domain.Entity"/> class.
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.New(System.Type)">
            <summary>
            通过实体类型反射构造一个新的实体。
            
            此方法功能与构造函数一致，主要用于不能显式调用的场景下。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.Entity._repository">
            <summary>
            实体对应的仓库。
            
            这个字段非常重要，这是因为实体很多逻辑的元数据信息，都存储在仓库中。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.FindRepository">
            <summary>
            尝试找到这个实体列表对应的仓库类。
            
            没有标记 RootEntity/ChildEntity 的类型是没有仓库类的，例如所有的条件类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.GetRepository">
            <summary>
            获取该实体列表对应的仓库类，如果没有找到，则抛出异常。
            </summary>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.Entity.IdProperty">
            <summary>
            实体的标识属性。
            该属性由实体仓库内部自动编号。
            
            关于数据库映射：
            * Id 属性对应的列必须是自增长列。
            * 可以通过配置把 Id 属性对应的列更名。
            * Id 属性的默认数据库映射元数据是映射为主键的。这样在生成数据库时，引用本实体类型的其它的实体类型的引用属性都会添加相应的外键。
                如果本属性被配置为不是主键时，则不会在数据库层面生成外键引用，但是实体间的引用关系依然存在。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.OnIdChanged(Rafy.ManagedProperty.ManagedPropertyChangedEventArgs)">
            <summary>
            Id 变更后事件。
            </summary>
            <param name="e">The <see cref="T:Rafy.ManagedProperty.ManagedPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="P:Rafy.Domain.Entity.Id">
            <summary>
            实体的标识属性。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.FindPropertiesContainer">
            <summary>
            获取实体所对应的属性容器。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.Entity.IdProvider">
            <summary>
            实体标识属性的算法程序。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.Clone(Rafy.Domain.Entity)">
            <summary>
            使用 <see cref="M:Rafy.Domain.CloneOptions.NewSingleEntity"/> 来复制目标对象。
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.Clone(Rafy.Domain.Entity,Rafy.Domain.CloneOptions)">
            <summary>
            使用指定的复制条件来复制源对象的值。
            </summary>
            <param name="source"></param>
            <param name="options"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.CloneCore(Rafy.Domain.Entity,Rafy.Domain.CloneOptions)">
            <summary>
            复制目标对象的所有字段。
            子类重写此方法额外做以下几件事：
            1. 如果有自定义字段，请在此方法中进行值拷贝。
            2. 如果有延迟加载的外键引用对象 ILazyEntityRef，请调用它的 Clone 方法进行拷贝。
            3. 如果使用了快速字段 FastField 来进行属性的缓存，请在基类完成 Clone 后，调用本类的 ResetFastField 方法来清空缓存。
            </summary>
            <param name="source">The source.</param>
            <param name="options">The options.</param>
            <exception cref="T:System.ArgumentNullException">source
            or
            options</exception>
        </member>
        <member name="M:Rafy.Domain.Entity.CopyProperty(Rafy.Domain.Entity,Rafy.ManagedProperty.IManagedProperty,Rafy.Domain.CloneOptions)">
            <summary>
            复制指定的属性值。
            </summary>
            <param name="source">从这个对象拷贝</param>
            <param name="property">拷贝这个属性</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Rafy.Domain.Entity.Rafy#Domain#IEntity#GetChildProperty``1">
            <summary>
            根据孩子类型，直接获取孩子列表。
            </summary>
            <typeparam name="TChild"></typeparam>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.Entity._flags">
            <summary>
            所有需要序列化的 bool 值，都可以存储在这里。减少传输数据量。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.PersistenceStatus">
            <summary>
            获取或设置实体当前的持久化状态。
            保存实体时，会根据这个状态来进行对应的增、删、改的操作。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.IsDeleted">
            <summary>
            判断本对象是否已经被标记为删除。
            
            标记为删除的对象，在仓库中保存时，会被永久删除。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.IsNew">
            <summary>
            判断本对象是否是刚构造出来的。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.Rafy#Domain#IEntityWithStatus#MarkModifiedIfUnchanged">
            <summary>
            标记当前对象为需要保存的状态。
            
            只有实体的状态是 Unchanged 状态时（其它状态已经算是 Dirty 了），调用本方法才会把实体的状态改为 Modified。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.Rafy#Domain#IEntityWithStatus#RevertDeletedStatus">
            <summary>
            清空实体的 IsDeleted 状态，使其还原到删除之前的状态。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.Rafy#Domain#IEntityWithStatus#RevertNewStatus">
            <summary>
            清空实体的 IsNew 状态，使其还原到之前的状态。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.IsDirty">
            <summary>
            如果当前组合对象树中任意部分变更了，则返回 true。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.Rafy#Domain#IDirtyAware#MarkSaved">
            <summary>
            递归将整个组合对象树都标记为未变更状态。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.LoadProperty(Rafy.ManagedProperty.IManagedProperty,System.Object)">
            <summary>
            LoadProperty 以最快的方式直接加载值，不发生 PropertyChanged 事件。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.OnPropertyChanged(Rafy.ManagedProperty.ManagedPropertyChangedEventArgs)">
            <summary>
            这个事件不可以屏敝，否则状态会出问题。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.SyncIdToChildren">
            <summary>
            同步当前实体的 Id 到组合子实体及子节点中。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.GetLoadedChildren">
            <summary>
            获取所有已经加载的组合子的字段集合。
            
            返回的字段的值必须是 IEntityOrList 类型。
            子有可能是集合、也有可能只是一个单一的实体。只会是这两种情况。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.Entity.Rafy#Domain#IEntity#ParentList">
            <summary>
            实体所在的当前列表对象。
            
            虽然一个实体可以存在于多个集合中，但是，它只保留一个主要集合的引用，见：<see cref="F:Rafy.Domain.EntityList.ResetItemParent"/>。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.Rafy#Domain#IDomainComponent#Parent">
            <summary>
            Provide access to the parent reference for use
            in child object code.
            </summary>
            <remarks>
            This value will be Nothing for root objects.
            </remarks>
        </member>
        <member name="M:Rafy.Domain.Entity.OnDeserialized(Rafy.Serialization.DesirializedArgs)">
            <summary>
            反序列化事件。
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rafy.Domain.Entity.NotifyLoaded(Rafy.Domain.IRepository)">
            <summary>
            从 EntityRepository 中加载完成，并从中返回时，都会执行此方法。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.UpdateRedundancies">
            <summary>
            是否在更新本行数据时，同时更新所有依赖它的冗余属性。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.NotifyIfInRedundancyPath(Rafy.Domain.IProperty)">
            <summary>
            在属性变更时，如果该属性在某个冗余路径中，则应该使用冗余更新策略。
            </summary>
            <param name="property">变更的属性.</param>
        </member>
        <member name="M:Rafy.Domain.Entity.GetRedundancyValue(Rafy.Domain.RedundantPath,Rafy.ManagedProperty.IRefIdProperty)">
            <summary>
            根据冗余路径从当前对象开始搜索，获取真实的属性值。
            </summary>
            <param name="path"></param>
            <param name="from">
            本对象在路径中拥有的引用属性。
            在 D->C->B->A.Name 场景中，当前对象（this）可能是 C，那么 from 就是 C.BRefProperty.
            如果没有指定此属性，则表示从第一个开始。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.GetLazyList``1(Rafy.Domain.ListProperty{``0})">
            <summary>
            延迟加载子对象的集合。
            </summary>
            <typeparam name="TCollection">子对象集合类型</typeparam>
            <param name="propertyInfo">当前属性的元信息</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.GetLazyList(Rafy.ManagedProperty.IListProperty)">
            <summary>
            延迟加载子对象的集合。
            </summary>
            <param name="listProperty">The list property.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.LoadLazyList(Rafy.ManagedProperty.IListProperty)">
            <summary>
            执行懒加载操作。
            </summary>
            <param name="listProperty">The list property.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.GetRefNullableId(Rafy.ManagedProperty.IRefIdProperty)">
            <summary>
            获取指定引用 id 属性对应的 id 的可空类型返回值。
            </summary>
            <param name="property"></param>
            <returns>本方法为兼容值类型而使用。不论 Id 是值类型、还是引用类型，都可能返回 null。</returns>
        </member>
        <member name="M:Rafy.Domain.Entity.SetRefNullableId(Rafy.ManagedProperty.IRefIdProperty,System.Object,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置指定引用 id 属性对应的 id 的可空类型值。
            </summary>
            <param name="property"></param>
            <param name="value">本方法为兼容值类型而使用。不论外键是否为值类型，都可以传入 null。</param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.GetRefId(Rafy.ManagedProperty.IRefIdProperty)">
            <summary>
            获取指定引用 id 属性对应的 id 的返回值。
            </summary>
            <param name="property"></param>
            <returns>如果 Id 是值类型，则这个函数的返回值不会是 null；如果是引用类型，则可能返回 null。</returns>
        </member>
        <member name="M:Rafy.Domain.Entity.SetRefId(Rafy.ManagedProperty.IRefIdProperty,System.Object,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置指定引用 id 属性对应的 id 的值。
            
            在引用 id 变化时，会同步相应的引用实体属性。
            </summary>
            <param name="property"></param>
            <param name="value">外键如果是值类型，则不能传入 null。</param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.GetRefEntity``1(Rafy.Domain.RefEntityProperty{``0})">
            <summary>
            以懒加载的方式获取某个引用实体的值。
            </summary>
            <typeparam name="TRefEntity"></typeparam>
            <param name="entityProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.GetRefEntity(Rafy.ManagedProperty.IRefEntityProperty)">
            <summary>
            以懒加载的方式获取某个引用实体的值。
            </summary>
            <param name="entityProperty"></param>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.Entity._settingEntity">
            <summary>
            这个值用于判断是否正在处于设置Entity的状态中。
            
            当在外界设置Entity属性时，如果获取Entity属性，不需要引起延迟加载。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.SetRefEntity(Rafy.ManagedProperty.IRefEntityProperty,Rafy.Domain.Entity,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置指定引用实体属性的值。
            在实体属性变化时，会同步相应的引用 Id 属性。
            </summary>
            <param name="entityProperty">The entity property.</param>
            <param name="value">The value.</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.SetProperty(Rafy.ManagedProperty.IManagedProperty,System.Object,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置指定属性的值。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.GetLOBProperty``1(Rafy.Domain.LOBProperty{``0})">
            <summary>
            获取指定的 LOB 属性的值。（懒加载）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.GetLOBProperty(Rafy.ManagedProperty.ILOBProperty)">
            <summary>
            获取指定的 LOB 属性的值。（懒加载）
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.SetLOBProperty(Rafy.ManagedProperty.ILOBProperty,System.Object,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置 LOB 属性的值。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="source"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.SetParentEntity(Rafy.Domain.Entity)">
            <summary>
            设置聚合关系中父对象的引用。
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.Rafy#Domain#IEntity#FindParentEntity">
            <summary>
            获取组合关系中父对象的引用。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.DebuggerDisplay">
            <summary>
            调试器显示文本。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.OnRoutedEvent(System.Object,Rafy.Domain.EntityRoutedEventArgs)">
            <summary>
            发生某个路由事件
            子类重写此方法以实现监听路由事件。
            
            注意：子类在重写时，调用基类方法就表示继续路由。一般在最后才调用基类的方法。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.RaiseRoutedEvent(Rafy.Domain.EntityRoutedEvent,System.Object)">
            <summary>
            触发某个路由事件
            </summary>
            <param name="indicator"></param>
            <param name="args"></param>
        </member>
        <member name="P:Rafy.Domain.Entity.IsTreeLeafSure">
            <summary>
            表明当前的实体是否已经确定是一个叶子节点。
            注意，当本属性返回 false 时，并不表示本节点下还有节点。
            （这是因为如果还没有对本节点的子节点进行查询时，是不能确定它是否还有子节点的。）
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.SupportTree">
            <summary>
            是否为树型实体。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Entity.TreeIndexProperty">
            <summary>
            树型实体的树型索引编码属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.TreeIndex">
            <summary>
            树型实体的树型索引编码
            这个属性是实现树型实体的关键所在！
            </summary>
        </member>
        <member name="F:Rafy.Domain.Entity.TreePIdProperty">
            <summary>
            树型父实体的 Id 属性
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.TreePId">
            <summary>
            树型父实体的 Id 属性
            
            默认使用存储于数据库中的字段，子类可以重写此属性以实现自定义的父子结构逻辑。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.OnTreePIdChanged(Rafy.ManagedProperty.ManagedPropertyChangedEventArgs)">
            <summary>
            子类重写此方法实现 TreePId 属性变更逻辑。
            </summary>
            <param name="e">The <see cref="T:Rafy.ManagedProperty.ManagedPropertyChangedEventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Rafy.Domain.Entity.RemoveFromParentList(System.Boolean)">
            <summary>
            如果一个根节点变为非根节点，那么需要调用此方法，使它从 List 中移除。
            </summary>
            <param name="addIntoDeletedList">是否在删除完成后，添加到删除列表中。</param>
        </member>
        <member name="P:Rafy.Domain.Entity.Rafy#Domain#ITreeEntity#IsTreeParentLoaded">
            <summary>
            返回当前的 TreeParent 的值是否已经加载。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.TreeParentData">
            <summary>
            封装 _treeParent 与 TreePId 之间的关系
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.TreeParent">
            <summary>
            树中的父对象。
            <remarks>
            操作此属性，同样引起 TreeChildren、EntityList 的变化。
            同时，注意此属性并不是懒加载属性。
            </remarks>
            </summary>
            <value>
            The tree parent.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:Rafy.Domain.Entity.Rafy#Domain#ITreeEntity#TreeLevel">
            <summary>
            此节点在树中的级别。
            根节点是第一级。
            此级别是完全根据 <see cref="P:Rafy.Domain.Entity.TreeIndex"/> 计算出来的。
            
            如果此实体不是一个树实体，则返回 -1。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.TreeChildren">
            <summary>
            树中的子对象集合。
            <remarks>
            操作此属性，同样引起 TreeParent、EntityList 的变化。
            同时，注意此属性并不是懒加载属性。
            </remarks>
            </summary>
        </member>
        <member name="T:Rafy.Domain.Entity.EntityTreeChildren">
            <summary>
            树型实体的子实体列表类。
            </summary>
            防止重入、设置父子关系
        </member>
        <member name="F:Rafy.Domain.Entity.EntityTreeChildren._autoIndexEnabled">
            <summary>
            是否自动在集体变更时计算 TreeIndex，默认：null。表示从最上层组件中取值。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Entity.EntityTreeChildren._loaded">
            <summary>
            返回当前集合中的节点是否已经加载完成。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Entity.EntityTreeChildren._nodes">
            <summary>
            当前已经加载的所有子节点。
            如果实体是叶子节点，那么它没有任何的子节点，这个列表将保持 null。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Entity.EntityTreeChildren._deleted">
            <summary>
            需要被删除的节点。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.#ctor">
            <summary>
            序列化使用。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.NotifyDeserialized(Rafy.Domain.Entity)">
            <summary>
            在二进制反序列化后调用此方法，来重建父子节点之间的关系。
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.LoadAdd(Rafy.Domain.Entity)">
            <summary>
            从数据库中查询时，使用此方法来为集合快速添加元素。
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.MarkLoaded">
            <summary>
            当从数据库中添加完毕时，使用此方法标记集合中的节点已经加载完全。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.EntityTreeChildren.IsDirty">
            <summary>
            当前的模型，是否是脏的。
            一个脏的对象，表示它的状态还没有保存起来。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.MarkSaved">
            <summary>
            标记为已经保存。IsDirty 为 false。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.EntityTreeChildren.IsLoaded">
            <summary>
            返回当前集合中的节点元素是否已经加载完成。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.EntityTreeChildren.IsFullLoaded">
            <summary>
            返回当前树是否已经加载完全。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.Load">
            <summary>
            加载当前集合中的节点元素。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.LoadAllNodes">
            <summary>
            递归加载所有树节点。
            </summary>
            <exception cref="T:System.InvalidProgramException">还没有存储到数据库中的节点，它的 IsFullLoaded 属性应该返回 true。</exception>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.MergeFullTree(System.Collections.Generic.List{Rafy.Domain.Entity})">
            <summary>
            把完整加载的子树，合并到当前树中。
            </summary>
            <param name="fullLoadedChildren">一个已经从数据库中完整加载的子树。该集合可以是 null。</param>
        </member>
        <member name="P:Rafy.Domain.Entity.EntityTreeChildren.AutoIndexEnabled">
            <summary>
            是否自动在集体变更时计算 TreeIndex，默认：null。表示从上层列表中取值。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.IsAutoTreeIndexEnabled">
            <summary>
            是否自动在集体变更时计算 TreeIndex，默认：null。表示从最上层组件中取值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.ResetTreeIndex(System.Int32)">
            <summary>
            根据当前对象的 TreeIndex 重设当前对象的整个树型子列表的 TreeIndex。
            </summary>
            <param name="from">从指定的索引开始重新整理</param>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.ResetTreeIndexSimple(System.Int32)">
            <summary>
            根据当前对象的 TreeIndex 重设当前对象树中子节点的 TreeIndex。
            </summary>
            <param name="from">From.</param>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.CountNodes">
            <summary>
            统计当前树中已经加载的节点的个数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.EachNode(System.Func{Rafy.Domain.Entity,System.Boolean})">
            <summary>
            递归对于整个树中的每一个节点都调用 action。
            </summary>
            <param name="action">对每一个节点调用的方法。方法如何返回 true，则表示停止循环，返回该节点。</param>
            <returns>第一个被调用 action 后返回 true 的节点。</returns>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.IndexOf(Rafy.Domain.Entity)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.Contains(Rafy.Domain.Entity)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.CopyTo(Rafy.Domain.Entity[],System.Int32)">
            <summary>
            Copies to specific array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:Rafy.Domain.Entity.EntityTreeChildren.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="P:Rafy.Domain.Entity.EntityTreeChildren.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Rafy.Domain.Entity.EntityTreeChildren.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index</exception>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.Add(Rafy.Domain.Entity)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.Insert(System.Int32,Rafy.Domain.Entity)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.OnItemAdding(Rafy.Domain.Entity)">
            <summary>
            Called when [item adding].
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException">item;添加的元素不能为 null。</exception>
            <exception cref="T:System.InvalidProgramException">该节点在本集合中只能出现一次。</exception>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.OnItemAdded(System.Int32,Rafy.Domain.Entity)">
            <summary>
            当集合中新加入一个全新的节点时，调用此方法。
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.DisconnectFromTreeParent(Rafy.Domain.Entity)">
            <summary>
            断开此节点与原有父节点之间的关系。
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index</exception>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.Remove(Rafy.Domain.Entity)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Rafy.Domain.EntityRoutedEventArgs">
            <summary>
            LogicalView 路由事件的参数
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRoutedEventArgs.Source">
            <summary>
            事件源头的实体
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRoutedEventArgs.Event">
            <summary>
            发生的事件标记
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRoutedEventArgs.Args">
            <summary>
            事件参数
            </summary>
        </member>
        <member name="T:Rafy.Domain.EntityRoutedEvent">
            <summary>
            Entity 路由事件的标记
            </summary>
        </member>
        <member name="T:Rafy.Domain.EntityList">
            <summary>
            所有实体集合类的基类。
            <para>使用 <see cref="T:Rafy.Domain.EntityList"/> 与使用 <see cref="T:System.Collections.Generic.List`1"/> 的区别在于：</para>
            <para>在 <see cref="T:Rafy.Domain.EntityList"/> 中移除的实体，都会被此列表记住在 <see cref="P:Rafy.Domain.EntityList.DeletedList"/> 中，在最终保存列表时，这些被移除的实体会被从持久层删除。</para>
            <para>在 <see cref="T:Rafy.Domain.EntityList"/> 中添加实体时：</para>
            <para>* 列表会把该实体的父列表设计为本列表（见：<see cref="P:Rafy.Domain.EntityList.Parent"/> 属性）；</para>
            <para>* 列表会把该实体的组合父实体设置为本列表的父实体；</para>
            <para>* 如果实体是树型实体，那么还会为实体生成相应的 <see cref="P:Rafy.Domain.Entity.TreeIndex"/>。</para>
            <para>
            另外，需要注意的是：仓库的所有数据查询，都是通过 EntityList 来实现数据传输的。包括：FetchCount（查询数据条数，见：<see cref="P:Rafy.Domain.EntityList.TotalCount"/>属性）、FetchFirst（查询单条数据）、FetchList（查询数据列表）。
            </para>
            <para>综上，<see cref="T:Rafy.Domain.EntityList"/> 主要用于实现领域实体的列表行为、树列表行为以及数据的传输；如果需要对大量数据进行简单的列表操作，请使用更简单的 <see cref="T:System.Collections.Generic.List`1"/> 泛型即可。把任意列表转换为<see cref="T:Rafy.Domain.EntityList"/>，可使用 <see cref="M:Rafy.Domain.EntityRepository.CreateList(System.Collections.IEnumerable,System.Boolean)"/> 方法。</para>
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityList.Find(System.Object,System.Boolean)">
            <summary>
            通过 Id 来查找某个实体。
            </summary>
            <param name="id">需要查找的实体的 id 值。</param>
            <param name="coreceType">
            如果传入的 id 的类型与实体的类型不一致，则强制转换为一致的类型。
            如果不确定传入的类型是否一致，则可以指定这个参数为 true。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityList.FindRepository">
            <summary>
            尝试找到这个实体列表对应的仓库类。
            
            没有标记 RootEntity/ChildEntity 的类型是没有仓库类的，例如所有的条件类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityList.GetRepository">
            <summary>
            获取该实体列表对应的仓库类，如果没有找到，则抛出异常。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityList.FindListProperty">
            <summary>
            查找本实体对应的列表属性
            
            以下情况下返回 null：
            * 这是一个根对象的集合。
            * 这是一个子对象的集合，但是这个集合不在根对象聚合树中。（没有 this.Parent 属性。）
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.EntityList.HasManyType">
            <summary>
            当前集合的一对多类型
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntityList.ResetItemParent">
            <summary>
            是否：在添加每一项时，设置实体的 <see cref="P:Rafy.Domain.IEntity.ParentList"/> 为当前列表，并设置它的父对象为本列表对象的父对象。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityList.MovingItems">
            <summary>
            设置本列表是否正在调整元素的位置。
            为使得排序性能更好，可使用此方法声明一个只变更元素顺序的代码块，
            此代码块中，列表会认为所有的 Remove、Add、Set 操作，都只是在维护元素顺序，而不会添加新元素、删除旧元素。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityList.ClearItems">
            <summary>
            清空所有项。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityList.SetItem(System.Int32,Rafy.Domain.Entity)">
            <summary>
            Sets the item.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Rafy.Domain.EntityList.RemoveItem(System.Int32)">
            <summary>
            Removes the item.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Rafy.Domain.EntityList.InsertItem(System.Int32,Rafy.Domain.Entity)">
            <summary>
            Inserts the item.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <exception cref="T:System.InvalidOperationException">当前列表中已经存在这个实体，添加操作不可用。</exception>
        </member>
        <member name="P:Rafy.Domain.EntityList.EntityType">
            <summary>
            对应的实体类型。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityList.SetParentEntity(Rafy.Domain.Entity)">
            <summary>
            设置组合父对象。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.EntityList.SyncParentEntityId(Rafy.Domain.Entity)">
            <summary>
            由于有时父引用实体没有发生改变，但是父引用实体的 Id 变了，此时需要调用此方法同步二者的 Id。
            </summary>
            <param name="parent">由于外部调用时，已经有 parent 的值了，所以直接传进来。</param>
        </member>
        <member name="M:Rafy.Domain.EntityList.Clone(Rafy.Domain.EntityList,Rafy.Domain.CloneOptions)">
            <summary>
            复制目标集合中的所有对象。
            </summary>
            <param name="sourceList"></param>
            <param name="options"></param>
        </member>
        <member name="M:Rafy.Domain.EntityList.RaiseRoutedEvent(Rafy.Domain.EntityRoutedEvent,System.EventArgs)">
            <summary>
            触发某个路由事件
            </summary>
            <param name="indicator"></param>
            <param name="args"></param>
        </member>
        <member name="M:Rafy.Domain.EntityList.AddRange(System.Collections.Generic.IEnumerable{Rafy.Domain.Entity})">
            <summary>
            把指定的实体集合都回到本集合中来。
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="P:Rafy.Domain.EntityList.DeletedList">
            <summary>
            本列表中已经被移除的所有对象。
            这些对象将会从仓库中删除。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityList.IsDirty">
            <summary>
            返回当前列表是否需要保存。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityList.MarkSaved">
            <summary>
            将当前列表中所有的组合对象树都标记为未变更状态。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityList.Parent">
            <summary>
            获取此集合所属于的父实体。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityList.OnDeserialized">
            <summary>
            This method is called on a newly deserialized object
            after deserialization is complete.
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityList.TotalCount">
            <summary>
            查询出来的当前列表在数据库中存在的总数据条数。
            
            一是用于统计数据条数查询的数据传输。
            二是是分页时保存所有数据的行数。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityList.SetTotalCount(System.Int64)">
            <summary>
            当查询 Count 时，调用此方法设置最终查询出的总条数。
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Rafy.Domain.EntityList.AutoTreeIndexEnabled">
            <summary>
            是否启用树型的自动生成索引功能。默认为 true。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityList.SupportTree">
            <summary>
            如果支持树型操作，需要重写 TreeId、OrderNo。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityList.IsTreeRootList">
            <summary>
            返回当前的这个列表是否作为树结构中的根节点的集合。
            注意，如果集合中没有元素时，同样会返回 false。
            
            如果本属性是 false 时，那么 EntityList 中与树相关的功能都不再可用。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityList.TryAutoIndex(System.Int32,System.Boolean)">
            <summary>
            对从指定的索引开始的根节点进行自动索引。
            </summary>
            <param name="from">从指定索引的节点开始。</param>
            <param name="force">是否强制修改 TreeIndex。</param>
        </member>
        <member name="M:Rafy.Domain.EntityList.EachNode(System.Func{Rafy.Domain.Entity,System.Boolean})">
            <summary>
            如果实体支持树，那么递归对于整个树中的每一个节点都调用 action。
            否则，只是简单地遍历整个集合。
            </summary>
            <param name="action">对每一个节点调用的方法。方法如何返回 true，则表示停止循环，返回该节点。</param>
            <returns>
            第一个被调用 action 后返回 true 的节点。
            </returns>
        </member>
        <member name="M:Rafy.Domain.EntityList.ResetTreeIndex">
            <summary>
            如果当前集合是一个根节点的集合，那么可以使用此方法来重新生成树中所有节点的索引。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityListExtension.ToDataTable(Rafy.Domain.EntityList)">
            <summary>
            把指定的实体列表中的数据完全转换到一个 DataTable 中。
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.EntitySerializableFlags">
            <summary>
            前三位一起表示 PersistenceStatus，其它位表示一些 boolean 值。
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntitySerializableFlags.IsModified">
            <summary>
            数据变更
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntitySerializableFlags.IsNew">
            <summary>
            新对象
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntitySerializableFlags.IsDeleted">
            <summary>
            标记删除
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntitySerializableFlags.UpdateRedundancies">
            <summary>
            是否需要在数据层更新对应的冗余值。
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntitySerializableFlags.isTreeLeaf">
            <summary>
            是否为树的叶子节点。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Criteria">
            <summary>
            查询对象的基类
            
            如果不使用这个类做基类的查询条件类，也可以在 WPF 下运行正常。但是无法在 Web 下运行。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Criteria.PagingInfo">
            <summary>
            如果该条件类正在使用分页查询，则这个对象描述分页的信息。
            
            如果这个属性为 null 或者是<see cref="F:Rafy.PagingInfo.Empty"/>，表示不需要进行分页查询，直接返回整个结果集。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Criteria.EagerLoad">
            <summary>
            需要贪婪加载的属性列表。默认为 null 表示不进行贪婪加载。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Criteria.CanLocalFilter">
            <summary>
            此属性指示当前查询条件类型是否用于本地过滤。
            
            默认是 false。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Criteria.LocalFilter(Rafy.Domain.Entity)">
            <summary>
            如果本查询条件用于本地过滤查询时，子类需要实现此方法以指定过滤逻辑。
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ILoadOptionsCriteria">
            <summary>
            一个可以进行数据加载定义的查询条件
            </summary>
        </member>
        <member name="P:Rafy.Domain.ILoadOptionsCriteria.PagingInfo">
            <summary>
            分页条件
            
            如果这个属性为 null 或者是<see cref="F:Rafy.PagingInfo.Empty"/>，表示不需要进行分页查询，直接返回整个结果集。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ILoadOptionsCriteria.EagerLoad">
            <summary>
            需要贪婪加载的属性列表。默认为 null 表示不进行贪婪加载。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Entity`1">
            <summary>
            一个指定的实体的主键类型的实体基类。
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Rafy.Domain.Entity`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.Entity"/> class.
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity`1.IdProvider">
            <summary>
            实体标识属性的算法程序。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity`1.Id">
            <summary>
            实体的标识属性。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity`1.OnIdChanged(Rafy.ManagedProperty.ManagedPropertyChangedEventArgs)">
            <summary>
            Id 变更后事件。
            </summary>
            <param name="e">The <see cref="T:Rafy.ManagedProperty.ManagedPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Rafy.Domain.Entity`1.GetProperty``1(Rafy.Domain.IProperty,Rafy.Domain.Entity{`0}.FastField{``0}@)">
            <summary>
            使用快速字段完成数据的读取。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <param name="fastfield"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity`1.SetProperty``1(Rafy.Domain.IProperty,Rafy.Domain.Entity{`0}.FastField{``0}@,``0)">
            <summary>
            使用快速字段进行属性值的设置。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <param name="fastfield"></param>
            <param name="value"></param>
        </member>
        <member name="T:Rafy.Domain.Entity`1.FastField`1">
            <summary>
            属性使用的快速字段。
            
            设计此类的原因是CSLA属性的ReadProperty方法往往比较耗时，
            而且目前并不使用CSLA的属性权限等内容，
            所以可以使用这个类对一些被频繁调用的类进行缓存。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Rafy.Domain.Entity`1.FastField`1.Value">
            <summary>
            字段的值。 
            框架内部使用。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Entity`1.FastField`1.IsEmpty">
            <summary>
            Bool值表示当前的值是否还没有和属性值进行同步。
            框架内部使用。
            </summary>
        </member>
        <member name="T:Rafy.Domain.GuidEntity">
            <summary>
            以 Guid 作为主键的实体基类。
            </summary>
        </member>
        <member name="P:Rafy.Domain.GuidEntity.TreePId">
            <summary>
            树型父实体的 Id 属性
            
            默认使用存储于数据库中的字段，子类可以重写此属性以实现自定义的父子结构逻辑。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IntEntity">
            <summary>
            以 Int 作为主键的实体基类。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IntEntity.TreePId">
            <summary>
            树型父实体的 Id 属性
            
            默认使用存储于数据库中的字段，子类可以重写此属性以实现自定义的父子结构逻辑。
            </summary>
        </member>
        <member name="T:Rafy.Domain.LongEntity">
            <summary>
            以 Int64 作为主键的实体基类。
            </summary>
        </member>
        <member name="P:Rafy.Domain.LongEntity.TreePId">
            <summary>
            树型父实体的 Id 属性
            
            默认使用存储于数据库中的字段，子类可以重写此属性以实现自定义的父子结构逻辑。
            </summary>
        </member>
        <member name="T:Rafy.Domain.StringEntity">
            <summary>
            以 string 作为主键的实体基类。
            </summary>
        </member>
        <member name="P:Rafy.Domain.StringEntity.TreePId">
            <summary>
            树型父实体的 Id 属性
            
            默认使用存储于数据库中的字段，子类可以重写此属性以实现自定义的父子结构逻辑。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IDbConnector">
            <summary>
            数据库连接器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.IDbConnector.CreateDbAccesser">
            <summary>
            临时创建一个IDb对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.IDbConnector.DbSetting">
            <summary>
            数据库配置（每个库有一个唯一的配置名）
            </summary>
        </member>
        <member name="T:Rafy.Domain.IDirtyAware">
            <summary>
            是否被修改的数据的接口
            </summary>
        </member>
        <member name="P:Rafy.Domain.IDirtyAware.IsDirty">
            <summary>
            当前的模型，是否是脏的。
            一个脏的对象，表示它的状态还没有保存起来。
            </summary>
        </member>
        <member name="M:Rafy.Domain.IDirtyAware.MarkSaved">
            <summary>
            标记为已经保存。IsDirty 为 false。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IDomainComponent">
            <summary>
            实体模块组件（<see cref="T:Rafy.Domain.Entity"/> Or <see cref="T:Rafy.Domain.EntityList"/>）
            </summary>
        </member>
        <member name="P:Rafy.Domain.IDomainComponent.Parent">
            <summary>
            获取父组件
            
            列表的父组件是一个实体，而实体的父组件则是其所在的列表。
            </summary>
        </member>
        <member name="M:Rafy.Domain.IDomainComponent.GetRepository">
            <summary>
            获取该实体列表对应的仓库类，如果没有找到，则抛出异常。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IDomainComponent.FindRepository">
            <summary>
            尝试找到这个实体列表对应的仓库类。
            
            没有标记 RootEntity/ChildEntity 的类型是没有仓库类的，例如所有的条件类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IDomainComponent.SetParent(Rafy.Domain.IDomainComponent)">
            <summary>
            设置父组件
            </summary>
            <param name="parent"></param>
        </member>
        <member name="T:Rafy.Domain.IEntity">
            <summary>
            实体
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEntity.ParentList">
            <summary>
            实体所在的当前列表对象。 虽然一个实体可以存在于多个集合中，但是，它只保留一个主要集合的引用，见：<see cref="F:Rafy.Domain.EntityList.ResetItemParent"/>。
            </summary>
        </member>
        <member name="M:Rafy.Domain.IEntity.FindParentEntity">
            <summary>
            获取组合关系中父对象的引用。
            </summary>
        </member>
        <member name="M:Rafy.Domain.IEntity.GetLoadedChildren">
            <summary>
            获取所有已经加载的组合子的字段集合。
            
            返回的字段的值必须是 IEntityOrList 类型。
            子有可能是集合、也有可能只是一个单一的实体。只会是这两种情况。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IEntity.GetChildProperty``1">
            <summary>
            根据孩子类型，直接获取孩子列表。
            </summary>
            <typeparam name="TChild"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.IEntityList">
            <summary>
            实体列表
            </summary>
        </member>
        <member name="T:Rafy.Domain.IEntityWithStatus">
            <summary>
            一个能控制状态的实体。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEntityWithStatus.PersistenceStatus">
            <summary>
            获取或设置实体当前的持久化状态。
            保存实体时，会根据这个状态来进行对应的增、删、改的操作。
            </summary>
        </member>
        <member name="M:Rafy.Domain.IEntityWithStatus.MarkModifiedIfUnchanged">
            <summary>
            标记当前对象为需要保存的状态。
            
            只有实体的状态是 Unchanged 状态时（其它状态已经算是 Dirty 了），调用本方法才会把实体的状态改为 Modified。
            </summary>
        </member>
        <member name="M:Rafy.Domain.IEntityWithStatus.RevertDeletedStatus">
            <summary>
            清空实体的 IsDeleted 状态，使其还原到删除之前的状态。
            </summary>
        </member>
        <member name="M:Rafy.Domain.IEntityWithStatus.RevertNewStatus">
            <summary>
            清空实体的 IsNew 状态，使其还原到之前的状态。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IEntityWithManagedProperties">
            <summary>
            一个拥有许多自定义托管属性的实体
            </summary>
        </member>
        <member name="M:Rafy.Domain.IEntityWithManagedProperties.GetRefNullableId(Rafy.ManagedProperty.IRefIdProperty)">
            <summary>
            获取指定引用 id 属性对应的 id 的可空类型返回值。
            </summary>
            <param name="property"></param>
            <returns>本方法为兼容值类型而使用。不论 Id 是值类型、还是引用类型，都可能返回 null。</returns>
        </member>
        <member name="M:Rafy.Domain.IEntityWithManagedProperties.SetRefNullableId(Rafy.ManagedProperty.IRefIdProperty,System.Object,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置指定引用 id 属性对应的 id 的可空类型值。
            </summary>
            <param name="property"></param>
            <param name="value">本方法为兼容值类型而使用。不论外键是否为值类型，都可以传入 null。</param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IEntityWithManagedProperties.GetRefId(Rafy.ManagedProperty.IRefIdProperty)">
            <summary>
            获取指定引用 id 属性对应的 id 的返回值。
            </summary>
            <param name="property"></param>
            <returns>如果 Id 是值类型，则这个函数的返回值不会是 null；如果是引用类型，则可能返回 null。</returns>
        </member>
        <member name="M:Rafy.Domain.IEntityWithManagedProperties.SetRefId(Rafy.ManagedProperty.IRefIdProperty,System.Object,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置指定引用 id 属性对应的 id 的值。
            
            在引用 id 变化时，会同步相应的引用实体属性。
            </summary>
            <param name="property"></param>
            <param name="value">外键如果是值类型，则不能传入 null。</param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IEntityWithManagedProperties.GetRefEntity``1(Rafy.Domain.RefEntityProperty{``0})">
            <summary>
            以懒加载的方式获取某个引用实体的值。
            </summary>
            <typeparam name="TRefEntity"></typeparam>
            <param name="entityProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IEntityWithManagedProperties.GetRefEntity(Rafy.ManagedProperty.IRefEntityProperty)">
            <summary>
            以懒加载的方式获取某个引用实体的值。
            </summary>
            <param name="entityProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IEntityWithManagedProperties.SetRefEntity(Rafy.ManagedProperty.IRefEntityProperty,Rafy.Domain.Entity,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置指定引用实体属性的值。
            在实体属性变化时，会同步相应的引用 Id 属性。
            </summary>
            <param name="entityProperty">The entity property.</param>
            <param name="value">The value.</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IEntityWithManagedProperties.GetLOBProperty``1(Rafy.Domain.LOBProperty{``0})">
            <summary>
            获取指定的 LOB 属性的值。（懒加载）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IEntityWithManagedProperties.GetLOBProperty(Rafy.ManagedProperty.ILOBProperty)">
            <summary>
            获取指定的 LOB 属性的值。（懒加载）
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IEntityWithManagedProperties.SetLOBProperty(Rafy.ManagedProperty.ILOBProperty,System.Object,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置 LOB 属性的值。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="source"></param>
        </member>
        <member name="M:Rafy.Domain.IEntityWithManagedProperties.GetLazyList(Rafy.ManagedProperty.IListProperty)">
            <summary>
            延迟加载子对象的集合。
            </summary>
            <param name="listProperty">The list property.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.IClonableEntity">
            <summary>
            一个可克隆的实体。
            </summary>
        </member>
        <member name="M:Rafy.Domain.IClonableEntity.Clone(Rafy.Domain.Entity)">
            <summary>
            使用 <see cref="M:Rafy.Domain.CloneOptions.NewSingleEntity"/> 来复制目标对象。
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Rafy.Domain.IClonableEntity.Clone(Rafy.Domain.Entity,Rafy.Domain.CloneOptions)">
            <summary>
            使用指定的复制条件来复制源对象的值。
            </summary>
            <param name="source"></param>
            <param name="options"></param>
        </member>
        <member name="T:Rafy.Domain.IEntityInfoHost">
            <summary>
            EntityInfo的驻留器
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEntityInfoHost.EntityMeta">
            <summary>
            实体元数据
            </summary>
        </member>
        <member name="M:Rafy.Domain.IEntityInfoHost.GetPropertiesInRedundancyPath">
            <summary>
            所有本实体中所有声明的冗余属性。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IEntityInfoHost.GetChildProperties">
            <summary>
            所有本实体中所有声明的子属性。
            
            每一个子属性值可能是一个列表，也可能是一个单一实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IEntityInfoHost.FindParentPropertyInfo(System.Boolean)">
            <summary>
            找到本对象上层聚合父实体的实体引用属性元数据。
            
            注意，此函数返回的是引用实体属性，而非引用 Id 属性。
            </summary>
            <param name="throwOnNotFound">如果没有找到，是否需要抛出异常。</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.IHasHame">
            <summary>
            有名称的对象
            </summary>
        </member>
        <member name="P:Rafy.Domain.IHasHame.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Rafy.Domain.IRepository">
            <summary>
            实体类模块使用的抽象的懒加载提供器。
            实体类只依赖这个抽象类，而不依赖具体的提供方案。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepository.EntityType">
            <summary>
            该实体的仓库。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepository.SupportTree">
            <summary>
            对应的实体是否为树型实体
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepository.TreeIndexOption">
            <summary>
            如果本仓库对应的实体是一个树型实体，那么这个属性表示这个实体使用的树型编号方案。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepository.Extensions">
            <summary>
            所有可用的仓库扩展。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepository.ClientCache">
            <summary>
            基于版本号更新的客户端缓存 API。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepository.ServerCache">
            <summary>
            服务端内存缓存 API
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepository.DataPortalLocation">
            <summary>
            是否声明本仓库为本地仓库（客户端只在客户端查询，服务端在服务端查询）
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepository.DataProvider">
            <summary>
            数据提供程序。
            </summary>
        </member>
        <member name="M:Rafy.Domain.IRepository.New">
            <summary>
            创建一个全新的实体对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.NewList">
            <summary>
            创建一个全新的实体列表对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.CountAll">
            <summary>
            统计仓库中所有的实体数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.CountByParentId(System.Object)">
            <summary>
            统计某个父对象下的子对象条数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.CountTreeRoots">
            <summary>
            查询所有的根节点数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.CountBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询实体的个数。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.CacheById(System.Object)">
            <summary>
            优先使用缓存中的数据来通过 Id 获取指定的实体对象
            
            如果该实体的缓存没有打开，则本方法会直接调用 GetById 并返回结果。
            如果缓存中没有这些数据，则本方法同时会把数据缓存起来。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.CacheAll">
            <summary>
            优先使用缓存中的数据来查询所有的实体类
            
            如果该实体的缓存没有打开，则本方法会直接调用 GetAll 并返回结果。
            如果缓存中没有这些数据，则本方法同时会把数据缓存起来。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetById(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过Id获取指定的实体对象
            </summary>
            <param name="id">The identifier.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetAll(Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            以分页的方式查询所有实体。
            </summary>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetByIdList(System.Object[],Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取指定 id 集合的实体列表。
            </summary>
            <param name="idList">The identifier list.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetByParentIdList(System.Object[],Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过父对象的 Id 列表查询所有的实体。
            </summary>
            <param name="parentIdList">The parent identifier list.</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetByParentId(System.Object,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过父对象 Id 分页查询子对象的集合。
            </summary>
            <param name="parentId"></param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询实体列表。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetByTreeParentIndex(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            递归查找指定父索引的所有子节点。
            </summary>
            <param name="treeIndex"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetByTreePId(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取指定节点的直接子节点。
            </summary>
            <param name="treePId"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetTreeRoots(Rafy.Domain.EagerLoadOptions)">
            <summary>
            查询所有的根节点。
            
            与 GetAll 的区别在于：只查询所有的根节点，不查询子节点。
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetEntityValue(System.Object,System.String)">
            <summary>
            查询某个实体的某个属性的值。
            </summary>
            <param name="id"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.LoadAllTreeParents(Rafy.Domain.Entity)">
            <summary>
            递归加载某个节点的所有父节点。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Rafy.Domain.IRepository.Save(Rafy.Domain.IDomainComponent)">
            <summary>
            把这个组件中的所有改动保存到仓库中。
            
            <remarks>
            * 当本地保存时，方法返回的就是传入的实体。
            * 当客户端保存时，方法返回的是服务端保存后并向客户端回传的实体。
                此时，会对传入的实体或列表进行融合 Id 的操作。
                也就是说，在服务端生成的所有 Id 都会设置到参数实体中。
                而服务端设置其它的属性则会被忽略，如果想要使用其它的属性，则可以从返回值中获取。
                
            在客户端调用本方法保存实体的同时，服务端会把服务端保存完毕后的实体数据传输回客户端，这样才能保证客户端的实体能获取服务端生成的 Id 数据。
            如果希望不进行如何大数据量的传输，则尽量不要在客户端直接调用 Save 来进行实体的保存。（例如可以通过 Service 来定义数据的传输。）
            </remarks>
            </summary>
            <param name="component">需要保存的组件，可以是一个实体，也可以是一个实体列表。</param>
            <returns>
            返回在仓库中保存后的实体。
            </returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.Extension``1">
            <summary>
            获取指定类型的仓库扩展。
            </summary>
            <typeparam name="TRepositoryExt"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.IRepositoryExt">
            <summary>
            仓库扩展接口
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepositoryExt.RepositoryType">
            <summary>
            对应的仓库类型。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepositoryExt.Repository">
            <summary>
            被扩展的仓库
            </summary>
        </member>
        <member name="T:Rafy.Domain.IRepositoryFactory">
            <summary>
            ILazyProvider的抽象工厂
            </summary>
        </member>
        <member name="M:Rafy.Domain.IRepositoryFactory.FindByEntity(System.Type)">
            <summary>
            用于查找指定实体的仓库。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryFactory.Find(System.Type)">
            <summary>
            通过仓库类型查找指定的仓库。
            </summary>
            <param name="repoType"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.RepositoryFactoryHost">
            <summary>
            这个类主要用于依赖注入ILazyProviderFactory
            </summary>
        </member>
        <member name="F:Rafy.Domain.RepositoryFactoryHost.Factory">
            <summary>
            依赖注入的ILazyProviderFactory。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepositoryInternal.TableInfo">
            <summary>
            实体对应的数据表的信息。
            </summary>
        </member>
        <member name="M:Rafy.Domain.IRepositoryInternal.GetLazyListByParent(Rafy.Domain.Entity)">
            <summary>
            通过父对象获取子对象的集合。
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryInternal.ConvertRow(Rafy.Domain.Entity)">
            <summary>
            把行转换为对象
            
            （复制出一个新的实体对象）
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ITreeComponent">
            <summary>
            树结构中的组成元素。
            目前有三个实现该接口的类型：Entity、EntityList、EntityTreeChildren。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ITreeComponent.IsFullLoaded">
            <summary>
            返回当前树是否已经加载完全。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ITreeComponent.TreeComponentParent">
            <summary>
            此组件的上一级组件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ITreeComponent.ComponentType">
            <summary>
            当前组件的类型。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ITreeComponent.EachNode(System.Func{Rafy.Domain.Entity,System.Boolean})">
            <summary>
            递归对于整个树中的每一个节点都调用 action。
            </summary>
            <param name="action">对每一个节点调用的方法。方法如何返回 true，则表示停止循环，返回该节点。</param>
            <returns>第一个被调用 action 后返回 true 的节点。</returns>
        </member>
        <member name="M:Rafy.Domain.ITreeComponent.CountNodes">
            <summary>
            统计当前树中已经加载的节点的个数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ITreeComponent.LoadAllNodes">
            <summary>
            递归加载所有树节点。
            </summary>
        </member>
        <member name="T:Rafy.Domain.TreeComponentType">
            <summary>
            树中的所有组件。
            </summary>
        </member>
        <member name="F:Rafy.Domain.TreeComponentType.NodeList">
            <summary>
            最上层节点的列表。
            </summary>
        </member>
        <member name="F:Rafy.Domain.TreeComponentType.Node">
            <summary>
            实体节点。
            </summary>
        </member>
        <member name="F:Rafy.Domain.TreeComponentType.TreeChildren">
            <summary>
            某个节点的所有子节点的集合。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ITreeEntity">
            <summary>
            树型实体对应的属性与操作。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ITreeEntity.SupportTree">
            <summary>
            是否为树型实体。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ITreeEntity.IsTreeParentLoaded">
            <summary>
            返回当前的 TreeParent 的值是否已经加载。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ITreeEntity.TreeLevel">
            <summary>
            此节点在树中的级别。 根节点是第一级。 此级别是完全根据 Rafy.Domain.Entity.TreeIndex 计算出来的。 如果此实体不是一个树实体，则返回 -1。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ITreeEntity.TreeIndex">
            <summary>
            树型实体的树型索引编码 这个属性是实现树型实体的关键所在！
            </summary>
        </member>
        <member name="P:Rafy.Domain.ITreeEntity.TreePId">
            <summary>
            树型父实体的 Id 属性 默认使用存储于数据库中的字段，子类可以重写此属性以实现自定义的父子结构逻辑。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ITreeEntity.TreeParent">
            <summary>
            树中的父对象。 操作此属性，同样引起 TreeChildren、EntityList 的变化。 同时，注意此属性并不是懒加载属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ITreeEntity.TreeChildren">
            <summary>
            树中的子对象集合。 操作此属性，同样引起 TreeParent、EntityList 的变化。 同时，注意此属性并不是懒加载属性。
            </summary>
        </member>
        <member name="F:Rafy.Domain.IntKeyProvider.Zero">
            <summary>
            先装箱完成
            </summary>
        </member>
        <member name="T:Rafy.Domain.KeyProviders">
            <summary>
            所有支持的主键的算法容器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.KeyProviders.Get(System.Type)">
            <summary>
            获取指定类型的主键算法。
            </summary>
            <param name="keyType"></param>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.LongKeyProvider.Zero">
            <summary>
            先装箱完成
            </summary>
        </member>
        <member name="T:Rafy.Domain.IProperty">
            <summary>
            Rafy 实体框架中的托管属性
            </summary>
        </member>
        <member name="P:Rafy.Domain.IProperty.Category">
            <summary>
            Rafy 属性的类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.IProperty.IsRedundant">
            <summary>
            本托管属性是否是一个冗余属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IProperty.RedundantPath">
            <summary>
            如果本托管属性是一个冗余属性，则这里返回它对应的冗余路径。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IProperty.IsInRedundantPath">
            <summary>
            本托管属性是否在其它类上被声明了冗余属性的路径上
            </summary>
        </member>
        <member name="P:Rafy.Domain.IProperty.InRedundantPathes">
            <summary>
            其它类声明的本依赖属性的冗余属性路径
            </summary>
        </member>
        <member name="T:Rafy.Domain.ListProperty`1">
            <summary>
            列表属性
            </summary>
            <typeparam name="TEntityList"></typeparam>
        </member>
        <member name="P:Rafy.Domain.ListProperty`1.ListEntityType">
            <summary>
            列表对应的实体类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.ListProperty`1.HasManyType">
            <summary>
            一对多子属性的类型
            </summary>
        </member>
        <member name="T:Rafy.Domain.IListPropertyMetadata">
            <summary>
            引用属性元数据
            </summary>
        </member>
        <member name="P:Rafy.Domain.IListPropertyMetadata.DataProvider">
            <summary>
            自定义列表数据提供器
            </summary>
        </member>
        <member name="T:Rafy.Domain.ListPropertyMetadata`1">
            <summary>
            泛型版本的引用属性元数据
            </summary>
            <typeparam name="TEntityList">The type of the entity list.</typeparam>
        </member>
        <member name="M:Rafy.Domain.ListPropertyMetadata`1.#ctor">
            <summary>
            for merge
            </summary>
        </member>
        <member name="P:Rafy.Domain.ListPropertyMetadata`1.DataProvider">
            <summary>
            自定义列表数据提供器
            </summary>
        </member>
        <member name="T:Rafy.Domain.ListPropertyMeta">
            <summary>
            列表属性注册参数
            </summary>
            名称取为 Meta，主要是使用者可以更好地理解为元数据。
        </member>
        <member name="P:Rafy.Domain.ListPropertyMeta.DataProvider">
            <summary>
            自定义列表数据提供器
            </summary>
        </member>
        <member name="P:Rafy.Domain.ListPropertyMeta.HasManyType">
            <summary>
            一对多子属性的类型
            </summary>
        </member>
        <member name="T:Rafy.Domain.ListLoaderProvider">
            <summary>
            列表数据提供程序
            </summary>
            <param name="owner">The owner.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.LOBProperty`1">
            <summary>
            大对象属性
            <remarks>大对象属性的查询，是使用懒加载的方式。</remarks>
            </summary>
            <typeparam name="TPropertyType">属性的类型，只支持两种类型：String，Byte[]</typeparam>
        </member>
        <member name="F:Rafy.Domain.LOBProperty`1._defaultLoader">
            <summary>
            为了提高性能，在这个属性上添加一个 IRepository 的缓存字段。
            </summary>
        </member>
        <member name="P:Rafy.Domain.LOBProperty`1.LOBType">
            <summary>
            LOB属性的类型
            </summary>
        </member>
        <member name="T:Rafy.Domain.P`1">
            <summary>
            Property Register
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterRedundancy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Rafy.Domain.RedundantPath)">
            <summary>
            注册一个冗余属性
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyExp"></param>
            <param name="path">属性冗余的路径</param>
            <returns></returns>
            不使用 lambda 表达式来注册冗余路径，这是因为可能会与属性生命周期冲突，同时也没有这个必要。
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterRedundancyExtension``1(System.String,System.Type,Rafy.Domain.RedundantPath)">
            <summary>
            注册一个冗余扩展属性
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <param name="declareType">Type of the declare.</param>
            <param name="path">属性冗余的路径</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterRefId``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},Rafy.ManagedProperty.ReferenceType)">
            <summary>
            声明一个引用 Id 属性
            </summary>
            <param name="propertyExp">指向相应 CLR 的表达式。</param>
            <param name="referenceType">引用的类型</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterRefId``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},Rafy.Domain.RegisterRefIdArgs{``0})">
            <summary>
            声明一个引用 Id 属性
            </summary>
            <param name="propertyExp"></param>
            <param name="args">一系列相关的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterRefId``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Rafy.ManagedProperty.ReferenceType)">
            <summary>
            声明一个引用 Id 属性
            </summary>
            <param name="propertyExp">指向相应 CLR 的表达式。</param>
            <param name="referenceType">引用的类型</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterRefId``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Rafy.Domain.RegisterRefIdArgs{``0})">
            <summary>
            声明一个引用 Id 属性
            </summary>
            <param name="propertyExp"></param>
            <param name="args">一系列相关的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterRef``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Rafy.ManagedProperty.IRefIdProperty)">
            <summary>
            声明一个引用实体属性。
            </summary>
            <typeparam name="TRefEntity"></typeparam>
            <param name="propertyExp">指向引用实体属性的表达式。</param>
            <param name="refIdProperty">对应的引用 Id 属性，将为其建立关联。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterRef``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Rafy.Domain.RegisterRefArgs)">
            <summary>
            声明一个引用实体属性。
            </summary>
            <typeparam name="TRefEntity"></typeparam>
            <param name="propertyExp">指向引用实体属性的表达式。</param>
            <param name="args">引用实体属性相应的参数对象。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.OverrideRefMeta``2(Rafy.Domain.RefEntityProperty{``0},``1,System.Action{``1})">
            <summary>
            为某个实体类型重写指定引用属性对应的元数据。
            </summary>
            <typeparam name="TRefEntity">The type of the reference entity.</typeparam>
            <typeparam name="TMeta">The type of the meta.</typeparam>
            <param name="property">The property.</param>
            <param name="args">The arguments.</param>
            <param name="overrideValues">The override values.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">args</exception>
            <exception cref="T:System.InvalidOperationException">不支持重写 Loader 属性。</exception>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterRefIdExtension``1(System.String,System.Type,System.Boolean)">
            <summary>
            扩展一个引用属性
            </summary>
            <typeparam name="TKey">The type of the entity list.</typeparam>
            <param name="propertyName">属性名称。</param>
            <param name="declareType">声明此属性的类型。</param>
            <param name="isNullable">是否为一个可空的引用属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterRefExtension``1(System.String,System.Type,Rafy.ManagedProperty.IRefIdProperty)">
            <summary>
            扩展一个引用实体属性。
            </summary>
            <typeparam name="TRefEntity"></typeparam>
            <param name="propertyName">实体属性的名称。</param>
            <param name="declareType">声明此属性的类型。</param>
            <param name="refIdProperty">对应的引用 Id 属性，将为其建立关联。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterList``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            注册一个列表属性
            </summary>
            <typeparam name="TEntityList">The type of the entity list.</typeparam>
            <param name="propertyExp">The property exp.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterList``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Rafy.Domain.ListPropertyMeta)">
            <summary>
            注册一个列表属性
            </summary>
            <typeparam name="TEntityList"></typeparam>
            <param name="propertyExp"></param>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterListExtension``1(System.String,System.Type)">
            <summary>
            扩展一个列表属性
            </summary>
            <typeparam name="TEntityList">The type of the entity list.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <param name="declareType">Type of the declare.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterListExtension``1(System.String,System.Type,Rafy.Domain.ListPropertyMeta)">
            <summary>
            扩展一个列表属性
            </summary>
            <typeparam name="TEntityList">The type of the entity list.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <param name="declareType">Type of the declare.</param>
            <param name="meta">The meta.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.Property`1">
            <summary>
            Rafy 中所有实体的属性标记都使用这个类或者这个类的子类
            </summary>
            <typeparam name="TPropertyType"></typeparam>
        </member>
        <member name="M:Rafy.Domain.Property`1.#ctor(System.Type,System.Type,System.String,Rafy.ManagedProperty.ManagedPropertyMetadata{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.Property`1"/> class.
            </summary>
            <param name="ownerType">Type of the owner.</param>
            <param name="declareType">Type of the declare.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultMeta">The default meta.</param>
        </member>
        <member name="M:Rafy.Domain.Property`1.#ctor(System.Type,System.String,Rafy.ManagedProperty.ManagedPropertyMetadata{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.Property`1"/> class.
            </summary>
            <param name="ownerType">Type of the owner.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultMeta">The default meta.</param>
        </member>
        <member name="P:Rafy.Domain.Property`1.Category">
            <summary>
            Rafy 属性的类型
            </summary>
        </member>
        <member name="F:Rafy.Domain.Property`1._redundantPath">
            <summary>
            如果本托管属性是一个冗余属性，则这个字段表示它的依赖路径
            </summary>
        </member>
        <member name="F:Rafy.Domain.Property`1._inRedundantPathes">
            <summary>
            其它类声明的本依赖属性的冗余属性
            </summary>
        </member>
        <member name="P:Rafy.Domain.Property`1.IsRedundant">
            <summary>
            本托管属性是否是一个冗余属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Property`1.RedundantPath">
            <summary>
            如果本托管属性是一个冗余属性，则这里返回它对应的冗余路径。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Property`1.AsRedundantOf(Rafy.Domain.RedundantPath)">
            <summary>
            声明本属性为只读属性
            </summary>
            <param name="path">The path.</param>
            <exception cref="T:System.InvalidOperationException">
            属性已经注册完毕，不能修改！
            or
            冗余属性不能被其它冗余属性再次冗余，请直接写全冗余路径。
            </exception>
        </member>
        <member name="P:Rafy.Domain.IPropertyInternal.InRedundantPathes">
            <summary>
            其它类声明的本依赖属性的冗余属性路径
            </summary>
        </member>
        <member name="T:Rafy.Domain.PropertyCategory">
            <summary>
            Rafy 中可用的属性类型
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyCategory.Normal">
            <summary>
            一般属性
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyCategory.ReferenceId">
            <summary>
            引用属性
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyCategory.ReferenceEntity">
            <summary>
            引用属性
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyCategory.List">
            <summary>
            列表属性
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyCategory.Readonly">
            <summary>
            只读属性
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyCategory.Redundancy">
            <summary>
            冗余属性
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyCategory.LOB">
            <summary>
            LOB 属性
            </summary>
        </member>
        <member name="T:Rafy.Domain.PropertyDefailtValues">
            <summary>
            Rafy 中属性的默认值。
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyDefailtValues.DefaultDateTime">
            <summary>
            应用层可以修改此属性来变更管理属性在注册时的默认值。
            
            默认是 2000-01-01，这个默认值可以插入到各个数据库中。
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyDefailtValues.DefaultLOBBinary">
            <summary>
            默认的 LOB 二进制流
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyDefailtValues.DefaultLOBString">
            <summary>
            默认的 LOB 字符串
            </summary>
        </member>
        <member name="T:Rafy.Domain.PropertyMetadata`1">
            <summary>
            Rafy 中的属性元数据都从这个类继承下来。
            </summary>
            <typeparam name="TPropertyType"></typeparam>
        </member>
        <member name="P:Rafy.Domain.PropertyMetadata`1.DateTimePart">
            <summary>
            如果当前是一个时间类型，则这个属性表示该时间类型正在被使用的部分。
            </summary>
        </member>
        <member name="P:Rafy.Domain.PropertyMetadata`1.AffectStatus">
            <summary>
            此属性的变更，是否会造成实体状态的变更（变脏）。
            
            默认为真。
            </summary>
        </member>
        <member name="T:Rafy.Domain.RafyPropertyDescriptor">
            <summary>
            Rafy 属性描述器
            
            Rafy 引用属性和子属性的值的获取与设置，不是直接返回 GetProperty 的内部原生属性值，
            而是通过 GetLazyRef().NullableId、GetLazyList 返回值。
            
            同时，由于只能是界面使用 RafyPropertyDescriptor 这个类型来操作属性值，
            所以还需要把枚举值转换为字符串。
            </summary>
        </member>
        <member name="T:Rafy.Domain.RafyPropertyDescriptorFactory">
            <summary>
            Rafy 属性描述器工厂
            </summary>
        </member>
        <member name="T:Rafy.Domain.RedundantPath">
            <summary>
            冗余属性路径
            </summary>
        </member>
        <member name="M:Rafy.Domain.RedundantPath.#ctor(System.Object[])">
            <summary>
            冗余属性路径
            </summary>
            <param name="pathes">
            此数组内只接受两个类型：IProperty，ConcreteProperty。
            
            一个集合列表，由 N 个引用属性和 1 个一般值类型属性组成。
            表示从第一个引用属性开始的一个引用链条，一直到最后一个值属性对应的值。例如：
            D.CRef, C.BRef, B.ARef, A.Name 这样的一个集合表示以下冗余路径：D->C->B->A.Name
            </param>
        </member>
        <member name="P:Rafy.Domain.RedundantPath.Redundancy">
            <summary>
            冗余属性
            </summary>
        </member>
        <member name="P:Rafy.Domain.RedundantPath.RefPathes">
            <summary>
            所有引用属性路径。
            
            注意，第一个引用属性，必须和冗余属性同在一个实体类型中。
            
            注意，此集合中直接存储的是引用 Id 属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RedundantPath.ValueProperty">
            <summary>
            最终的值属性
            </summary>
        </member>
        <member name="T:Rafy.Domain.RefEntityProperty`1">
            <summary>
            引用实体属性的实体标记
            </summary>
            <typeparam name="TRefEntity">引用实体的类型</typeparam>
        </member>
        <member name="F:Rafy.Domain.RefEntityProperty`1._loader">
            <summary>
            自定义加载器。
            </summary>
        </member>
        <member name="F:Rafy.Domain.RefEntityProperty`1._defaultLoader">
            <summary>
            为了提高性能，在这个属性上添加一个 IRepository 的缓存字段。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RefEntityProperty`1.Loader">
            <summary>
            自定义的引用实体加载器。
            </summary>
        </member>
        <member name="T:Rafy.Domain.RefEntityLoader">
            <summary>
            引用实体加载器方法。
            </summary>
            <param name="id">引用实体的 id。</param>
            <param name="owner">拥有该引用属性的实体。</param>
            <returns>返回对应的引用实体。</returns>
        </member>
        <member name="M:Rafy.Domain.IRefEntityPropertyInternal.Load(System.Object,Rafy.Domain.Entity)">
            <summary>
            加载某个 id 对应的引用实体。
            </summary>
            <param name="id"></param>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.RefIdProperty`1">
            <summary>
            引用实体属性的 Id 标记
            </summary>
        </member>
        <member name="P:Rafy.Domain.RefIdProperty`1.ReferenceType">
            <summary>
            实体引用的类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.RefIdProperty`1.Nullable">
            <summary>
            该引用属性是否可空
            </summary>
        </member>
        <member name="P:Rafy.Domain.RefIdProperty`1.RefEntityProperty">
            <summary>
            返回对应的引用实体属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RefIdProperty`1.RefEntityType">
            <summary>
            引用实体的类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.RefIdProperty`1.KeyProvider">
            <summary>
            引用的实体的主键的算法程序。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRefIdPropertyInternal.RefEntityProperty">
            <summary>
            如果当前属性是一个引用 Id 属性，则这个属性值返回对应的引用实体属性。
            </summary>
        </member>
        <member name="T:Rafy.Domain.RegisterRefArgs">
            <summary>
            声明引用实体属性的参数对象。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RegisterRefArgs.RefIdProperty">
            <summary>
            对应的引用 Id 属性
            </summary>
        </member>
        <member name="P:Rafy.Domain.RegisterRefArgs.Serializable">
            <summary>
            是否需要序列化引用实体
            
            如果不设置任何值，默认情况下：引用实体对象只会从服务端序列化到客户端。从客户端传输到服务端时，不会序列化。
            （
            这是因为服务端可以简单地查询出所有的数据，而不需要客户端传输过来。
            客户端如何需要把多个实体一同传输到服务端时，应该使用服务把多个实体同时设置为服务的输入。
            ）
            </summary>
        </member>
        <member name="P:Rafy.Domain.RegisterRefArgs.Loader">
            <summary>
            实例加载器（使用外键拥有者作为加载上下文）
            </summary>
        </member>
        <member name="T:Rafy.Domain.RegisterRefIdArgs`1">
            <summary>
            声明引用 Id 属性的参数对象。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RegisterRefIdArgs`1.ReferenceType">
            <summary>
            引用属性的类型。
            </summary>
        </member>
        <member name="T:Rafy.Domain.PersistenceStatus">
            <summary>
            实体的持久化状态。
            保存实体时，会根据这个状态来进行对应的增、删、改的操作。
            </summary>
        </member>
        <member name="F:Rafy.Domain.PersistenceStatus.Unchanged">
            <summary>
            未改动
            </summary>
        </member>
        <member name="F:Rafy.Domain.PersistenceStatus.Modified">
            <summary>
            数据变更。仓库保存时，需要执行更新操作。
            </summary>
        </member>
        <member name="F:Rafy.Domain.PersistenceStatus.New">
            <summary>
            新对象。仓库保存时，需要执行添加操作。
            </summary>
        </member>
        <member name="F:Rafy.Domain.PersistenceStatus.Deleted">
            <summary>
            已删除。仓库保存时，需要执行删除操作。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Serialization.Json.AggtDeserializer">
            <summary>
            实体反序列化器。
            序列化后的数据只是暴露了实体的数据，而忽略了实体的状态。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtDeserializer.UpdatedEntityCreationMode">
            <summary>
            更新实体时，实体的创建模式。
            默认值：<see cref="F:Rafy.Domain.Serialization.Json.UpdatedEntityCreationMode.CreateNewInstance"/>。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtDeserializer.TreeChildrenProperty">
            <summary>
            反序列化时，需要把哪个属性的认为是树型子属性。默认为 "TreeChildren".
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtDeserializer.PersistenceStatusProperty">
            <summary>
            实体的 Json 中可以使用这个属性来指定实体的状态。值是该枚举的名称。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtDeserializer.UnknownAsDynamicProperties">
            <summary>
            是否把未知的属性都反序列化为动态属性？
            默认为 false。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtDeserializer.Deserialize(System.Type,System.String)">
            <summary>
            实体或实体列表的自定义反序列化方法。
            </summary>
            <param name="type">传入实体类型或实体列表类型。</param>
            <param name="json">要反序列化的 Json。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtDeserializer.DeserializeEntity(System.Type,Newtonsoft.Json.Linq.JObject)">
            <summary>
            实体的自定义反序列化方法。
            </summary>
            <param name="type">The type.</param>
            <param name="jObject">The j object.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtDeserializer.DeserializeEntity(System.Type,Newtonsoft.Json.Linq.JObject,System.Object)">
            <summary>
            实体的自定义反序列化方法。
            </summary>
            <param name="type">The type.</param>
            <param name="jObject">The j object.</param>
            <param name="id">实体的标识。如果已经在 jObject 中指定时，此参数可以传入 null。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtDeserializer.DeserializeList(System.Type,Newtonsoft.Json.Linq.JArray)">
            <summary>
            反序列化指定的数组为一个实体的列表。
            </summary>
            <param name="listType"></param>
            <param name="jArray"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtDeserializer.DeserializeProperties(Newtonsoft.Json.Linq.JObject,Rafy.Domain.Entity)">
            <summary>
            遍历 JSON 对象的属性，并使用托管属性 API 来设置一般属性的值。
            </summary>
            <param name="jObject"></param>
            <param name="entity"></param>
        </member>
        <member name="T:Rafy.Domain.Serialization.Json.UpdatedEntityCreationMode">
            <summary>
            更新实体时，实体的创建模式。
            更新时是否需要把实体从仓库中查询出来。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Serialization.Json.UpdatedEntityCreationMode.CreateNewInstance">
            <summary>
            直接创建一个新的实体实例，然后在这个实例上进行属性的反序列化。
            如果反序列化时，JSON 中给出了所有的实体属性，则可以需要使用此配置。这样可以减少数据库访问次数。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Serialization.Json.UpdatedEntityCreationMode.RequeryFromRepository">
            <summary>
            根据 Id 从仓库中把旧实体查询出来，然后在这个实例上进行属性的反序列化。
            如果反序列化时，JSON 中没有给出所有的实体属性，则需要使用此配置，否则会导致一些属性值丢失。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Serialization.Json.AggtSerializer">
            <summary>
            聚合实体的序列化器。
            序列化后的数据只是暴露了实体的数据，而忽略了实体的状态。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtSerializer.InnerWriter">
            <summary>
            内部的 JsonTextWriter。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtSerializer.SerializeAggt">
            <summary>
            是否需要同时序列化所有子对象。
            默认为 true。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtSerializer.SerializeReference">
            <summary>
            是否需要同时序列化相关的引用属性。
            默认为 true。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtSerializer.SerializeIsPhantom">
            <summary>
            如果使用了幽灵框架，那么此属性表示是否需要同时序列化幽灵属性。
            默认为 false。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtSerializer.UseCamelProperty">
            <summary>
            是否使用舵峰式。
            默认为 true。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtSerializer.EnumSerializationMode">
            <summary>
            是把在序列化枚举时，把值输出为字符串。
            默认为 <see cref="F:Rafy.Domain.Serialization.Json.EnumSerializationMode.Integer"/>。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtSerializer.IgnoreDefault">
            <summary>
            是否需要在序列化时忽略默认值的属性。
            默认为 false。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtSerializer.IgnoreROProperties">
            <summary>
            是否需要在序列化时忽略只读属性。
            默认为 false。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtSerializer.OutputListTotalCount">
            <summary>
            是否输出实体列表的 TotalCount 的值，而把列表的值放到一个名为 Data 的属性值中。
            但是，如果 TotalCount 中没有值时，则不会输出 TotalCount，而只输出 Data 属性。
            默认为 false。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtSerializer.IgnoreDynamicProperties">
            <summary>
            是否忽略所有的动态属性。
            默认为 false。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtSerializer.Indent">
            <summary>
            是否采用缩进的格式。
            默认为 false。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtSerializer.Serialize(Rafy.Domain.IDomainComponent)">
            <summary>
            序列化指定的实体元素，并返回对应的 JSON。
            </summary>
            <param name="entityOrList"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtSerializer.Serialize(Rafy.Domain.IDomainComponent,System.IO.TextWriter)">
            <summary>
            序列化指定的实体元素到指定的 TextWriter 中。
            </summary>
            <param name="entityOrList"></param>
            <param name="textWriter"></param>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtSerializer.Serialize(Rafy.Domain.IDomainComponent,Newtonsoft.Json.JsonTextWriter)">
            <summary>
            序列化指定的实体元素到指定的 JsonTextWriter 中。
            </summary>
            <param name="entityOrList">The entity or list.</param>
            <param name="jsonWriter">The json writer.</param>
            <exception cref="T:System.ArgumentNullException">jsonWriter</exception>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtSerializer.SerializeEntity(Rafy.Domain.Entity)">
            <summary>
            向 JSON 中序列化指定实体容。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtSerializer.SerializeEntityContent(Rafy.Domain.Entity)">
            <summary>
            向 JSON 中序列化指定实体的所有内容。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtSerializer.SerializeCompiledProperties(Rafy.Domain.Entity)">
            <summary>
            序列化所有的编译期属性。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtSerializer.SerializeDynamicProperties(Rafy.Domain.Entity)">
            <summary>
            序列化所有的编译期属性。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtSerializer.SerializeTreeChildren(Rafy.Domain.Entity.EntityTreeChildren)">
            <summary>
            序列化实体的树子节点列表属性。
            </summary>
            <param name="treeChildren"></param>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtSerializer.SerializeProperty(Rafy.Domain.IProperty,System.Object)">
            <summary>
            序列化某个指定的属性
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtSerializer.SerializeValue(System.Object)">
            <summary>
            序列化某个指定的属性的值。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtSerializer.SerializeOuterList(Rafy.Domain.EntityList)">
            <summary>
            序列化最外层的 EntityList。需要处理分页的信息。
            </summary>
            <param name="entityList"></param>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtSerializer.WritePropertyName(System.String)">
            <summary>
            向 JSON 中写入某个指定的属性。
            </summary>
            <param name="property"></param>
        </member>
        <member name="T:Rafy.Domain.Serialization.Json.EnumSerializationMode">
            <summary>
            枚举的输出模式。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Serialization.Json.EnumSerializationMode.Integer">
            <summary>
            输出整形。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Serialization.Json.EnumSerializationMode.String">
            <summary>
            以字符串的形式输出。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Serialization.Json.EnumSerializationMode.EnumLabel">
            <summary>
            在枚举上标记的 Label。
            如果枚举没有标记 <see cref="T:Rafy.MetaModel.Attributes.LabelAttribute"/>，则直接输出名字。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Serialization.SerializationEntityGraph.CreateSerializer(Rafy.Domain.Entity)">
            <summary>
            为指定的实体创建一个 DataContractSerializer。
            此过程会通过引用属性、列表属性，递归搜索实体类中所涉及到的其它所有实体类型，
            并传递给 DataContractSerializer 作为已知类型，否则，将无法序列化。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Serialization.SerializationEntityGraph.DeepSearch(Rafy.Domain.Entity)">
            <summary>
            通过引用属性、列表属性，递归搜索实体类中所涉及到的所有实体类型。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.TreeHelper.FullAddIntoList(Rafy.Domain.ITreeComponent,System.Collections.Generic.IList{Rafy.Domain.Entity})">
            <summary>
            先让树完整加载，然后再把树中的节点全部加入到指定的列表中。
            </summary>
            <param name="tree"></param>
            <param name="nodes"></param>
        </member>
        <member name="M:Rafy.Domain.TreeHelper.LoadTreeData(System.Collections.Generic.IList{Rafy.Domain.Entity},System.Collections.IEnumerable,Rafy.MetaModel.TreeIndexOption)">
            <summary>
            以树节点加载算法加载数据。
            </summary>
            <param name="list">The list.</param>
            <param name="nodes">The nodes.</param>
            <param name="indexOption">The index option.</param>
        </member>
        <member name="M:Rafy.Domain.TreeHelper.TryAddToList(System.Collections.Generic.IList{Rafy.Domain.Entity},Rafy.Domain.Entity,Rafy.MetaModel.TreeIndexOption)">
            <summary>
            必须要同一级的节点才能加入到实体列表中。
            Test：TET_Query_LoadSubTreeIgnoreOtherNodes
            </summary>
            <param name="list"></param>
            <param name="node"></param>
            <param name="indexOption"></param>
        </member>
        <member name="T:Rafy.Domain.Validation.ValidationHelper">
            <summary>
            实体验证的帮助方法。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationHelper.Revalidate(Rafy.Domain.Entity,Rafy.Domain.IProperty[])">
            <summary>
            通知上层应用，需要重新验证某个指定的属性。
            一般在某个属性变更时调用此方法来通知另一属性需要进行验证。
            </summary>
            <param name="entity">The entity.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationHelper.Revalidate(Rafy.Domain.Entity,Rafy.Domain.IProperty)">
            <summary>
            通知上层应用，需要重新验证某个指定的属性。
            一般在某个属性变更时调用此方法来通知另一属性需要进行验证。
            </summary>
            <param name="entity">The entity.</param>
            <param name="property">The property.</param>
        </member>
        <member name="T:Rafy.Domain.Validation.BrokenRule">
            <summary>
            表示触犯的规则的明细。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.BrokenRule.Rule">
            <summary>
            触犯的规则。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.BrokenRule.Description">
            <summary>
            触发规则的描述信息。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.BrokenRule.Property">
            <summary>
            如果这是某个属性关联的规则参数，则这个属性表示关联的托管属性
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.BrokenRulesCollection">
            <summary>
            违反的业务规则的集合。
            </summary>
            <remarks>
            This collection is readonly and can be safely made available
            to code outside the business object such as the UI. This allows
            external code, such as a UI, to display the list of broken rules
            to the user.
            </remarks>
        </member>
        <member name="M:Rafy.Domain.Validation.BrokenRulesCollection.ToString">
            <summary>
            Returns the text of all broken rule descriptions, each
            separated by a <see cref="P:System.Environment.NewLine" />.
            </summary>
            <returns>The text of all broken rule descriptions.</returns>
        </member>
        <member name="M:Rafy.Domain.Validation.BrokenRulesCollection.ToString(Rafy.MetaModel.RuleLevel)">
            <summary>
            Returns the text of all broken rule descriptions
            for a specific severity, each
            separated by a <see cref="P:System.Environment.NewLine" />.
            </summary>
            <param name="level">The severity of rules to
            include in the result.</param>
            <returns>The text of all broken rule descriptions
            matching the specified severtiy.</returns>
        </member>
        <member name="M:Rafy.Domain.Validation.BrokenRulesCollection.ToString(System.String)">
            <summary>
            Returns the text of all broken rule descriptions.
            </summary>
            <param name="separator">
            String to place between each broken rule description.
            </param>
            <returns>The text of all broken rule descriptions.</returns>
        </member>
        <member name="M:Rafy.Domain.Validation.BrokenRulesCollection.ToString(System.String,Rafy.MetaModel.RuleLevel)">
            <summary>
            Returns the text of all broken rule descriptions
            for a specific severity.
            </summary>
            <param name="separator">
            String to place between each broken rule description.
            </param>
            <param name="level">The severity of rules to
            include in the result.</param>
            <returns>The text of all broken rule descriptions
            matching the specified severtiy.</returns>
        </member>
        <member name="T:Rafy.Domain.Validation.HandlerRule">
            <summary>
            一个使用指定代理方法的验证器。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.HandlerRule.Handler">
            <summary>
            验证逻辑代理方法。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.HandlerRule.NeedDataSource">
            <summary>
            验证逻辑是否需要连接数据源。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.NotDuplicateRule">
            <summary>
            限制实体的某一个或几个属性的值在数据库中不重复的规则。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.NotDuplicateRule.ConnectToDataSource">
            <summary>
            本规则需要连接数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.NotDuplicateRule.Properties">
            <summary>
            可以设置多个属性进行验证。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.NotDuplicateRule.MessageBuilder">
            <summary>
            设置此属性可以自定义要显示的错误信息。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Validation.NotDuplicateRule.Validate(Rafy.Domain.Entity,Rafy.MetaModel.RuleArgs)">
            <summary>
            限制实体的某一个或几个属性的值在数据库中不存在的规则。
            </summary>
            <param name="entity"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.Domain.Validation.NotDuplicateRule.InitProperties(Rafy.MetaModel.RuleArgs)">
            <summary>
            获取传入的要验证的属性列表
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.Domain.Validation.NotDuplicateRule.AddToCriteria(Rafy.Domain.Entity,Rafy.Domain.CommonQueryCriteria)">
            <summary>
            根据传入的属性列表，来构造 CommonQueryCriteria
            返回是否有非空属性需要验证。
            </summary>
            <param name="entity"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.Validation.NotUsedByReferenceRule">
            <summary>
            限制规则：实体的键必须没有被指定的引用属性对应的主表中的行所使用。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Validation.NotUsedByReferenceRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.Validation.NotUsedByReferenceRule"/> class.
            </summary>
        </member>
        <member name="M:Rafy.Domain.Validation.NotUsedByReferenceRule.#ctor(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.Validation.NotUsedByReferenceRule"/> class.
            </summary>
            <param name="refProperty">可以是引用属性，也可以是冗余属性。.</param>
        </member>
        <member name="P:Rafy.Domain.Validation.NotUsedByReferenceRule.ConnectToDataSource">
            <summary>
            本规则需要连接数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.NotUsedByReferenceRule.ReferenceProperty">
            <summary>
            需要检查的
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.NotUsedByReferenceRule.MessageBuilder">
            <summary>
            设置此属性可以自定义要显示的错误信息。
            long 参数表示已经被使用的次数。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.NumberRangeRule">
            <summary>
            限制某数值类型属性的数据范围的规则。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.NumberRangeRule.Min">
            <summary>
            最小值。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.NumberRangeRule.Max">
            <summary>
            最小值。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.NumberRangeRule.MessageBuilder">
            <summary>
            设置此属性可以自定义要显示的错误信息。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.PositiveNumberRule">
            <summary>
            限制某数值类型属性正数限制规则。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.PositiveNumberRule.MessageBuilder">
            <summary>
            设置此属性可以自定义要显示的错误信息。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.RegexMatchRule">
            <summary>
            限制某数值类型属性最小的数据限制规则。
            注意：此规则不对空字符串作判断。如果需要值非空的约束，请使用 RequiredRule。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.RegexMatchRule.Regex">
            <summary>
            最小值。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.RegexMatchRule.RegexLabel">
            <summary>
            正则的名称。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.RegexMatchRule.MessageBuilder">
            <summary>
            设置此属性可以自定义要显示的错误信息。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.RequiredRule">
            <summary>
            约束某属性不能为空值（null）。
            字符串还应该不能为空字符串。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.RequiredRule.MessageBuilder">
            <summary>
            设置此属性可以自定义要显示的错误信息。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.StringLengthRangeRule">
            <summary>
            限制某字符串属性的字符长度范围的规则。
            
            如果字段串属性的值是 null 或空字段串，则验证规则会失效。此时可使用 <see cref="T:Rafy.Domain.Validation.RequiredRule"/> 类型单独验证。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.StringLengthRangeRule.Min">
            <summary>
            最小长度。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.StringLengthRangeRule.Max">
            <summary>
            最大长度。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.StringLengthRangeRule.MessageBuilder">
            <summary>
            设置此属性可以自定义要显示的错误信息。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.ValidationRule">
            <summary>
            验证规则对象
            
            注意，验证规则的对象对于一个实体来说，是单例的。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.ValidationRule.ConnectToDataSource">
            <summary>
            子类重写此属性指示本规则中是否需要连接数据仓库。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationRule.Validate(Rafy.Domain.Entity,Rafy.MetaModel.RuleArgs)">
            <summary>
            子类重写此方法实现验证规则逻辑。
            当验证出错时，需要设置 e.BrokenDescription。
            </summary>
            <param name="entity"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationRule.Display(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            如果当前 Rafy 运行时环境中，已经拥有 UI 层界面的元数据，则获取属性对应的的显示名称，并进行翻译后返回。
            否则，直接返回以下格式的字符串，方便替换：[属性名称]。（服务端一般都没有 UI 层元数据。）
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationRule.Display(System.Type)">
            <summary>
            如果当前 Rafy 运行时环境中，已经拥有 UI 层界面的元数据，则获取实体对应的的显示名称，并进行翻译后返回。
            否则，直接返回以下格式的字符串，方便替换：[实体类型名称]。（服务端一般都没有 UI 层元数据。）
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.Validation.ITypeValidationsHost">
            <summary>
            类型规则的存储器。
            内部使用。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.ITypeValidationsHost.Rules">
            <summary>
            类型规则集合
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.ITypeValidationsHost.TypeRulesAdded">
            <summary>
            是否已经添加了所有的类型规则。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.Rule">
            <summary>
            Tracks all information for a rule.
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.RulesContainer">
            <summary>
            简单的规则列表。
            
            提供排序的方法
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.ValidationException">
            <summary>
            Exception class indicating that there was a validation
            problem with a business object.
            </summary>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationException.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationException.#ctor(System.String)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Message describing the exception.</param>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Message describing the exception.</param>
            <param name="innerException">Inner exception object.</param>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the object for serialization.
            </summary>
            <param name="context">Serialization context.</param>
            <param name="info">Serialization info.</param>
        </member>
        <member name="T:Rafy.Domain.Validation.ValidationRulesManager">
            <summary>
            Maintains rule methods for a business object
            or business object type.
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.ValidationRulesManager.TypeRules">
            <summary>
            这些规则不与某个属性关联，是直接作用在整个实体上的。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationRulesManager.GetRulesForProperty(Rafy.ManagedProperty.IManagedProperty,System.Boolean)">
            <summary>
            获取指定属性对应的属性规则容器。
            </summary>
            <param name="property">托管属性。</param>
            <param name="createList">如果还没有创建容器，是否需要同时创建该容器。</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.Validation.ValidationRulesManager.TypeRulesCount">
            <summary>
            所有类型规则的总数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.ValidationRulesManager.PropertyRulesCount">
            <summary>
            所有属性规则的总数。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.Validator">
            <summary>
            规则验证器
            </summary>
        </member>
        <member name="F:Rafy.Domain.Validation.Validator.DefaultActions">
            <summary>
            默认的验证行为：ValidatorActions.ValidateChildren | ValidatorActions.StopOnFirstBroken。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Validation.Validator.Validate(Rafy.Domain.Entity,Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            检查某个属性是否满足规则
            </summary>
            <param name="target">要验证的实体。</param>
            <param name="property">托管属性</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">target
            or
            property</exception>
        </member>
        <member name="M:Rafy.Domain.Validation.Validator.Validate(Rafy.Domain.Entity,Rafy.ManagedProperty.IManagedProperty,Rafy.Domain.Validation.ValidatorActions)">
            <summary>
            检查某个属性是否满足规则
            </summary>
            <param name="target">要验证的实体。</param>
            <param name="property">托管属性</param>
            <param name="actions">验证时的行为。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">target
            or
            property</exception>
        </member>
        <member name="M:Rafy.Domain.Validation.Validator.Validate(Rafy.Domain.Entity,Rafy.ManagedProperty.IManagedProperty,System.Func{Rafy.MetaModel.IRule,System.Boolean})">
            <summary>
            检查某个属性是否满足规则
            </summary>
            <param name="target">要验证的实体。</param>
            <param name="property">托管属性</param>
            <param name="ruleFilter">要验证的规则的过滤器。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">target
            or
            property</exception>
        </member>
        <member name="M:Rafy.Domain.Validation.Validator.Validate(Rafy.Domain.Entity,Rafy.ManagedProperty.IManagedProperty,Rafy.Domain.Validation.ValidatorActions,System.Func{Rafy.MetaModel.IRule,System.Boolean})">
            <summary>
            检查某个属性是否满足规则
            </summary>
            <param name="target">要验证的实体。</param>
            <param name="property">托管属性</param>
            <param name="actions">验证时的行为。</param>
            <param name="ruleFilter">要验证的规则的过滤器。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">target
            or
            property</exception>
        </member>
        <member name="M:Rafy.Domain.Validation.Validator.Validate(Rafy.Domain.Entity)">
            <summary>
            检查整个实体对象是否满足规则
            </summary>
            <param name="target">要验证的实体。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">target</exception>
        </member>
        <member name="M:Rafy.Domain.Validation.Validator.Validate(Rafy.Domain.Entity,Rafy.Domain.Validation.ValidatorActions)">
            <summary>
            检查整个实体对象是否满足规则
            </summary>
            <param name="target">要验证的实体。</param>
            <param name="actions">验证时的行为。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">target</exception>
        </member>
        <member name="M:Rafy.Domain.Validation.Validator.Validate(Rafy.Domain.Entity,System.Func{Rafy.MetaModel.IRule,System.Boolean})">
            <summary>
            检查整个实体对象是否满足规则
            </summary>
            <param name="target">要验证的实体。</param>
            <param name="ruleFilter">要验证的规则的过滤器。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">target</exception>
        </member>
        <member name="M:Rafy.Domain.Validation.Validator.Validate(Rafy.Domain.Entity,System.Func{Rafy.MetaModel.IRule,System.Boolean},Rafy.Domain.Validation.ValidatorActions)">
            <summary>
            检查整个实体对象是否满足规则
            </summary>
            <param name="target">要验证的实体。</param>
            <param name="ruleFilter">要验证的规则的过滤器。</param>
            <param name="actions">验证时的行为。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">target</exception>
        </member>
        <member name="T:Rafy.Domain.Validation.ValidatorActions">
            <summary>
            验证时的行为
            </summary>
        </member>
        <member name="F:Rafy.Domain.Validation.ValidatorActions.None">
            <summary>
            默认没有任何行为。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Validation.ValidatorActions.ValidateChildren">
            <summary>
            验证整个实体时，是否需要验证该实体的组合子实体。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Validation.ValidatorActions.IgnoreDataSourceValidations">
            <summary>
            是否需要验证连接数据源的验证规则。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Validation.ValidatorActions.StopOnFirstBroken">
            <summary>
            是否在第一规则被破坏时，即刻停止。
            </summary>
        </member>
        <member name="T:Rafy.Domain.PropertyOperator">
            <summary>
            属性的对比操作符
            </summary>
        </member>
        <member name="T:Rafy.Domain.RafyDomainPlugin">
            <summary>
            Rafy Domain 本身也是一个 DomainPlugin
            </summary>
        </member>
        <member name="T:Rafy.Domain.ContractAttribute">
            <summary>
            表明某个类型是一个服务的契约。
            </summary>
            暂时没有用到，未来可能需要对所有的契约遍历。
        </member>
        <member name="T:Rafy.Domain.ContractImplAttribute">
            <summary>
            标记在服务类型上的契约实现标记。
            用于描述一个服务实现了何种契约，以及相应的具体元数据。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ContractImplAttribute.#ctor">
            <summary>
            构造函数。用于构造一个使用当前服务为契约的契约实现标记。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ContractImplAttribute.#ctor(System.Type)">
            <summary>
            构造函数。用于构造一个使用指定契约的契约实现标记。
            </summary>
            <param name="contractType"></param>
        </member>
        <member name="P:Rafy.Domain.ContractImplAttribute.ContractType">
            <summary>
            实现的契约的类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.ContractImplAttribute.Version">
            <summary>
            服务实现的版本号
            默认版本号是 1.0.0.0。
            </summary>
        </member>
        <member name="T:Rafy.Domain.DomainController">
            <summary>
            领域层业务逻辑控制器。
            工作在 DDD 经典分层中的领域层中。
            在具体的子类中编写具体业务的控制逻辑。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DomainController.OnAlwaysDependon(Rafy.Domain.DomainController)">
            <summary>
            如果使用了 Depend().On() 方法创建了监听关系，则需要重写此方法来建立确切的事件监听程序。
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:Rafy.Domain.DomainController.Depend``1">
            <summary>
            在子类的静态构造函数中，使用此方法来建立其它控制器的事件监听程序。
            <![CDATA[
            使用方法：
            public class StockController : DomainController
            {
                public event EventHandler StockChanged;
            
                protected virtual void OnStockChanged()
                {
                    var handler = this.StockChanged;
                    if (handler != null) handler(this, EventArgs.Empty);
                }
            }
            
            public class RecieveController : DomainController
            {
                static RecieveController()
                {
                    Depend<RecieveController>().On<StockController>();
                }
            
                protected override void OnAlwaysDependon(DomainController controller)
                {
                    var sc = controller as StockController;
                    if (sc != null)
                    {
                        sc.StockChanged += OnStockChanged;
                    }
                }
            
                private void OnStockChanged(object sender, EventArgs e)
                {
                    //根据库存变化信息，来实现特定功能
                }
            }
            ]]>
            </summary>
            <typeparam name="TController">子类的类型。</typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DomainController.ControllerDependency.On``1">
            <summary>
            始终需要监听指定的控制器类型。
            </summary>
            <typeparam name="TListendController"></typeparam>
        </member>
        <member name="M:Rafy.Domain.DomainController.ControllerDependency.On(System.Type[])">
            <summary>
            始终需要监听指定的控制器类型。
            </summary>
            <param name="controllerTypes"></param>
        </member>
        <member name="T:Rafy.Domain.DomainControllerFactory">
            <summary>
            Domain Controller Factory
            
            实现以下功能：
            * DomainController 的创建。
            * DomainController 的覆盖。
            * 管理控制器之间的依赖。（在创建 DomainController 时，为其建立监听程序。）
            </summary>
        </member>
        <member name="M:Rafy.Domain.DomainControllerFactory.Create``1">
            <summary>
            创建指定类型的控制器。
            </summary>
            <typeparam name="TController"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DomainControllerFactory.Create(System.Type)">
            <summary>
            创建指定类型的控制器。
            </summary>
            <param name="controllerType"></param>
            <returns></returns>
        </member>
        <member name="E:Rafy.Domain.DomainControllerFactory.ControllerCreated">
            <summary>
            控制器创建成功的事件。
            </summary>
        </member>
        <member name="F:Rafy.Domain.DomainControllerFactory._overriedList">
            <summary>
            key: parent,
            value: child
            </summary>
        </member>
        <member name="M:Rafy.Domain.DomainControllerFactory.Override``2">
            <summary>
            使用子控制器来覆盖父控制器。
            </summary>
            <typeparam name="TParent"></typeparam>
            <typeparam name="TChild"></typeparam>
        </member>
        <member name="F:Rafy.Domain.DomainControllerFactory._dependency">
            <summary>
            key: depended
            value: dependee list
            </summary>
        </member>
        <member name="T:Rafy.Domain.ControllerCreatedEventArgs">
            <summary>
            控制器创建成功的事件参数。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ControllerCreatedEventArgs.#ctor(Rafy.Domain.DomainController)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.ControllerCreatedEventArgs"/> class.
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="P:Rafy.Domain.ControllerCreatedEventArgs.Controller">
            <summary>
            被创建的控制器。
            </summary>
        </member>
        <member name="T:Rafy.Domain.DomainException">
            <summary>
            领域逻辑异常
            </summary>
        </member>
        <member name="M:Rafy.Domain.DomainException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.DomainException"/> class.
            </summary>
        </member>
        <member name="M:Rafy.Domain.DomainException.#ctor(Rafy.Result,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.DomainException"/> class.
            </summary>
            <param name="res">The resource.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Rafy.Domain.DomainException.#ctor(Rafy.Result,System.Exception,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.DomainException"/> class.
            </summary>
            <param name="res">The resource.</param>
            <param name="inner">The inner.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Rafy.Domain.DomainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.DomainException"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Rafy.Domain.DomainException.Result">
            <summary>
            表示领域逻辑的异常分支的结果。
            </summary>
        </member>
        <member name="P:Rafy.Domain.DomainException.Parameters">
            <summary>
            如果 <see cref="P:Rafy.Domain.DomainException.Result"/> 中的 <see cref="P:Rafy.Result.Message"/> 是一个格式化字符串，那么这个参数表示对应需要格式化的数据。
            </summary>
        </member>
        <member name="T:Rafy.Domain.FlowService">
            <summary>
            一种过程化服务的基类
            
            过程化简单地指：进行一系列操作，返回是否成功以及相应的提示消息。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ISaveListService">
            <summary>
            一个用于保存实体列表的服务。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ISaveListService.EntityList">
            <summary>
            需要保存的列表。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Service">
            <summary>
            跨 C/S，B/S 的服务基类
            
            注意，如果该服务要被使用到 B/S 上，输入和输出参数都应该是基本的数据类型、EntityList 类型。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Service.DataPortalLocation">
            <summary>
            当前服务是否需要在本地运行。（有时需要设置此值来强制服务在客户端运行。）
            
            当在服务端时，默认值为 Local，表示直接在服务端运行。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Service.ExecuteByDataPortal">
            <summary>
            数据门户会调用此方法来实现执行逻辑。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Service.Execute">
            <summary>
            子类重写此方法实现具体的业务逻辑
            </summary>
        </member>
        <member name="M:Rafy.Domain.Service.Invoke">
            <summary>
            调用服务并把返回值转换为指定的类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Service.ReadOutput(Rafy.Domain.IService)">
            <summary>
            使用反射把返回结果的值修改到当前对象上。
            </summary>
            <param name="res"></param>
        </member>
        <member name="M:Rafy.Domain.Service.OnInvoking">
            <summary>
            在服务被调用前发生。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Service.OnInvoked">
            <summary>
            在服务被调用后发生。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ServiceFactory">
            <summary>
            服务工厂
            <remarks>
            本类是线程安全的。
            </remarks>
            </summary>
        </member>
        <member name="M:Rafy.Domain.ServiceFactory.Create``1">
            <summary>
            创建一个具体的服务。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ServiceFactory.Create(System.Type)">
            <summary>
            创建一个具体的服务。
            </summary>
            <param name="contractType">契约类型。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ServiceFactory.Create(System.Type,System.Version)">
            <summary>
            创建一个指定版本的服务。
            </summary>
            <param name="contractType">服务类型.</param>
            <param name="version">需要的服务的版本号.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ServiceLocator">
            <summary>
            服务实现的定位器
            <threadsafety static="true" instance="true"/>
            </summary>
        </member>
        <member name="F:Rafy.Domain.ServiceLocator.ContractImplList._contractType">
            <summary>
            对应这个契约类型
            </summary>
        </member>
        <member name="M:Rafy.Domain.ServiceLocator.ContractImplList.Add(Rafy.Domain.ServiceLocator.ContractImpl)">
            <summary>
            添加一个契约实现到服务中。
            </summary>
            <param name="impl"></param>
        </member>
        <member name="M:Rafy.Domain.ServiceLocator.ContractImplList.Find(System.Version)">
            <summary>
            通过版本号来查找对应的契约实现。
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.DomainHelper">
            <summary>
            领域帮助类。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DomainHelper.IsNotEmpty(System.Object)">
            <summary>
            判断某个值是否非空。
            
            如果是字符串，则检测它是否为非空字符。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DomainHelper.EnumerateAllTypesInAggregation(Rafy.Domain.IRepository)">
            <summary>
            枚举出属于该聚合的所有的实体类型（深度递归）。
            </summary>
            <param name="aggtRepository"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.EntityListEnumerator`1">
            <summary>
            实体列表的强类型遍历器。
            </summary>
            <typeparam name="TEntity">要保证 TEntity 是 Entity 的子类，否则会转换出错。</typeparam>
        </member>
        <member name="T:Rafy.Domain.ValidationDeclarer">
            <summary>
            用于声明验证规则的类型。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ValidationDeclarer.#ctor(System.Type)">
            <summary>
            获取指定实体类型对应的验证规则声明器。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ValidationDeclarer.EntityType">
            <summary>
            对应的实体类型。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ValidationDeclarer.RulesCount">
            <summary>
            获取当前已经声明的规则的个数。
            </summary>
        </member>
        <member name="T:Rafy.Domain.EntityConvention">
            <summary>
            实体类的约定
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntityConvention.GetByCriteriaMethod">
            <summary>
            实体仓库数据层查询根据参数类型进行定位时的方法的约定名称。
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntityConvention.Property_Id">
            <summary>
            目前实体使用的主键属性的名称。Id。
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntityConvention.Property_TreePId">
            <summary>
            自关联属性名
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntityConvention.Property_TreeIndex">
            <summary>
            树型实体的编码
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntityConvention.Property_IsPhantom">
            <summary>
            实体的假删除标识。
            如果没有使用假删除插件，那么这个属性为 null。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityConvention.IsPhantomPluginEnabled">
            <summary>
            是否添加了数据的假删除功能插件。
            </summary>
        </member>
        <member name="T:Rafy.Domain.EntityMatrix">
            <summary>
            实体类型信息项
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityMatrix.EntityType">
            <summary>
            实体类
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityMatrix.ListType">
            <summary>
            实体类对应的列表类
            
            Criteria是没有对应的列表类型的，所以这个属性可能为Null
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityMatrix.RepositoryType">
            <summary>
            实体类对应的仓库类。
            
            如果找不到约定的仓库类，则这个属性为空。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityMatrix.FindByEntity(System.Type)">
            <summary>
            通过实体类找到约定项
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityMatrix.FindByList(System.Type)">
            <summary>
            通过列表类找到约定项
            </summary>
            <param name="listType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityMatrix.FindByRepository(System.Type)">
            <summary>
            通过仓库类找到约定项
            </summary>
            <param name="repositoryType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityMatrix.RepositoryFullName(System.Type)">
            <summary>
            通过约定计算实体类对应的仓库类型的全名称。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.RepositoryForAttribute">
            <summary>
            标记某一个类型是指定的实体对应的仓库类型。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RepositoryForAttribute.EntityType">
            <summary>
            对应的实体类型。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IKeyProvider">
            <summary>
            标识属性相关算法的提供程序
            </summary>
        </member>
        <member name="P:Rafy.Domain.IKeyProvider.KeyType">
            <summary>
            标识属性的属性类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.IKeyProvider.DefaultValue">
            <summary>
            标识属性的默认值
            </summary>
        </member>
        <member name="M:Rafy.Domain.IKeyProvider.GetEmptyIdForRefIdProperty">
            <summary>
            获取一个用于表示空引用的 Id 值。
            
            值类型返回空值：
            int、long: 0
            Guid: Guid.Empty
            引用类型返回 null
            String: null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IKeyProvider.IsAvailable(System.Object)">
            <summary>
            判断给的 Id 值是否表示‘有值’的状态。
            参照：<see cref="M:Rafy.Domain.IKeyProvider.GetEmptyIdForRefIdProperty"/>。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IKeyProvider.NewLocalValue">
            <summary>
            构造一个在本应用程序域中不会重复的主键值。
            这个值只保证在内存中是唯一的，并不保证与持久层中的数据不会重复。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IKeyProvider.ToNullableValue(System.Object)">
            <summary>
            如果是值类型，则需要判断：
            当 <see cref="M:Rafy.Domain.IKeyProvider.IsAvailable(System.Object)"/> 返回 false 时，需要返回对应的可空类型的值。如传入 0，返回 default(int?)。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.IEntityWithId">
            <summary>
            实体都必须实现此接口。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEntityWithId.Id">
            <summary>
            唯一的标识属性
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEntityWithId.IdProvider">
            <summary>
            标识属性的算法提供器。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IService">
            <summary>
            跨 C/S，B/S 的服务
            </summary>
        </member>
        <member name="M:Rafy.Domain.IService.Invoke">
            <summary>
            调用服务。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IFlowService">
            <summary>
            一种过程化服务的基类
            <remarks>
            过程化简单地指：进行一系列操作，返回是否成功以及相应的提示消息。
            </remarks>
            </summary>
        </member>
        <member name="P:Rafy.Domain.IFlowService.Result">
            <summary>
            过程返回的结果。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ServiceInputAttribute">
            <summary>
            服务的输入属性标记。
            
            <remarks>
            默认情况下，服务的属性都是输入属性。当某个属性即是输入也是输出时，才需要标记这个标记。
            </remarks>
            </summary>
        </member>
        <member name="T:Rafy.Domain.ServiceOutputAttribute">
            <summary>
            服务的输出属性标记。
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.AppImplementationBase">
            <summary>
            这个类为 ClientApp、ServerApp、WebApp 等类提供了一致的基类。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.StartupApplication">
            <summary>
            子类在合适的时间调用此方法来启动整个 Rafy 应用程序。
            
            注意，为了支持重新启动，这个类中的所有方法都应该可以运行多次。
            
            但是，第二次及之后的重启，不应该使用同一个 AppImplementationBase 的实例，否则可能会造成插件重复监听同一事件。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.PrepareToStartup">
            <summary>
            此方法中会重置整个 Rafy 环境。这样可以保证各插件的注册机制能再次运行。
            例如，当启动过程中出现异常时，可以重新使用 Startup 来启动应用程序开始全新的启动流程。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.InitEnvironment">
            <summary>
            初始化应用程序的环境。
            子类可在此方法中添加所需的插件、设置 <see cref="P:Rafy.RafyEnvironment.Location"/> 等。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.SetupLanguage">
            <summary>
            设置当前语言
            
            需要在所有 Translator 依赖注入完成后调用。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.CompileMeta">
            <summary>
            初始化必须在初始化期定义的各种元数据。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.StartMainProcess">
            <summary>
            子类重写此方法实现启动主逻辑。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.AllPluginsIntialized">
            <summary>
            所有实体元数据初始化完毕，包括实体元数据之间的关系。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.OnAllPluginsIntialized">
            <summary>
            触发 AllPluginsIntialized 事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.MetaCompiled">
            <summary>
            所有初始化期定义的元数据初始化完成时事件。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.OnMetaCompiled">
            <summary>
            触发 MetaCompiled 事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.ModuleOperations">
            <summary>
            模块的定义先于其它模型的操作。这样可以先设置好模板默认的按钮。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.RaiseModuleOpertions">
            <summary>
            触发 ModuleOperations 事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.ModuleOperationsCompleted">
            <summary>
            模块的定义完成
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.OnModuleOpertionsCompleted">
            <summary>
            触发 ModuleOperationsCompleted 事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.AppMetaCompleted">
            <summary>
            所有初始化工作完成
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.OnAppMetaCompleted">
            <summary>
            触发 AppMetaCompleted 事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.ComposeOperations">
            <summary>
            组件的组合操作。
            组合可以在此事件中添加自己的组合逻辑，例如 A 订阅 B 的某个事件。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.RaiseComposeOperations">
            <summary>
            触发 ComposeOperations 事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.Composed">
            <summary>
            所有组件组合完毕。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.OnComposed">
            <summary>
            触发 Composed 事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.RuntimeStarting">
            <summary>
            应用程序运行时行为开始。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.OnRuntimeStarting">
            <summary>
            触发 RuntimeStarting 事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.MainProcessStarting">
            <summary>
            主过程开始前事件。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.OnMainProcessStarting">
            <summary>
            触发 MainProcessStarting 事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.Exit">
            <summary>
            应用程序完全退出
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.OnExit">
            <summary>
            触发 Exit 事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.StartupCompleted">
            <summary>
            AppStartup 完毕
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.OnStartupCompleted">
            <summary>
            触发 StartupCompleted 事件。
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.Composer">
            <summary>
            组件组合器。
            实现组件间组合的通信机制。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.Composer.ObjectContainer">
            <summary>
            默认的 IOC 容器。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.Composer.ServiceContainer">
            <summary>
            组件的服务容器。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.Composer.EventBus">
            <summary>
            事件总线
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.Composer.RegisterAllPluginsByAttribute">
            <summary>
            组合所有组件中标记了 <see cref="T:Rafy.ComponentModel.ContainerItemAttribute"/> 的类型到 IOC 容器中。
            
            此方法只能调用一次，
            而且应该重写 <see cref="M:Rafy.ComponentModel.AppImplementationBase.RaiseComposeOperations"/> 方法中调用。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.Composer.RegisterByAttribute(Rafy.ComponentModel.IPlugin)">
            <summary>
            注册指定插件中标记了 <see cref="T:Rafy.ComponentModel.ContainerItemAttribute" /> 的类型到 IOC 容器中。
            此方法应该在 ComposeOperations 周期中执行。
            
            <example>
            <![CDATA[
            使用方法
            app.ComposeOperations += app_ComposeOperations;
            void app_ComposeOperations(object sender, EventArgs e)
            {
                //直接通过 ContainerItemAttribute 注册整个程序集。
                //Composer.AutoRegisterByContainerItemAttribute(this);
            
                //使用 ObjectContainer 来注册。
                //var container = Composer.ObjectContainer;
                //container.RegisterType<IPlugin, UnityAdapterPlugin>();
            
                //引用 Rafy.ComponentModel.UnityAdapter 插件后，还可以使用 UnityContainer 来注册，并同时注册拦截器。
                //var container = UnityAdapterHelper.GetUnityContainer(Composer.ObjectContainer);
                //container.RegisterType<IPlugin, UnityAdapterPlugin>();
            }
            ]]>
            </example>
            </summary>
            <param name="plugin">The plugin.</param>
            <exception cref="T:System.ArgumentNullException">plugin</exception>
        </member>
        <member name="T:Rafy.ComponentModel.ContainerItemAttribute">
            <summary>
            在某个类型上指定的标记，说明该类型将会注册到 IOC 默认容器中。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.ContainerItemAttribute.#ctor(System.Type)">
            <summary>
            构造器。
            </summary>
            <param name="provideFor">为这个类型提供实例。</param>
        </member>
        <member name="P:Rafy.ComponentModel.ContainerItemAttribute.ProvideFor">
            <summary>
            为这个类型提供实例。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.ContainerItemAttribute.RegisterWay">
            <summary>
            注册到 IOC 容器中的方式。默认值为 <see cref="F:Rafy.ComponentModel.RegisterWay.Type"/>。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.ContainerItemAttribute.Key">
            <summary>
            注册时使用的键。
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.RegisterWay">
            <summary>
            注册到 IOC 容器中的方式。
            </summary>
        </member>
        <member name="F:Rafy.ComponentModel.RegisterWay.Instance">
            <summary>
            以单一实例的方式注册。
            </summary>
        </member>
        <member name="F:Rafy.ComponentModel.RegisterWay.Type">
            <summary>
            以类型的方式注册。
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.IEventBus">
            <summary>
            事件总线
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.IEventBus.Publish(System.Object)">
            <summary>
            向总线发布一个指定的事件。
            </summary>
            <param name="eventModel"></param>
        </member>
        <member name="M:Rafy.ComponentModel.IEventBus.Publish``1(``0)">
            <summary>
            向总线发布一个指定的事件。
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="eventModel"></param>
        </member>
        <member name="M:Rafy.ComponentModel.IEventBus.Subscribe``1(System.Object,System.Action{``0})">
            <summary>
            向总线订阅一个指定的事件。
            </summary>
            <typeparam name="TEvent">事件类型。</typeparam>
            <param name="owner">事件的监听者。</param>
            <param name="handler">监听函数。</param>
        </member>
        <member name="M:Rafy.ComponentModel.IEventBus.Unsubscribe``1(System.Object)">
            <summary>
            向总线取消一个指定的事件的订阅。
            </summary>
            <typeparam name="TEvent">事件类型。</typeparam>
            <param name="owner">事件的监听者。</param>
        </member>
        <member name="M:Rafy.ComponentModel.IEventBus.GetSubscribers``1">
            <summary>
            获取指定事件的所有监听者。
            </summary>
            <typeparam name="TEvent">指定的事件类型。</typeparam>
            <returns></returns>
        </member>
        <member name="T:Rafy.ComponentModel.IEventSubscribers">
            <summary>
            某个事件的处理者列表。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.IEventSubscribers.EventType">
            <summary>
            对应的事件类型。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.IEventSubscribers.Count">
            <summary>
            返回当前已有的监听者个数。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.IEventSubscribers.Publish(System.Object)">
            <summary>
            直接向所有监听者发布该事件。
            </summary>
            <param name="eventModel"></param>
        </member>
        <member name="T:Rafy.ComponentModel.IObjectContainer">
            <summary>
            IOC 容器
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.IObjectContainer.ResolveAll(System.Type)">
            <summary>
            如果某个服务有多个实例，则可以使用此方法来获取所有的实例。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.IObjectContainer.Resolve(System.Type,System.String)">
            <summary>
            如果某个服务有多个实例，则可以通过一个键去获取对应的服务实例。
            </summary>
            <param name="type"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.IObjectContainer.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            注册唯一实例
            </summary>
            <param name="type"></param>
            <param name="instance"></param>
            <param name="key">如果有必须，则传入实例的键。</param>
        </member>
        <member name="M:Rafy.ComponentModel.IObjectContainer.RegisterInstance(System.Type,System.Type,System.String)">
            <summary>
            注册唯一实例
            </summary>
            <param name="type">The type.</param>
            <param name="instanceType">唯一实例的类型，该类型的实例会在第一次使用时被创建。</param>
            <param name="key">如果有必须，则传入实例的键。</param>
        </member>
        <member name="M:Rafy.ComponentModel.IObjectContainer.RegisterType(System.Type,System.Type,System.String)">
            <summary>
            注册类型
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="key">如果有必须，则传入实例的键。否则传入 null。</param>
        </member>
        <member name="T:Rafy.ComponentModel.IServiceContainer">
            <summary>
            服务容器
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.IServiceContainer.GetAllInstances(System.Type)">
            <summary>
            如果某个服务有多个实例，则可以使用此方法来获取所有的实例。
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.IServiceContainer.GetService(System.Type,System.String)">
            <summary>
            如果某个服务有多个实例，则可以通过一个键去获取对应的服务实例。
            </summary>
            <param name="serviceType"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.ComponentModel.IObjectContainerFactory">
            <summary>
            IOC 容器工厂。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.IObjectContainerFactory.CreateContainer">
            <summary>
            创建一个独立的的 IOC 容器
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.ComponentModel.CompositionExtension">
            <summary>
            IServiceContainer 扩展方法集
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.CompositionExtension.GetService``1(System.IServiceProvider)">
            <summary>
            获取指定类型的实例。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sp"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.CompositionExtension.GetService``1(Rafy.ComponentModel.IServiceContainer,System.String)">
            <summary>
            获取指定类型指定键名的实例。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sp"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.CompositionExtension.GetAllInstances``1(Rafy.ComponentModel.IServiceContainer)">
            <summary>
            获取指定类型的所有实例。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sp"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.CompositionExtension.Resolve``1(Rafy.ComponentModel.IObjectContainer)">
            <summary>
            获取指定类型的实例。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.CompositionExtension.Resolve``1(Rafy.ComponentModel.IObjectContainer,System.String)">
            <summary>
            获取指定类型指定键名的实例。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.CompositionExtension.ResolveAll``1(Rafy.ComponentModel.IObjectContainer)">
            <summary>
            获取指定类型的所有实例。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.CompositionExtension.RegisterInstance``1(Rafy.ComponentModel.IObjectContainer,``0,System.String)">
            <summary>
            注册唯一实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container">The container.</param>
            <param name="instance">The instance.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Rafy.ComponentModel.CompositionExtension.RegisterType``2(Rafy.ComponentModel.IObjectContainer,System.String)">
            <summary>
            注册类型
            </summary>
            <typeparam name="TFrom">The type of the interface.</typeparam>
            <typeparam name="TTo">The type of the class.</typeparam>
            <param name="container">The container.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rafy.ComponentModel.ObjectContainerFactory">
            <summary>
            IOC 容器工厂。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.ObjectContainerFactory.CreateContainer">
            <summary>
            创建一个独立的的 IOC 容器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.ObjectContainerFactory.SetProvider(Rafy.ComponentModel.IObjectContainerFactory)">
            <summary>
            指定具体的提供程序
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Rafy.ComponentModel.ObjectContainerToServiceConatinerAdapter">
            <summary>
            从 IObjectContainer 到 IServiceContainer 的适配器。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.ObjectContainerToServiceConatinerAdapter.#ctor(Rafy.ComponentModel.IObjectContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.ComponentModel.ObjectContainerToServiceConatinerAdapter"/> class.
            </summary>
            <param name="container">The container.</param>
            <exception cref="T:System.ArgumentNullException">container</exception>
        </member>
        <member name="M:Rafy.ComponentModel.ObjectContainerToServiceConatinerAdapter.GetAllInstances(System.Type)">
            <summary>
            如果某个服务有多个实例，则可以使用此方法来获取所有的实例。
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.ObjectContainerToServiceConatinerAdapter.GetService(System.Type,System.String)">
            <summary>
            如果某个服务有多个实例，则可以通过一个键去获取对应的服务实例。
            </summary>
            <param name="serviceType"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.ObjectContainerToServiceConatinerAdapter.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType" />.-or- null if there is no service object of type <paramref name="serviceType" />.
            </returns>
        </member>
        <member name="T:Rafy.ComponentModel.IApp">
            <summary>
            应用程序生成周期定义
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.AllPluginsIntialized">
            <summary>
            所有实体元数据初始化完毕，包括实体元数据之间的关系。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.MetaCompiled">
            <summary>
            所有初始化期定义的元数据初始化完成时事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.ModuleOperations">
            <summary>
            模块的定义先于其它模型的操作。这样可以先设置好模板默认的按钮。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.ModuleOperationsCompleted">
            <summary>
            模块的定义完成
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.AppMetaCompleted">
            <summary>
            所有初始化工作完成
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.ComposeOperations">
            <summary>
            组件的组合操作。
            组合可以在此事件中添加自己的组合逻辑，例如 A 订阅 B 的某个事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.Composed">
            <summary>
            所有组件组合完毕。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.RuntimeStarting">
            <summary>
            应用程序运行时行为开始。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.MainProcessStarting">
            <summary>
            主过程开始前事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.StartupCompleted">
            <summary>
            AppStartup 完毕
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.Exit">
            <summary>
            应用程序完全退出
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.IClientApp">
            <summary>
            客户端应用程序生命周期定义
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IClientApp.CommandMetaIntialized">
            <summary>
            所有命令元数据初始化完成
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IClientApp.LoginSuccessed">
            <summary>
            登录成功，主窗口开始显示
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IClientApp.LoginFailed">
            <summary>
            登录失败，准备退出
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.IClientApp.ShowMessage(System.String,System.String)">
            <summary>
            显示某个应用程序消息。
            </summary>
            <param name="message"></param>
            <param name="title"></param>
        </member>
        <member name="M:Rafy.ComponentModel.IClientApp.Shutdown">
            <summary>
            关闭应用程序
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.IServerApp">
            <summary>
            服务端应用程序生命周期定义
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.PluginCollection">
            <summary>
            使用代码添加的插件程序集。
            只是以插件机制加载，但本质上是必需的，并非插件。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.PluginCollection.IsLocked">
            <summary>
            表示当前的插件集合是否已经被锁定（不可再修改）。
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.DomainPlugin">
            <summary>
            领域实体插件程序集基类。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.DomainPlugin.Assembly">
            <summary>
            插件对应的程序集。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.DomainPlugin.Initialize(Rafy.ComponentModel.IApp)">
            <summary>
            <para>插件的初始化方法。                                                                             </para>
            <para>框架会在启动时根据启动级别顺序调用本方法。                                                       </para>
            <para>                                                                                              </para>
            <para>方法有两个职责：                                                                               </para>
            <para>1.依赖注入。                                                                                   </para>
            <para>2.注册 app 生命周期中事件，进行特定的初始化工作。                                                </para>
            <para>                                                                                              </para>
            <para>注意，由于应用程序可能会多次启动，所以相应的插件对象也不是单例的，所以这个方法也可能会被调用多次。   </para>
            <para>在实体这个方法时，开发者应该注意保持这个方法的可重入性。                                          </para>
            </summary>
            <param name="app">应用程序对象。</param>
        </member>
        <member name="T:Rafy.ComponentModel.UIPlugin">
            <summary>
            模块初始化器
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.UIPlugin.Assembly">
            <summary>
            插件对应的程序集。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.UIPlugin.Initialize(Rafy.ComponentModel.IApp)">
            <summary>
            插件的初始化方法。
            框架会在启动时根据启动级别顺序调用本方法。
            
            方法有两个职责：
            1.依赖注入。
            2.注册 app 生命周期中事件，进行特定的初始化工作。
            </summary>
            <param name="app">应用程序对象。</param>
        </member>
        <member name="T:Rafy.ComponentModel.IPlugin">
            <summary>
            插件定义。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.IPlugin.Assembly">
            <summary>
            插件对应的程序集。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.IPlugin.Initialize(Rafy.ComponentModel.IApp)">
            <summary>
            插件的初始化方法。
            框架会在启动时根据启动级别顺序调用本方法。
            
            方法有两个职责：
            1.依赖注入。
            2.注册 app 生命周期中事件，进行特定的初始化工作。
            </summary>
            <param name="app">应用程序对象。</param>
        </member>
        <member name="T:Rafy.ComponentModel.WebOrThreadAppContextProvider">
            <summary>
            基于 HttpContext 实现的上下文提供器。
            每次请求使用一个单独的数据上下文。
            在 WebApi 等一些框架中，会开启异步线程去执行一些序列化的代码，
            这时会找不到 HttpContext.Current 对象，所以只能退而求其次使用线程中的数据。
            </summary>
        </member>
        <member name="T:Rafy.Configuration.DynamicBoolean">
            <summary>
            用于配置中的一些值。
            可以明确指明 Yes/No，如果不指明，则与当前是否为调试状态一致。
            </summary>
        </member>
        <member name="P:Rafy.Configuration.PluginElement.Plugin">
            <summary>
            可以只填写插件程序集的全名称，也可以写出具体的插件类型的全名称。
            </summary>
        </member>
        <member name="P:Rafy.Configuration.WPFConfigurationElement.ShowErrorDetail">
            <summary>
            是否显示错误的详细信息。
            </summary>
        </member>
        <member name="P:Rafy.Configuration.WPFConfigurationElement.Skin">
            <summary>
            使用的皮肤名称。
            </summary>
        </member>
        <member name="P:Rafy.Configuration.RafyConfigurationSection.CurrentCulture">
            <summary>
            当前显示的语言文化。
            如果没有设置本项，表明使用系统自带的语言文化。
            例如：zh-CN、en-US 等。
            </summary>
        </member>
        <member name="P:Rafy.Configuration.RafyConfigurationSection.CollectDevLanguages">
            <summary>
            在当前语言下是否执行收集操作。
            </summary>
        </member>
        <member name="P:Rafy.Configuration.RafyConfigurationSection.DataPortalProxy">
            <summary>
            Gets or sets the full type name (or 'Local') of
            the data portal proxy object to be used when
            communicating with the data portal server.
            </summary>
            <value>Fully qualified assembly/type name of the proxy class
            or 'Local'.</value>
            <returns></returns>
            <remarks>
            <para>
            If this value is empty or null, a new value is read from the 
            application configuration file with the key value 
            "DataPortalProxy".
            </para><para>
            The proxy class must implement SimpleCsla.Server.IDataPortalServer.
            </para><para>
            The value "Local" is a shortcut to running the DataPortal
            "server" in the client process.
            </para><para>
            Other built-in values include:
            <list>
            <item>
            <term>SimpleCsla,SimpleCsla.DataPortalClient.RemotingProxy</term>
            <description>Use .NET Remoting to communicate with the server</description>
            </item>
            <item>
            <term>SimpleCsla,SimpleCsla.DataPortalClient.EnterpriseServicesProxy</term>
            <description>Use Enterprise Services (DCOM) to communicate with the server</description>
            </item>
            <item>
            <term>SimpleCsla,SimpleCsla.DataPortalClient.WebServicesProxy</term>
            <description>Use Web Services (asmx) to communicate with the server</description>
            </item>
            </list>
            Each proxy type does require that the DataPortal server be hosted using the appropriate
            technology. For instance, Web Services and Remoting should be hosted in IIS, while
            Enterprise Services must be hosted in COM+.
            </para>
            </remarks>
        </member>
        <member name="T:Rafy.MetaModel.IRule">
            <summary>
            验证规则及元数据。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.IRule.Property">
            <summary>
            如果这个规则是适用到某个实体属性上，那么这个属性就表示这个实体的属性。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.IRule.Key">
            <summary>
            获取用于表示规则名称。
            </summary>
            <remarks>
            这个名称必须是唯一的，因为它会被用于在 BrokenRules 集合中标识唯一项。
            </remarks>
        </member>
        <member name="P:Rafy.MetaModel.IRule.Meta">
            <summary>
            规则对应的元数据。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.IRule.ValidationRule">
            <summary>
            用于执行验证的规则逻辑。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.EntityStatusScopes">
            <summary>
            表示规则作用于实体的状态的作用范围
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.EntityStatusScopes.Add">
            <summary>
            作用于数据的插入操作。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.EntityStatusScopes.Update">
            <summary>
            作用于数据的更新操作。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.EntityStatusScopes.Delete">
            <summary>
            作用于数据的插入、更新操作。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.IValidationRule">
            <summary>
            验证规则
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.IValidationRule.ConnectToDataSource">
            <summary>
            此属性指示本规则中是否需要连接数据源。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.IValidationRule.Validate(Rafy.ManagedProperty.ManagedPropertyObject,Rafy.MetaModel.RuleArgs)">
            <summary>
            对某个实体进行验证。
            </summary>
            <param name="entity">The entity.</param>
            <param name="e">The RuleArgs.</param>
        </member>
        <member name="T:Rafy.MetaModel.RuleMeta">
            <summary>
            规则的元数据。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.RuleMeta.Priority">
            <summary>
            优先级。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.RuleMeta.Level">
            <summary>
            规则的级别。默认值为：Error。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.RuleMeta.Scope">
            <summary>
            表示规则的作用范围。默认值为：AddOrUpdate。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.RuleMeta.HasScope(Rafy.MetaModel.EntityStatusScopes)">
            <summary>
            判断当前规则是否与指定的范围有重叠。
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.View.WPFEditorNames">
            <summary>
            WPF 中系统自带的编辑器
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.WPFEditorNames.EntitySelection_DropDown">
            <summary>
            列表选择属性编辑器
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.WPFEditorNames.EntitySelection_Popup">
            <summary>
            一个使用弹出列表界面并进行搜索的引用实体属性编辑器。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.WPFEditorNames.EntitySelection_TiledList">
            <summary>
            一个使用平铺的列表来实现的引用实体属性编辑器。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.WPFEditorNames.Memo">
            <summary>
            大文本
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.WebEntityViewMeta">
            <summary>
            Web 界面中的实体视图元数据。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WebEntityViewMeta.PageSize">
            <summary>
            超过 10000 就不分页了。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WebEntityViewMeta.Commands">
            <summary>
            这个界面块中可用的 Web 命令。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WebEntityViewMeta.LockedProperties">
            <summary>
            Web 中需要锁定的列对应的属性列表。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.WebEntityViewMeta.Property(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            根据名字查询实体属性
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.WebEntityViewMeta.Property(System.String)">
            <summary>
            根据名字查询实体属性（忽略大小写）
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.View.WebEntityPropertyViewMeta.WidthFlex">
            <summary>
            用于初始化表格控件的宽度属性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WebEntityPropertyViewMeta.IsReadonly">
            <summary>
            Web 专用
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.ReadonlyIndicator">
            <summary>
            用于检测是否只读的属性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.StringFormat">
            <summary>
            格式化String Column Format
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.EditorName">
            <summary>
            编辑器名
            EditorAttribute中标记
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.GridWidth">
            <summary>
            用于初始化表格控件的宽度属性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.DetailColumnsSpan">
            <summary>
            表单中该属性所占的列数。
            
            只在 DetailLayoutMode.AutoGrid 模式下有用。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.DetailContentWidth">
            <summary>
            表单中该属性所占的格子宽度。
            
            如果值在 0 到 1 之间，表示百分比，只有 DetailLayoutMode.AutoGrid 模式下可用。
            否则表示绝对值。
            
            不指定，则使用系统默认值。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.DetailHeight">
            <summary>
            表单中该属性所占的总高度
            不指定，则使用系统默认宽度。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.DetailLabelSize">
            <summary>
            在 DetailPanel 中显示的 Label 的宽度或者高度。
            不指定，则使用系统默认值。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.DetailNewLine">
            <summary>
            指定某个属性在表单中是否需要开启新行。
            
            此属性只在 DetailLayoutMode.Wrapping 下有用。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.DetailAsHorizontal">
            <summary>
            在 DetailPanel 是否横向布局。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.DisplayDelegate">
            <summary>
            如果当前对象是一个引用属性，则可以指定一个额外的属性来进行代理显示。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.NavigationMeta">
            <summary>
            如果当前属性是一个导航触发属性，则这个属性不为 null。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.DisplayPath">
            <summary>
            用于绑定显示的属性名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.DisplayPathProperties">
            <summary>
            用于绑定显示的属性名
            
            三种情况：
            1.当前属性。
            2.当前引用属性.名称。（如果显示属性为两个，那么第一个一定是引用属性，而第二个则是引用实体上的属性。）
            3.显示代理属性。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.View.WPFEntityViewMeta">
            <summary>
            WPF 界面中的实体视图元数据。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityViewMeta.DetailPanelType">
            <summary>
            生成 DetailPanel 时使用的控件类型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityViewMeta.DetailLabelSize">
            <summary>
            在 DetailPanel 中显示的 Label 的宽度或者高度。
            不指定，则使用系统默认宽度。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityViewMeta.DetailAsHorizontal">
            <summary>
            是否需要表单设置为横向布局
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityViewMeta.DetailLayoutMode">
            <summary>
            表单布局模式。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityViewMeta.DetailGroupingMode">
            <summary>
            表单中属性分组的模式
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityViewMeta.DetailGroups">
            <summary>
            表单中的属性分组信息。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityViewMeta.Commands">
            <summary>
            这个界面块中可用的 WPF 命令。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityViewMeta.ReportPath">
            <summary>
            RDLC 报表文件的路径。
            
            报表 RDLC 文件中默认使用实体作为数据源，数据源的名称必须和实体名相同。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFEntityViewMeta.Property(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            根据名字查询实体属性
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFEntityViewMeta.Property(System.String)">
            <summary>
            根据名字查询实体属性（忽略大小写）
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFEntityViewMeta.DeclareGroup(System.String)">
            <summary>
            使用此方法定义的代码块中，自动设置块内所有属性的 GroupLabel。
            </summary>
            <param name="groupLabel"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.View.WPFDetailPropertyGroup">
            <summary>
            表单中的一个属性组。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFDetailPropertyGroup.GroupLabel">
            <summary>
            分组的名称
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFDetailPropertyGroup.LayoutMode">
            <summary>
            本组属性应该按照什么方式来布局。
            
            如果没有指定这个属性，则表示使用 WPFEntityViewMeta 中定义的 DetailLayoutMode 进行布局。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFDetailPropertyGroup.Properties">
            <summary>
            这个组中的所有属性。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.WebCommandCollection">
            <summary>
            <see cref="T:Rafy.MetaModel.View.WebCommand"/> 的集合。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.WPFCommandCollection">
            <summary>
            <see cref="T:Rafy.MetaModel.View.WPFCommand"/> 的集合。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFCommandCollection.Find(System.Type)">
            <summary>
            在命令中查找指定类型的命令。
            </summary>
            <param name="cmdType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFCommandCollection.Remove(System.Type[])">
            <summary>
            在集合中删除指定类型的命令。
            </summary>
            <param name="commands"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFCommandCollection.Remove(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            在集合中删除指定类型的命令。
            </summary>
            <param name="commands"></param>
        </member>
        <member name="T:Rafy.MetaModel.View.AggtBlocksCollection">
            <summary>
            聚合块集合
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.AggtBlocksCollection.Find(System.Type)">
            <summary>
            在集合中查找第一个某指定实体类型的块。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.View.AggtBlocksCollection.Item(System.Type)">
            <summary>
            在集合中获取第一个某指定实体类型的块。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.AggtBlocksCollection.ReOrder(System.Type[])">
            <summary>
            把指定的实体类型的聚合块从 0 开始摆放。其它的块，则放到最后。
            </summary>
            <param name="types"></param>
        </member>
        <member name="T:Rafy.MetaModel.View.SurrounderCollection">
            <summary>
            环绕块集合
            
            之中定义了方便使用的环绕块查询方法
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.SurrounderCollection.Find(System.String)">
            <summary>
            查找某个名称的第一个环绕块
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.View.SurrounderCollection.Item(System.String)">
            <summary>
            获取某个名称的第一个环绕块
            </summary>
            <param name="surrounderType"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.View.AggtChildrenCollection">
            <summary>
            聚合子块集合。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.BlockType">
            <summary>
            界面块的类型
            
            界面块的类型是可以扩展的。
            注意，自定义的块的值，需要大于 10。（10 以内的值是 Rafy 系统预留块）。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.BlockType.List">
            <summary>
            列表（树型表格、表格）。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.BlockType.Detail">
            <summary>
            详细（表单）
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.BlockType.Report">
            <summary>
            报表、图表
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.BlockType.Id">
            <summary>
            块类型的 Id。
            
            整个系统中必须唯一。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.BlockType.Name">
            <summary>
            块类型的名称
            
            无特别的用处，只为标识。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.BlockType._customTypeFrom">
            <summary>
            自定义块类型从 11 开始。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.BlockType.Register(System.String)">
            <summary>
            通过值和名称构造器
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.View.AggtBlocksRepository">
            <summary>
            系统中所有的聚合块定义都存储在这
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.AggtBlocksRepository.GetModuleBlocks(Rafy.MetaModel.ModuleMeta)">
            <summary>
            创建某个模块定义的界面块
            </summary>
            <param name="moduleMeta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.AggtBlocksRepository.GetDefaultBlocks(System.Type)">
            <summary>
            创建默认的聚合块对象
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.AggtBlocksRepository.GetDefinedBlocks(System.String)">
            <summary>
            创建某个自定义的聚合块
            </summary>
            <param name="blocksName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.AggtBlocksRepository.DefineBlocks(System.String,System.Func{Rafy.MetaModel.ModuleMeta,Rafy.MetaModel.View.AggtBlocks})">
             <summary>
            示例定义：
            var b = new CompositeBlocks
            {
                MainBlock = new Block
                {
                    EntityType = typeof(Book),
                    BlockType = BlockType.Detail
                },
                Children =
                {
                    new ChildBlock{
                        ChildrenPropertyNameSetter = Book.ChapterListProperty
                    }
                }
            };
             </summary>
             <param name="blocksName"></param>
             <param name="blocks"></param>
        </member>
        <member name="T:Rafy.MetaModel.View.Block">
            <summary>
            某个小块的定义
            
            该类可以被 XML 序列化
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.Block.KeyLabel">
            <summary>
            当前块在整个聚合块中的唯一标记。（将被权限系统所使用）
            
            默认使用当前实体类型的 Label 作为此标记。
            如果一个聚合块中出现两个相同的块使用同一实体时，应该手动设置本属性以区分两个块。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.Block._KeyLabelForXml">
            <summary>
            内部使用！！！
            为了简单地满足 XML 序列化，所以写了这个“私有”属性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.Block.EntityType">
            <summary>
            当前块显示的实体类型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.Block._EntityTypeForXml">
            <summary>
            内部使用！！！
            为了简单地满足 XML 序列化，所以写了这个“私有”属性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.Block.ExtendView">
            <summary>
            该块如果不是使用默认视图，则这个属性表示所使用的扩展视图的名称
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.Block.BlockType">
            <summary>
            块类型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.Block.ViewMeta">
            <summary>
            缓存 EVM 的属性（当前块显示的实体类型）
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.Block.UseBlockDefaultCommands(Rafy.MetaModel.View.EntityViewMeta)">
            <summary>
            使用本块中默认的一些按钮。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.Block.CustomViewType">
            <summary>
            如果该块是自定义界面，则此属性表示这个这个自定义的 UI 界面所对应的 LogicalView 类型
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.ChildBlock">
            <summary>
            孩子块
            
            支持 XML 序列化
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.ChildBlock.#ctor(System.String,System.String)">
            <summary>
            构造一个自定义界面孩子块
            </summary>
            <param name="label"></param>
            <param name="customUI"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.ChildBlock.#ctor(Rafy.ManagedProperty.IListProperty)">
            <summary>
            通过一个聚合子实体属性构造一个界面块
            本构造函数直接使用该属性对应实体的默认视图中的名称作用本子块的 Label
            </summary>
            <param name="childrenProperty"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.ChildBlock.#ctor(System.String,Rafy.ManagedProperty.IListProperty)">
            <summary>
            通过一个聚合子实体属性构造一个界面块
            </summary>
            <param name="label"></param>
            <param name="childrenProperty"></param>
        </member>
        <member name="P:Rafy.MetaModel.View.ChildBlock.Label">
            <summary>
            本子块显示的标题
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.ChildBlock.ChildrenProperty">
            <summary>
            子属性一般情况下是一个 IListProperty，
            但是也有可能是一个 IRefProperty
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.ChildBlock.ChildrenPropertyMeta">
            <summary>
            缓存 PropertyMeta 的属性
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.CodeBlocksTemplate">
            <summary>
            一个使用代码结构来生成模板结构的模板基类
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.ReadCodeTemplateOptions.ReadChildren">
            <summary>
            是否需要读取组合子
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.ReadCodeTemplateOptions.ReadQueryPanels">
            <summary>
            是否需要读取查询面板。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.AggtBlocks">
            <summary>
            聚合块定义
            
            该类可以被 XML 序列化
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.AggtBlocks.Surrounders">
            <summary>
            聚合块中的主块的环绕块。
            
            环绕块跟主块没有直接关系。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.AggtBlocks.Children">
            <summary>
            聚合块中主块对应实体的聚合子类的聚合子块。
            
            聚合子块对应的实体跟主块对应的实体是聚合父子关系。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.AggtBlocks.EnumerateAllBlocks">
            <summary>
            深度递归遍历所有的聚合块。
            
            先递归遍历聚合子块，再递归遍历环绕块。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.AggtBlocks.op_Implicit(Rafy.MetaModel.View.Block)~Rafy.MetaModel.View.AggtBlocks">
            <summary>
            一个简单的块也可以直接转换为一个聚合块。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.View.SurrounderBlock">
            <summary>
            环绕块
            
            支持 XML 序列化
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SurrounderBlock.SurrounderType">
            <summary>
            环绕类型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SurrounderBlock.RelationViewType">
            <summary>
            这里可以指定一个 RelationView 的子类，来实现 RelationView 行为的动态扩展。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.ConditionBlock">
            <summary>
            条件面板块
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.NavigationBlock">
            <summary>
            导航面板块
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.LayoutMeta.Class">
            <summary>
            布局类的名称
            不可为 null。
            
            如果是 WPF，则这个字符串表示一个 LayoutMethod 类的子类的 AssemblyQualifiedName
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.LayoutMeta.#ctor(System.Type)">
            <summary>
            本构造函数是 WPF 专用
            </summary>
            <param name="layoutControl"> 该类型需要实现 ILayoutControl 接口 </param>
        </member>
        <member name="P:Rafy.MetaModel.View.LayoutMeta.ParentChildProportion">
            <summary>
            父子的分布比例
            此属性 可空
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.LayoutMeta.IsLayoutChildrenHorizonal">
            <summary>
            是否把聚合子对象横向排列。
            默认为 false。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.ParentChildProportion">
            <summary>
            父子的分布比例
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.ParentChildProportion.Default">
            <summary>
            通过修改这个对象中的值，可以达到修改整个应用程序默认值的效果
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.BlocksTemplate">
            <summary>
            聚合块模板。
            
            模板是同一种视图结构的抽象定义。
            注意：此类及其子类不是线程安全的。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.BlocksTemplate.EntityType">
            <summary>
            当前模板显示的实体类型
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.BlocksTemplate.GetBlocks">
            <summary>
            获取当前模板的结构定义。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.BlocksTemplate.InitViewMeta(Rafy.MetaModel.View.AggtBlocks)">
            <summary>
            对于每一个聚合块，生成其主块中的视图元数据。
            
            子类可重写此方法，并在基类调用之前定义各 blocks 的 ExtendView。
            </summary>
            <param name="blocks"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.BlocksTemplate.OnViewMetaCreated(Rafy.MetaModel.View.Block)">
            <summary>
            当每一个界面块对应的视图元数据生成完成后发生的事件。
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.BlocksTemplate.DefineBlocks">
            <summary>
            子类实现：获取当前模板的结构定义。
            结构定义包括：块间的结构、布局、块对应的视图的扩展名。
            </summary>
            <returns></returns>
        </member>
        <member name="E:Rafy.MetaModel.View.BlocksTemplate.BlocksDefined">
            <summary>
            整个聚合块的元数据生成完毕事件。
            外界可监听此事件，对生成完毕后的视图做最后的修改。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.BlocksTemplate.OnBlocksDefined(Rafy.MetaModel.View.AggtBlocks)">
            <summary>
            整个聚合块的元数据生成完毕后的事件。
            </summary>
            <param name="blocks"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.BlocksTemplate.Clone">
            <summary>
            由于模块并不是线程安全的，所以提供 Clone 方法，方便复制模块
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.View.BlocksDefinedEventArgs">
            <summary>
            整个聚合块的元数据生成完毕事件参数。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.BlocksDefinedEventArgs.Blocks">
            <summary>
            定义好的聚合块
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.WebCommandNames">
            <summary>
            一些内置的 web 命令
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.WebCommandNames.CustomizeUI">
            <summary>
            用于界面配置的命令。
            如果没有添加客户化配置插件，
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.WebCommand">
            <summary>
            Javascript 命令的元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WebCommand.JavascriptCode">
            <summary>
            对应的 javascript 代码
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WebCommand.LabelModified">
            <summary>
            由于 Label 虽然有值，但是不一定要传输到客户端。所以用这个值来分辨是否需要传输。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.WebCommand.Extend">
            <summary>
            继承自哪个类
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WebCommand.Group">
            <summary>
            命令的系统分组类型
            
            常用的分组位置参见类型 <see cref="T:Rafy.MetaModel.View.CommandGroupType"/>
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.CommandCollection`1">
            <summary>
            命令集合
            </summary>
            <typeparam name="TCommand"></typeparam>
        </member>
        <member name="M:Rafy.MetaModel.View.CommandCollection`1.SortByLabel(System.String[])">
            <summary>
            this.SortByLabel("保存","添加","取消")
            </summary>
            <param name="labels"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.CommandCollection`1.Find(System.String)">
            <summary>
            查找指定名称的命令。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.CommandCollection`1.Remove(System.String[])">
            <summary>
            删除指定全称的命令。
            </summary>
            <param name="names"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.CommandCollection`1.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除指定全称的命令。
            </summary>
            <param name="names"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.CommandCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量添加命令集合到本集合中。
            </summary>
            <param name="commands"></param>
        </member>
        <member name="T:Rafy.MetaModel.View.WebCommandRepository">
            <summary>
            所有 Web 命令的集合
            
            这里只存储这些命令的一个原始值。每个类型的视图 EVM 中的 Commands 是这些值的拷贝。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.WebCommandRepository.AddByDirectory(System.String)">
            <summary>
            把某个目录中的 jsCommand 都加入到 Repository 中。
            </summary>
            <param name="directory">
            这个目录中的每一个文件是一个单独的 jsCommand。
            如果要放多个 jsCommand 到一个文件中，请用以下分隔符分开每一个 jsCommand：
            //rafy:commandEnd
            </param>
        </member>
        <member name="M:Rafy.MetaModel.View.WebCommandRepository.AddByAssembly(System.Reflection.Assembly)">
            <summary>
            添加程序集中 Commands 文件夹下的 js Resource。
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.WebCommandRepository.AddByJs(System.String)">
            <summary>
            通过解析 js 代码格式来添加 WebCommand。
            </summary>
            <param name="js"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.WebCommandRepository.CombineAll">
            <summary>
            返回整个 javascript 的合集。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.View.Helper">
            <summary>
            一些静态方法的存放类
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.Helper.Sort``1(System.Collections.Generic.IList{``0},System.Func{``0,System.String},System.String[])">
            <summary>
            对指定的列表按照给定的名字顺序。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="nameGetter"></param>
            <param name="labels">
            指定的名字顺序。
            可以是list的子集。
            </param>
        </member>
        <member name="T:Rafy.MetaModel.View.ViewMetaExtension">
            <summary>
            为元数据扩展的配置 API
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.DomainName(Rafy.MetaModel.View.EntityViewMeta,System.String)">
            <summary>
            设置实体的领域含义。
            </summary>
            <param name="meta"></param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HasDelegate(Rafy.MetaModel.View.EntityViewMeta,Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            设置实体的主显示属性。
            
            例如，用户的主显示属性一般是用户姓名。
            </summary>
            <param name="meta"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.DisableEditing(Rafy.MetaModel.View.EntityViewMeta)">
            <summary>
            设置该实体是否可以在界面上不可编辑
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.EnableEditing(Rafy.MetaModel.View.EntityViewMeta)">
            <summary>
            设置该实体是否可以在界面上可以进行编辑
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HideProperties(Rafy.MetaModel.View.EntityViewMeta,Rafy.ManagedProperty.IManagedProperty[])">
            <summary>
            隐藏所有属性的可见性。
            
            一般使用在扩展视图中。
            </summary>
            <param name="meta"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.GroupBy(Rafy.MetaModel.View.EntityViewMeta,Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            设置实体在列表中显示时，按照哪个属性分组。
            </summary>
            <param name="meta"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.OrderProperties(Rafy.MetaModel.View.EntityViewMeta,System.Int32)">
            <summary>
            使用此方法定义的代码块中，自动根据代码调用的顺序设置属性排列的顺序。
            </summary>
            <param name="meta"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HideAllProperties(Rafy.MetaModel.View.EntityViewMeta)">
            <summary>
            隐藏所有属性。
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HasDetailColumnsCount(Rafy.MetaModel.View.EntityViewMeta,System.Int32)">
            <summary>
            声明在Detail里显示为几列。
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseDetailPanel``1(Rafy.MetaModel.View.WPFEntityViewMeta)">
            <summary>
            使用自定义表单作为表单控件。
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseAutoDetailPanel(Rafy.MetaModel.View.WPFEntityViewMeta)">
            <summary>
            使用动态表单作为表单控件。
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseDetailLayoutMode(Rafy.MetaModel.View.WPFEntityViewMeta,Rafy.MetaModel.View.DetailLayoutMode)">
            <summary>
            声明当前表单使用的布局模式。
            </summary>
            <param name="meta">The meta.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseDetailLayoutMode(Rafy.MetaModel.View.WPFDetailPropertyGroup,Rafy.MetaModel.View.DetailLayoutMode)">
            <summary>
            声明当前表单使用的布局模式。
            </summary>
            <param name="meta">The meta.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseDetailGroupingMode(Rafy.MetaModel.View.WPFEntityViewMeta,Rafy.MetaModel.View.DetailGroupingMode)">
            <summary>
            声明当前表单使用的属性分组模式。
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseDetailAsHorizontal(Rafy.MetaModel.View.WPFEntityViewMeta,System.Boolean)">
            <summary>
            声明当前表单使用水平布局。
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HasDetailLabelSize(Rafy.MetaModel.View.WPFEntityViewMeta,System.Nullable{System.Double})">
            <summary>
            在 DetailPanel 中显示的 Label 的宽度或者高度。
            不指定，则使用系统默认宽度。
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseReport(Rafy.MetaModel.View.WPFEntityViewMeta,System.String)">
            <summary>
            指定某个实体元数据使用特定路径的 RDCL 报表文件。
            
            报表 RDLC 文件中默认使用实体作为数据源，数据源的名称必须和实体名相同。
            </summary>
            <param name="evm"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseDefaultCommands(Rafy.MetaModel.View.WPFEntityViewMeta)">
            <summary>
            初始化实体视图中的命令按钮
            </summary>
            <param name="evm"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseCommands(Rafy.MetaModel.View.WPFEntityViewMeta,System.Object[])">
            <summary>
            指定某个类型使用指定的命令列表。
            </summary>
            <param name="meta"></param>
            <param name="commands">
            只支持两个类型：String、Type
            
            如果 WPF 命令是一个单独的 dll，则使用使用字符串的方式来声明。
            如果是字符串，则是命令类型的全名称。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseCommands(Rafy.MetaModel.View.WPFEntityViewMeta,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            指定某个类型使用指定的命令列表。
            
            </summary>
            <param name="meta"></param>
            <param name="commands">
            只支持两个类型：String、Type
            如果是字符串，则是命令类型的全名称。
            </param>
            <remarks>
            使用这个方法添加命令时，会自动防止添加重复的命令。
            如果需要添加重复的命令，或者需要自定义构造 <see cref="T:Rafy.MetaModel.View.WPFCommand"/> 元数据时，
            请直接使用 <see cref="P:Rafy.MetaModel.View.WPFEntityViewMeta.Commands"/> 集合。
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.ClearCommands(Rafy.MetaModel.View.WPFEntityViewMeta,System.Boolean)">
            <summary>
            清空所有 WPF 命令
            </summary>
            <param name="meta"></param>
            <param name="includeSystemCmds">
            是否在清除的同时，一同删除所有系统级别的命令。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.ClearCommands(Rafy.MetaModel.View.WPFEntityViewMeta,System.Int32[])">
            <summary>
            移除指定组中的所有按钮。
            </summary>
            <param name="meta"></param>
            <param name="groups"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HasLockProperty(Rafy.MetaModel.View.WebEntityViewMeta,Rafy.ManagedProperty.IManagedProperty[])">
            <summary>
            声明锁定属性列表
            </summary>
            <param name="meta"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.WithoutPaging(Rafy.MetaModel.View.WebEntityViewMeta)">
            <summary>
            不再使用分页。
            
            WebOnly
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseDefaultCommands(Rafy.MetaModel.View.WebEntityViewMeta)">
            <summary>
            初始化实体视图中的命令按钮
            </summary>
            <param name="evm"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseCommand(Rafy.MetaModel.View.WebEntityViewMeta,System.String)">
            <summary>
            注意，使用此方法后，返回值是 JsCommand，可对其继续进行配置。
            </summary>
            <param name="meta"></param>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.ClearCommands(Rafy.MetaModel.View.WebEntityViewMeta,System.Boolean)">
            <summary>
            清空所有 Web 命令
            </summary>
            <param name="meta"></param>
            <param name="includeSystemCmds">
            是否在清除的同时，一同删除所有系统级别的命令。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.Readonly(Rafy.MetaModel.View.EntityPropertyViewMeta,System.Boolean)">
            <summary>
            设置该属性是否为只读
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.Visibility(Rafy.MetaModel.View.EntityPropertyViewMeta,System.Boolean)">
            <summary>
            设置该属性为动态检查是否可见
            
            WPF Only
            </summary>
            <param name="meta"></param>
            <param name="value">是否可见。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.Visibility(Rafy.MetaModel.View.EntityPropertyViewMeta,Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            设置该属性为动态检查是否可见
            
            WPF Only
            </summary>
            <param name="meta"></param>
            <param name="indicator">动态根据此属性来检查是否可见。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.ShowIn(Rafy.MetaModel.View.EntityPropertyViewMeta,Rafy.MetaModel.View.ShowInWhere)">
            <summary>
            设置该属性可显示的范围
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HasLabel(Rafy.MetaModel.View.EntityPropertyViewMeta,System.String)">
            <summary>
            设置属性的显示名称
            </summary>
            <param name="meta"></param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HasOrderNo(Rafy.MetaModel.View.EntityPropertyViewMeta,System.Double)">
            <summary>
            具体指定某个属性的排序号
            
            一般使用在扩展视图中。
            </summary>
            <param name="meta"></param>
            <param name="orderNo"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseDataSource(Rafy.MetaModel.View.EntityPropertyViewMeta,Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            为某个引用属性直接快速设置数据源
            </summary>
            <param name="meta"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseDataSource(Rafy.MetaModel.View.EntityPropertyViewMeta,System.Func{System.Object})">
            <summary>
            为某个引用属性直接快速设置数据源
            </summary>
            <param name="meta"></param>
            <param name="dataSourceProvier"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.Readonly(Rafy.MetaModel.View.WebEntityPropertyViewMeta,System.Boolean)">
            <summary>
            设置该属性是否为只读
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.ShowIn(Rafy.MetaModel.View.WebEntityPropertyViewMeta,Rafy.MetaModel.View.ShowInWhere)">
            <summary>
            设置该属性可显示的范围
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HasLabel(Rafy.MetaModel.View.WebEntityPropertyViewMeta,System.String)">
            <summary>
            设置属性的显示名称
            </summary>
            <param name="meta"></param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.Readonly(Rafy.MetaModel.View.WPFEntityPropertyViewMeta,System.Boolean)">
            <summary>
            设置该属性是否为只读
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.ShowIn(Rafy.MetaModel.View.WPFEntityPropertyViewMeta,Rafy.MetaModel.View.ShowInWhere)">
            <summary>
            设置该属性可显示的范围
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HasLabel(Rafy.MetaModel.View.WPFEntityPropertyViewMeta,System.String)">
            <summary>
            设置属性的显示名称
            </summary>
            <param name="meta"></param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.Readonly(Rafy.MetaModel.View.WPFEntityPropertyViewMeta,Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            设置该属性为动态检查是否只读
            </summary>
            <param name="meta"></param>
            <param name="indicator">动态根据此属性来检查是否只读。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.ShowInList(Rafy.MetaModel.View.WPFEntityPropertyViewMeta,System.Nullable{System.Double})">
            <summary>
            设置该属性需要显示在列表中，并设置其列表中的信息
            </summary>
            <param name="meta"></param>
            <param name="gridWidth">
            用于初始化表格控件的宽度属性
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.ShowInDetail(Rafy.MetaModel.View.WPFEntityPropertyViewMeta,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32})">
            <summary>
            设置该属性在表单中显示时的详细信息
            
            注意，并不是所有属性在所有模式下都有用，所以请选择性设置。
            </summary>
            <param name="meta"></param>
            <param name="contentWidth">
            表单中该属性所占的格子宽度。
            
            如果值在 0 到 1 之间，表示百分比，只有 DetailLayoutMode.AutoGrid 模式下可用。
            否则表示绝对值。
            
            不指定，则使用系统默认值。
            </param>
            <param name="height">
            表单中该属性所占的总高度
            不指定，则使用系统默认宽度。
            </param>
            <param name="labelSize">
            在 DetailPanel 中显示的 Label 的宽度或者高度。
            不指定，则使用系统默认值。
            </param>
            <param name="asHorizontal">
            配置 DetailPanel 中 Label 与 Editor 的布局方向。true：横向；false：竖向。
            不指定，则使用系统默认值。
            </param>
            <param name="needNewLine">
            指定某个属性在表单中是否需要开启新行。
            此属性只在 DetailLayoutMode.Wrapping 下有用。
            </param>
            <param name="columnSpan">
            表单中该属性所占的列数。
            只在 DetailLayoutMode.AutoGrid 模式下有用。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseEditor(Rafy.MetaModel.View.WPFEntityPropertyViewMeta,System.String)">
            <summary>
            设置属性的编辑器
            </summary>
            <param name="meta"></param>
            <param name="editorName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.DisplayRefBy(Rafy.MetaModel.View.WPFEntityPropertyViewMeta,Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            如果这是一个引用属性，则可以指定一个额外的冗余属性来进行显示。
            </summary>
            <param name="meta"></param>
            <param name="refDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.FireNavigation(Rafy.MetaModel.View.WPFEntityPropertyViewMeta)">
            <summary>
            设置该属性为导航项。
            此时，如果该属性变更，会自动触发导航查询
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.View.EntityViewMetaFactory">
            <summary>
            实体默认视图及实体信息的仓库
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.EntityViewMetaFactory.Create(System.Type,System.String,System.Nullable{Rafy.MetaModel.XmlConfig.BlockConfigType})">
            <summary>
            获取某个类型的默认视图或扩展视图
            </summary>
            <param name="entityType"></param>
            <param name="extendViewName"></param>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.EntityViewMetaFactory.CreateBaseView(System.Type,System.Nullable{Rafy.MetaModel.XmlConfig.BlockConfigType})">
            <summary>
            查询某个实体类型所对应的基础视图信息
            </summary>
            <param name="entityType"></param>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.EntityViewMetaFactory.CreateExtendView(System.Type,System.String,System.Nullable{Rafy.MetaModel.XmlConfig.BlockConfigType})">
            <summary>
            获取某个类型的扩展视图
            </summary>
            <param name="entityType"></param>
            <param name="extendViewName"></param>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.View.EntityPropertyViewMeta">
            <summary>
            属性的视图模型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityPropertyViewMeta.PropertyMeta">
            <summary>
            对应的属性信息
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityPropertyViewMeta.Name">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityPropertyViewMeta.IsReference">
            <summary>
            是否为“引用属性”
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityPropertyViewMeta.SelectionViewMeta">
            <summary>
            本属性需要选择实体的相关视图信息
            
            一般情况下，如果当前属性为引用实体属性，那么它默认带有这个值。其它的一般属性需要主动设置本值。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityPropertyViewMeta.Owner">
            <summary>
            属性所在的实体类型的视图信息
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityPropertyViewMeta.VisibilityIndicator">
            <summary>
            用于检测是否可见的属性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityPropertyViewMeta.OrderNo">
            <summary>
            排序此属性使用的属性。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityPropertyViewMeta.ShowInWhere">
            <summary>
            在哪里显示
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.EntityPropertyViewMeta.CanShowIn(Rafy.MetaModel.View.ShowInWhere)">
            <summary>
            判断是否可以显示在某处
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.EntityPropertyViewMeta.Order(System.Collections.Generic.IEnumerable{Rafy.MetaModel.View.EntityPropertyViewMeta})">
            <summary>
            把000010000300002排序为000000000000123
            
            不把0的位置改变，这样可以保证顺序与属性定义的顺序一致。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.NavigationPropertyMeta">
            <summary>
            导航属性的元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.NavigationPropertyMeta.IdPropertyAfterSelection">
            <summary>
            如果本导航属性是一个子实体集合时，IdPropertyName 表示集合的主键应该赋值给我这个导航对象的哪个属性。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.ShowInWhere.Hide">
            <summary>
            默认值：不显示。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.ShowInWhere.DropDown">
            <summary>
            是否在下拉框中显示
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.ShowInWhere.List">
            <summary>
            是否在列表中显示
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.ShowInWhere.Detail">
            <summary>
            是否在表单中显示
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.ShowInWhere.ListDetail">
            <summary>
            显示在列表和表单中
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.ShowInWhere.ListDropDown">
            <summary>
            显示在列表和下拉框中
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.EntityViewMeta">
            <summary>
            一个实体类的视图元数据
            
            一个实体并不只对应一个视图元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityViewMeta.Label">
            <summary>
            显示的标题
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityViewMeta.ExtendView">
            <summary>
            如果当前的视图是一个扩展视图，则这个属性表示这个扩展视图的名称。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityViewMeta.EntityMeta">
            <summary>
            实体类元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityViewMeta.TitleProperty">
            <summary>
            实体的标题属性/主显示属性。
            （可能为 null）
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.EntityViewMeta.AsWebView">
            <summary>
            将当前对象转换为对应的 Web 界面元数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.EntityViewMeta.AsWPFView">
            <summary>
            将当前对象转换为对应的 WPF 界面元数据。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityViewMeta.DetailColumnsCount">
            <summary>
            在Detail里显示为几列
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityViewMeta.NotAllowEdit">
            <summary>
            获取是否不允许编辑
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityViewMeta.GroupBy">
            <summary>
            默认分组属性值
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.EntityViewMeta.Property(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            根据名字查询实体属性
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.EntityViewMeta.Property(System.String)">
            <summary>
            根据名字查询实体属性（忽略大小写）
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="E:Rafy.MetaModel.View.EntityViewMeta.PropertyFound">
            <summary>
            当使用 Property 方法查找到某个属性时，发生此事件。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.DetailLayoutMode">
            <summary>
            表单布局模式
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.DetailLayoutMode.Dynamic">
            <summary>
            如果只有少量的属性，只需要显示一行时，使用 AutoGrid。
            否则使用 Wrapping
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.DetailLayoutMode.Wrapping">
            <summary>
            所有编辑器可自动折行。
            
            可以使用 NewLineInDetail 主动使某个编辑器直接折行。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.DetailLayoutMode.AutoGrid">
            <summary>
            根据列数自动为所有编辑器分配到表格中。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.DetailGroupingMode">
            <summary>
            表单中属性分组的模式
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.DetailGroupingMode.GroupBox">
            <summary>
            使用 StackPanel + GroupBox 进行分组。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.DetailGroupingMode.TabItem">
            <summary>
            使用 TabControl + TabItem 进行分组。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.SelectionViewMeta">
            <summary>
            选择实体的相关视图信息
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.SelectionEntityType">
            <summary>
            被用来选择的实体类型。
            必填项。
            
            这个类型可以直接与引用属性对应的实体类型相同，也可以是一个其它的实体，方便客户进行选择。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.RefInfo">
            <summary>
            对应的引用信息
            
            可能为 null，此时表示此属性只是在界面上有引用元数据，
            但是定义的实体类型却没有相关的引用信息（例如根本没有定义实体引用属性）。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.RefTypeDefaultView">
            <summary>
            引用实体对应的默认视图
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.DataSourceProperty">
            <summary>
            查询时，数据来源的属性。在这个属性里面查找值。
            
            如果未设置这个值，则会调用数据层方法查询完整的实体列表。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.DataSourceProvider">
            <summary>
            如果是没有指定界面时，可以使用这个属性来指定弹出窗口的数据源。
            可选。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.SelectionMode">
            <summary>
            选择模式：多选/单选。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.SplitterIfMulti">
            <summary>
            多选模式下，返回的值应该根据这个进行分隔
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.SelectedValuePath">
            <summary>
            选择后的值在目标实体中对应的托管属性。
            可选。
            如果是非引用属性，需要填写这个属性的值。否则默认为 Entity.IdProperty
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.RefIdHost">
            <summary>
            如果在属性被设置完成后，还需要把被选择实体的 Id 一便赋值过来时，
            则需要指定此值来说明使用哪个属性来接收被选择实体的 Id 或者 Id 列表。
            
            如果是单选模式，则这个属性的类型必须是 int?，
            如果是多选模式，则这个属性的类型必须是 int[]（数组类型）。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.RefSelectedCallBack">
            <summary>
            引用选择完毕后的回调函数
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.RefSelectedCallBack">
            <summary>
            引用选择完毕后的回调函数
            </summary>
            <param name="owner">弹出窗口对应的当前实体</param>
            <param name="selectedEntities">被选择的实体列表，Count 的范围是自然数。</param>
        </member>
        <member name="T:Rafy.MetaModel.View.UIModel">
            <summary>
            Web 模型容器
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.UIModel.XmlConfigMgr">
            <summary>
            xml 配置管理器
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.UIModel.InitCommandMetas">
            <summary>
            初始化程序中所有的实体DLL。
            
            此方法应该在程序初始化时调用。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.CommandGroupType">
            <summary>
            命令分组类型
            
            分辨该命令在是属于哪种逻辑的命令，方便系统控制。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.CommandGroupType.None">
            <summary>
            没有指定
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.CommandGroupType.Business">
            <summary>
            业务类按钮
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.CommandGroupType.View">
            <summary>
            公用的查看类型 如展开树形列表，刷新等
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.CommandGroupType.Edit">
            <summary>
            公用的编辑类型 如增、删等
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.CommandGroupType.System">
            <summary>
            系统级命令，如：界面配置、报表功能挖掘、导出 Excel 等。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.CommandLocation">
            <summary>
            命令生成位置
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.CommandLocation.Toolbar">
            <summary>
            默认为生成在 Toolbar 上，由一个按钮触发或者Group的MenuItem
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.CommandLocation.Menu">
            <summary>
            生成为菜单
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.WPFCommandNames">
            <summary>
            一些内置的 WPF 命令
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.WPFCommandNames.CustomizeUI">
            <summary>
            这个命令需要引入 Rafy.Customization 插件才可使用。
            否则值为 null。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.WPFCommandNames.SysCommands">
            <summary>
            系统中为非查询类型 添加的默认系统命令
            
            这里的命令会在 UIModel.Views.CreateBaseView 方法中进行设置。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.WPFCommandNames.SysQueryCommands">
            <summary>
            系统中为查询类型 添加的默认系统命令
            
            这里的命令会在 UIModel.Views.CreateBaseView 方法中进行设置。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.WPFCommand">
            <summary>
            WPF 客户端命令元数据。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFCommand.Name">
            <summary>
            获取或设置命令的唯一名称。
            名称即代表了这个命令。
            <remarks>
            默认返回命令的全名称。如果想要重复使用同一个命令，则可以为其设置不同的名称。
            </remarks>
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFCommand.RuntimeType">
            <summary>
            对应的命令的运行时类型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFCommand.Hierarchy">
            <summary>
            此命令所处的分级位置。
            
            当命令生成在菜单中时，可以使用如下语法：一级/二级/三级
            当命令生成在工具栏中时，同一组的命令都会生成一个下拉按钮列表中。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFCommand.ToolTip">
            <summary>
            命令显示的鼠标划过文本。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFCommand.ImageName">
            <summary>
            命令显示的图片名称。
            <remarks>
            <para>这个图片需要存放在命令所在程序集的 Images 文件夹中。</para>
            </remarks>
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFCommand.Gestures">
            <summary>
            快捷键表达式
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFCommand.GroupAlgorithmType">
            <summary>
            为这个Command进行“生成分组”的算法类。
            如果为null，则会使用默认生成算法。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFCommand.GroupType">
            <summary>
            命令的分组位置
            
            常用的分组位置参见类型 <see cref="T:Rafy.MetaModel.View.CommandGroupType"/>
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFCommand.Location">
            <summary>
            命令生成的控件的位置。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFCommand.HasLocation(Rafy.MetaModel.View.CommandLocation)">
            <summary>
            判断是否已经指定了要生成在某个位置。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFCommand.CloneMutable">
            <summary>
            复制出一个可变的元数据对象。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.View.WPFCommandRepository">
            <summary>
            系统中所有 WPF 命令的仓库
            
            这里只存储这些命令的一个原始值。每个类型的视图 EVM 中的 Commands 是这些值的拷贝。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFCommandRepository.AddByAssembly(System.Reflection.Assembly)">
            <summary>
            添加程序集中 Commands 文件夹下的 js Resource。
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFCommandRepository.Create(System.Type)">
            <summary>
            构造一个可变的元数据
            </summary>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.View.CodeEVMReader">
            <summary>
            从代码中读取 EntityViewMeta
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.CodeEVMReader.Read(Rafy.MetaModel.EntityMeta)">
            <summary>
            从一个实体类型读取它所对应的视图模型。
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.CodeEVMReader.CreateEntityViewMeta(Rafy.MetaModel.EntityMeta)">
            <summary>
            创建某个实体类的视图元数据
            </summary>
            <param name="entityMeta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.CodeEVMReader.CreatePropertiesViewMeta(Rafy.MetaModel.View.EntityViewMeta)">
            <summary>
            加载所有属性元数据
            </summary>
            <param name="viewMeta"></param>
        </member>
        <member name="T:Rafy.MetaModel.IValidationDeclarer">
            <summary>
            验证规则的声明器。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.IValidationDeclarer.RulesCount">
            <summary>
            获取当前已经声明的规则的个数。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.IValidationDeclarer.AddRule(Rafy.MetaModel.IValidationRule,Rafy.MetaModel.RuleMeta)">
            <summary>
            为整个实体添加一个业务验证规则。
            </summary>
            <param name="rule">The rule.</param>
            <param name="meta">The meta.</param>
        </member>
        <member name="M:Rafy.MetaModel.IValidationDeclarer.AddRule(Rafy.ManagedProperty.IManagedProperty,Rafy.MetaModel.IValidationRule,Rafy.MetaModel.RuleMeta)">
            <summary>
            为某个属性添加一个业务验证规则。
            </summary>
            <param name="property">The property.</param>
            <param name="rule">The rule.</param>
            <param name="meta">The meta.</param>
        </member>
        <member name="M:Rafy.MetaModel.IValidationDeclarer.ClearRules">
            <summary>
            清空所有规则。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.IValidationDeclarer.ClearRules(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            清空指定属性对应的规则。
            </summary>
            <param name="property"></param>
        </member>
        <member name="T:Rafy.MetaModel.RuleArgs">
            <summary>
            为业务规则验证方法提供一些必要的参数。
            
            该类继承自动态类型，意味着定义时可动态定义属性。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.RuleArgs.Rule">
            <summary>
            对应的规则。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.RuleArgs.Property">
            <summary>
            如果这是某个属性关联的规则参数，则这个属性表示关联的托管属性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.RuleArgs.IsBroken">
            <summary>
            返回是否执行打破了规则。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.RuleArgs.BrokenDescription">
            <summary>
            在规则检查函数中描述当前的错误信息。
            </summary>
            <value>
            The broken description.
            </value>
        </member>
        <member name="M:Rafy.MetaModel.RuleArgs.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.RuleArgs.DisplayProperty">
            <summary>
            如果当前 Rafy 运行时环境中，已经拥有 UI 层界面的元数据，则获取属性对应的的显示名称，并进行翻译后返回。
            否则，直接返回以下格式的字符串，方便替换：[属性名称]。（服务端一般都没有 UI 层元数据。）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.RuleArgs.Display(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            如果当前 Rafy 运行时环境中，已经拥有 UI 层界面的元数据，则获取属性对应的的显示名称，并进行翻译后返回。
            否则，直接返回以下格式的字符串，方便替换：[属性名称]。（服务端一般都没有 UI 层元数据。）
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.RuleArgs.Display(System.Type)">
            <summary>
            如果当前 Rafy 运行时环境中，已经拥有 UI 层界面的元数据，则获取实体对应的的显示名称，并进行翻译后返回。
            否则，直接返回以下格式的字符串，方便替换：[实体类型名称]。（服务端一般都没有 UI 层元数据。）
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.RuleHandler">
            <summary>
            定义所有验证规则方法签名的委托。
            </summary>
            <param name="target">需要被验证的属性对象。</param>
            <param name="e">用于接收验证后的信息。</param>
        </member>
        <member name="T:Rafy.MetaModel.RuleLevel">
            <summary>
            Values for validation rule severities.
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.RuleLevel.Error">
            <summary>
            Represents a serious
            business rule violation that
            should cause an object to
            be considered invalid.
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.RuleLevel.Warning">
            <summary>
            Represents a business rule
            violation that should be
            displayed to the user, but which
            should not make an object be
            invalid.
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.RuleLevel.Information">
            <summary>
            Represents a business rule
            result that should be displayed
            to the user, but which is less
            severe than a warning.
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ViewConfig.ExtendView">
            <summary>
            如果是扩展视图，需要重写这个属性。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ViewConfig.IsExtendView">
            <summary>
            如果是扩展视图，需要重写这个属性，并返回 true。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.ViewConfig.GetViewName(System.Type)">
            <summary>
            返回视图类型对应的视图名称。
            </summary>
            <param name="viewType"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.WPFViewConfig">
            <summary>
            实体配置基类
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.WPFViewConfig.ConfigView">
            <summary>
            子类重写此方法，并完成对 Meta 属性的配置。
            
            注意：
            * 为了给当前类的子类也运行同样的配置，这个方法可能会被调用多次。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.WPFViewConfig`1">
            <summary>
            泛型版本的实体配置基类
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.WebViewConfig">
            <summary>
            实体配置基类
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.WebViewConfig.ConfigView">
            <summary>
            子类重写此方法，并完成对 Meta 属性的配置。
            
            注意：
            * 为了给当前类的子类也运行同样的配置，这个方法可能会被调用多次。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.WebViewConfig`1">
            <summary>
            泛型版本的实体配置基类
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Attributes.CommandAttribute">
            <summary>
            用于描述一个命令元数据的标签。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.CommandAttribute.Label">
            <summary>
            命令显示的文本。
            <remarks>
            <para>
            如果没有设置，默认值为 null，则系统会使用命令的类型名称作为显示。
            如果希望不显示任何文本，需要默认为 <see cref="F:System.String.Empty"/> 。
            </para>
            </remarks>
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.CommandAttribute.ToolTip">
            <summary>
            命令显示的鼠标划过文本。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.CommandAttribute.ImageName">
            <summary>
            命令显示的图片名称。
            <remarks>
            <para>这个图片需要存放在命令所在程序集的 Images 文件夹中。</para>
            </remarks>
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.CommandAttribute.Gestures">
            <summary>
            快捷键标识。
            <remarks>
            可以用以下格式：Ctrl+A；F2；
            
            WPF Only
            </remarks>
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.CommandAttribute.UIAlgorithm">
            <summary>
            为这个Command进行“生成分组”的算法类。
            如果为null，则会使用默认生成算法。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.CommandAttribute.CommandInfoType">
            <summary>
            使用哪个类型的 CommandInfo 来承载元数据。
            可以使用不同的 CommandInfo 的子类来实现元数据的多态。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.CommandAttribute.Hierarchy">
            <summary>
            此命令所处的分级位置。
            
            当命令生成在菜单中时，可以使用如下语法：一级/二级/三级
            当命令生成在工具栏中时，同一组的命令都会生成一个下拉按钮列表中。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.CommandAttribute.GroupType">
            <summary>
            命令的按钮分类类型。
            
            不同分类类型的按钮，将会以 '|' 分隔起来。
            
            常用的分组位置参见类型 <see cref="T:Rafy.MetaModel.View.CommandGroupType"/>
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.CommandAttribute.Location">
            <summary>
            命令生成的控件的位置。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Attributes.ChildEntityAttribute">
            <summary>
            所有孩子实体对象都应该标记这个属性。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Attributes.ConditionQueryTypeAttribute">
            <summary>
            对该类进行条件查询的条件
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.ConditionQueryTypeAttribute.QueryType">
            <summary>
            条件查询的条件对象的类型
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Attributes.EntityAttribute">
            <summary>
            所有实体对象都应该标记这个属性。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Attributes.QueryEntityAttribute">
            <summary>
            所有查询实体对象都应该标记这个属性。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Attributes.NavigationQueryTypeAttribute">
            <summary>
            对该类进行导航查询的条件
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.Attributes.NavigationQueryTypeAttribute.#ctor(System.Type)">
            <summary>
            构造器
            </summary>
            <param name="queryType">导航查询的条件对象的类型</param>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.NavigationQueryTypeAttribute.QueryType">
            <summary>
            导航查询的条件对象的类型
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Attributes.ColumnAttribute">
            <summary>
            标记此标签的属性，就算默认已经标记上 EntityPropertyAttribute。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Attributes.RootEntityAttribute">
            <summary>
            所有根实体对象都应该标记这个属性。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Attributes.LabelAttribute">
            <summary>
            用于描述某个类型或成员在界面上显示的字符
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.Attributes.LabelAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.MetaModel.Attributes.LabelAttribute"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="F:Rafy.MetaModel.Direction.Horizontal">
            <summary>
            水平
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.Direction.Vertical">
            <summary>
            垂直。 细表默认和主表垂直显示
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.EntitySelectionMode">
            <summary>
            选择模式：多选/单选。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.EntitySelectionMode.Single">
            <summary>
            单选模式
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.EntitySelectionMode.Multiple">
            <summary>
            多选模式
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Meta">
            <summary>
            元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Meta.Name">
            <summary>
            名字
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.ViewMeta">
            <summary>
            视图元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ViewMeta.Label">
            <summary>
            显示的标题
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ViewMeta.IsVisible">
            <summary>
            指示这个界面元数据，当前是否可见。
            可以简单地设置这个属性为 false，来达到不生成这个界面元素的功能。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.MetaBase">
            <summary>
            职责与支持：
            SetFieldValue
            ICustomParamsHolder
            INotifyPropertyChanged（由于有时元数据直接需要被绑定到 WPF 界面中，所以需要实现这个接口）
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.CommonModel">
            <summary>
            WPF Web 通用的模型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.CommonModel.Entities">
            <summary>
            所有实体元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.CommonModel.Modules">
            <summary>
            所有模块的元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityConfigBase.PluginIndex">
            <summary>
            所处插件的启动级别。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityConfigBase.InheritanceCount">
            <summary>
            继承层次
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityConfigBase.EntityType">
            <summary>
            本实体配置对应的实体类
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.EntityConfig">
            <summary>
            实体配置基类
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.EntityConfig.ConfigMeta">
            <summary>
            子类重写此方法，并完成对 Meta 属性的配置。
            
            注意：
            * 为了给当前类的子类也运行同样的配置，这个方法可能会被调用多次。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.EntityConfig.AddValidations(Rafy.MetaModel.IValidationDeclarer)">
            <summary>
            子类重写此方法，并完成对实体验证规则的配置。
            
            注意：
            * 为了给当前类的子类也运行同样的配置，这个方法可能会被调用多次。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.EntityConfig`1">
            <summary>
            泛型版本的实体配置基类
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.EntityMetaRepository">
            <summary>
            实体默认视图及实体信息的仓库
            <remarks>
            实体的元数据会在第一次被使用时而创建，并只会创建一次。
            </remarks>
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.EntityMetaRepository.Get(System.Type)">
            <summary>
            查询某个实体类型所对应的实体信息。查询不到，就报出异常。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.EntityMetaRepository.Find(System.Type)">
            <summary>
            查询某个实体类型所对应的实体信息。
            如果当前是第一次获取该实体的元数据，则会为它创建元数据。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="E:Rafy.MetaModel.EntityMetaRepository.EntityMetaCreated">
            <summary>
            元数据创建完成的事件。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.EntityMetaRepository.FindOrCreateEntityMetaRecur(System.Type,Rafy.MetaModel.EntityMeta)">
            <summary>
            创建一个实体类型的元数据信息。
            </summary>
            <param name="entityType"></param>
            <param name="parentMeta">
            聚合父类型的元数据，如果 entityType 是根类型，则不需要传递此参数。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.EntityMetaRepository.Config(Rafy.MetaModel.EntityMeta)">
            <summary>
            调用配置类进行配置。
            </summary>
            <param name="em"></param>
        </member>
        <member name="M:Rafy.MetaModel.EntityMetaRepository.EnsureAllLoaded">
            <summary>
            调用此方法来加载整个系统中的所有插件中的实体元数据。
            （同时，也就包含所有实体的托管属性。）
            
            调用此方法前，遍历此集合只会返回当前已经加载的实体元数据。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.EntityMetaCreatedEventArgs">
            <summary>
            元数据创建完成的事件。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.EntityMetaCreatedEventArgs.#ctor(Rafy.MetaModel.EntityMeta)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.MetaModel.EntityMetaCreatedEventArgs"/> class.
            </summary>
            <param name="meta">The meta.</param>
        </member>
        <member name="P:Rafy.MetaModel.EntityMetaCreatedEventArgs.EntityMeta">
            <summary>
            创建完成的实体元数据。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.ChildrenPropertyMeta">
            <summary>
            子属性元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ChildrenPropertyMeta.ChildType">
            <summary>
            此孩子属性对应的实体类的类型
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.EntityCategory">
            <summary>
            元数据：实体对象类型
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.EntityCategory.Child">
            <summary>
            孩子对象
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.EntityCategory.Root">
            <summary>
            根对象
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.EntityCategory.QueryObject">
            <summary>
            查询面板对象
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.EntityMeta">
            <summary>
            实体元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.ManagedProperties">
            <summary>
            此实体类对应的所有托管属性容器
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.Name">
            <summary>
            类型名
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.EntityType">
            <summary>
            当前模型是对应这个类型的。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.IdType">
            <summary>
            当前模型是对应这个类型的。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.IsTreeEntity">
            <summary>
            是否为树型实体。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.TreeIndexOption">
            <summary>
            如果是树型实体，则可以通过这个属性来设置它的树型编码存储规则。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.AggtParent">
            <summary>
            聚合父类的元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.AggtRoot">
            <summary>
            聚合根类的元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.AggtChildren">
            <summary>
            所有的聚合子类的元数据
            
            注意！！！
            暂时把这个属性的可见性设置为 internal，
            原因是实体的关系可能需要考虑实体被客户化扩展的情况。
            例如，当 ContractBudget 扩展 Budget 后，界面及实体应该完全不存在 Budget 类。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.EntityProperties">
            <summary>
            拥有的实体属性。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.ChildrenProperties">
            <summary>
            拥有的关联属性。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.EntityCategory">
            <summary>
            实体的类别
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.TableMeta">
            <summary>
            映射表的元数据。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.ClientCacheDefinition">
            <summary>
            缓存子系统元数据
            
            如果不为空，表示这个实体正在使用分布式缓存系统。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.ServerCacheEnabled">
            <summary>
            是否启用本类型在服务端的内存缓存功能。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.DeletingChildrenInMemory">
            <summary>
            强制该实体删除都使用内存中的级联删除。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.IsPhantomEnabled">
            <summary>
            是否启用了该实体的假删除功能。（假删除功能需要引用独立的插件：Rafy.Domain.EntityPhantom。）
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.EntityMeta.FindParentReferenceProperty">
            <summary>
            找到实体中对应聚合关系中的父实体引用属性元数据。
            
            注意，此函数返回的是引用实体属性，而非引用 Id 属性。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.EntityMeta.Property(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            根据托管属性查询实体属性
            如果没有找到，则返回 null。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.EntityMeta.Property(System.String)">
            <summary>
            根据名字查询实体属性（忽略大小写）
            如果没有找到，则返回 null。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.EntityMeta.ChildrenProperty(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            根据托管属性查询组合子属性。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.EntityMeta.ChildrenProperty(System.String)">
            <summary>
            根据名字查询组合子属性（忽略大小写）
            如果没有找到，则返回 null。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.ClientCacheScope">
            <summary>
            某个类型所使用的缓存更新范围。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ClientCacheScope.Class">
            <summary>
            为这个类型定义的范围。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ClientCacheScope.ScopeClass">
            <summary>
            此属性表示为Class作为范围的类型。
            （注意：应该是在聚合对象树中，Class的上层类型。）
            如果此属性为null，表示Class以本身作为缓存范围。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ClientCacheScope.ScopeIdGetter">
            <summary>
            此属性表示为Class作为范围的类型的对象ID。
            如果此属性为null，表示Class不以某一特定的范围对象作为范围，而是全体对象。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ClientCacheScope.SimpleScopeType">
            <summary>
            如果是使用的简单缓存方案，这个值存储这个方案的值。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ClientCacheScope.ScopeBySelf">
            <summary>
            表示Class以本身作为缓存范围。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ClientCacheScope.ScopeById">
            <summary>
            表示Class是否以某一特定的范围对象作为范围。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.ClientCacheScopeType">
            <summary>
            主要会被使用到的两种缓存方案
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.ClientCacheScopeType.Table">
            <summary>
            按照表的方案来缓存
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.ClientCacheScopeType.ScopedByRoot">
            <summary>
            按照聚合树的方案来缓存
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.EntityPropertyMeta">
            <summary>
            业务属性实体模型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityPropertyMeta.ReferenceInfo">
            <summary>
            如果此属性是引用实体属性，则这个属性不为空，并表示引用的相关信息。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityPropertyMeta.ColumnMeta">
            <summary>
            如果这个属性不为 null，表示该属性映射数据库中的某个字段。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.PropertyMeta">
            <summary>
            属性元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyMeta.ManagedProperty">
            <summary>
            如果本元数据对应的实体属性是由托管属性编写的，那么这里返回它所对应的托管属性。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyMeta.CLRProperty">
            <summary>
            返回这个托管属性对应的 CLR 属性，如果没有对应的 CLR 属性（或者找到多个），则返回 null。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyMeta.PropertyType">
            <summary>
            属性的类型。
            这个类型并不一定与托管属性的类型一致。例如 Id 属性，声明的是 object 类型，但是实际可能是 int、string 等。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyMeta.Runtime">
            <summary>
            对应的属性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyMeta.Owner">
            <summary>
            所在类型的元数据
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.ReferenceInfo">
            <summary>
            实体引用关系
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ReferenceInfo.RefEntityProperty">
            <summary>
            对应的引用实体属性（托管属性）。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ReferenceInfo.RefTypeMeta">
            <summary>
            引用实体的实体元数据
            
            当此引用属性引用的是一个抽象的实体类，这个抽象类并没有对应的实体元数据，可能这个抽象的子类才有实体元数据，
            在这种情况下，此属性值将为 null。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ReferenceInfo.Type">
            <summary>
            引用的类型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ReferenceInfo.RefType">
            <summary>
            引用实体的实体类型
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.ReferenceInfo.InitLazyRefTypeMeta">
            <summary>
            懒加载 RefTypeMeta 属性。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.TreeIndexOption">
            <summary>
            树型实体的编码生成规则
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.TreeIndexOption.Default">
            <summary>
            默认的树节点的索引规则。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.TreeIndexOption.Seperator">
            <summary>
            每一层间的分隔符
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.TreeIndexOption.Layers">
            <summary>
            每一层的字符串定义
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.TreeIndexOption.CalculateChildIndex(System.String,System.Int32)">
            <summary>
            通过父对象的编码以及当前的索引来生成可用的树型编码
            </summary>
            <param name="parentIndex"></param>
            <param name="nodeIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.TreeIndexOption.CalculateParentIndex(System.String)">
            <summary>
            获取指定索引对应节点的父节点的索引号。
            如果传入的已经是根节点，则返回 null。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.TreeIndexOption.CountLevel(System.String)">
            <summary>
            计算指定索引中表示的级别。
            （内部为统计分隔符的个数。）
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaRepositoryBase`1.FreezeItems">
            <summary>
            冻结所有的命令元数据。
            
            只冻结内部元素，并不冻结集合的行为。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.EntityMetaHelper.GetEntityProperties(Rafy.MetaModel.EntityMeta)">
            <summary>
            通过托管属性获取所有的实体属性列表
            </summary>
            <param name="entityMeta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.EntityMetaHelper.GetChildrenProperties(Rafy.MetaModel.EntityMeta)">
            <summary>
            通过托管属性获取所有的子属性列表
            </summary>
            <param name="entityMeta"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.ModuleMeta">
            <summary>
            模块的元数据。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.KeyLabel">
            <summary>
            这个属性表示这个模块的名称。
            
            注意，这个名称在整个应用程序中所有模块中应该是唯一的，这样，就可以用它来实现权限控制。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.Label">
            <summary>
            友好显示标签
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.HasUI">
            <summary>
            如果此属性返回 false，表示当前模块只是一个文件夹模块，它不对应任何的模块界面。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.IsCustomUI">
            <summary>
            是否为自定义模块
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.AggtBlocksName">
            <summary>
            如果当前模块是一个主动定义的聚合块，则这个属性表示此聚合块的名称。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.EntityType">
            <summary>
            这个模块使用 AutoUI 功能的话，这个属性表示其显示的实体类型，否则返回 null。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.BlocksTemplate">
            <summary>
            本模块使用的界面块模板类型。
            如果指定此属性，则指定的该类型必须继承自 BlocksTemplate 类。
            <remarks>
            （注意，如果是 WPF 应用程序，则这个属性指定的类型必须继承自 UITemplate 类。）
            </remarks>
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.Parent">
            <summary>
            对应的父模块
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.Children">
            <summary>
            模块中的子模块
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.ModuleMeta.GetChildrenWithPermission">
            <summary>
            返回所有可显示的模块。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.CustomOpertions">
            <summary>
            开发人员可以在这个模块中添加许多自定义功能。
            权限系统为读取这个属性用于用户配置。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.WebModuleMeta">
            <summary>
            Web 应用程序中的模块定义
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.WebModuleMeta.IsCustomUI">
            <summary>
            是否为自定义模块
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.WebModuleMeta.Url">
            <summary>
            如果该模块不是由某个类型自动生成的，则这个属性将不为空，并表示某个自定义的 UI 界面。
            
            则这个属性表示目标页面的地址。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.WebModuleMeta.ClientRuntime">
            <summary>
            Web 界面中本模块使用的界面模板类型。
            如果指定此属性，则指定的该类型必须继承自 Rafy.UITemplate 类。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.WPFModuleMeta">
            <summary>
            WPF 应用程序中的模块定义
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.WPFModuleMeta.IsCustomUI">
            <summary>
            是否为自定义模块
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.WPFModuleMeta.CustomUI">
            <summary>
            如果该模块不是由某个类型自动生成的，则这个属性将不为空，并表示某个自定义的 UI 界面。
            
            如果是 WPF 程序，那么这个属性表示目标用户控件的全名称，
            如果是 Web 程序，则这个属性表示目标页面的地址。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.WPFModuleMeta.TryAutoLoadData">
            <summary>
            在没有条件、导航面板时，尝试加载所有数据。默认是 true 。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.ModuleOperation">
            <summary>
            某个模块中定义的一些可用的功能操作。
            
            这些功能操作会被用来实现权限控制。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleOperation.Name">
            <summary>
            Name 属性表示功能的名称，这个名称在模块中应该是唯一的，该值会被存储到数据层中。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleOperation.Label">
            <summary>
            表示界面中功能用于显示的名称。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.ModulesContainer">
            <summary>
            模块容器
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.ModulesContainer.Freeze">
            <summary>
            冻结所有的元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModulesContainer.Roots">
            <summary>
            获取所有根模块。
            可通过此属性来变更根模块列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.ModulesContainer.GetRootsWithPermission">
            <summary>
            获取所有满足当前权限要求的根模块
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.ModulesContainer.AddRoot(Rafy.MetaModel.ModuleMeta)">
            <summary>
            添加一个根模块
            </summary>
            <param name="module"></param>
        </member>
        <member name="M:Rafy.MetaModel.ModulesContainer.FindModule(System.String)">
            <summary>
            根据唯一的名称来查找某个模块
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.ModulesContainer.FindModule(System.Type)">
            <summary>
            找到第一个实体类型为指定类型的模块
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.ModulesContainer.Item(System.String)">
            <summary>
            直接获得某一个模块。
            如果没有找到，则会抛出异常。
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.ModulesContainer.Item(System.Type)">
            <summary>
            直接获得某一个模块。
            如果没有找到，则会抛出异常。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.ColumnMeta">
            <summary>
            属性对应的列的元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ColumnMeta.HasFKConstraint">
            <summary>
            如果这是一个引用属性的列，则这个属性表示数据库中是否有对应的外键存在（引用属性也可以不映射外键）。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ColumnMeta.IsIdentity">
            <summary>
            是否自增长列
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ColumnMeta.IsPrimaryKey">
            <summary>
            是否主键
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ColumnMeta.IsRequired">
            <summary>
            是否必须的，如果没有赋值，则按照默认的类型计算方法来计算该值。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ColumnMeta.ColumnName">
            <summary>
            映射数据库中的字段名
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ColumnMeta.DataType">
            <summary>
            映射数据库中的字段的类型。
            如果没有设置，则使用默认的映射规则。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ColumnMeta.DataTypeLength">
            <summary>
            映射数据库中的字段的长度、精度等信息。
            可以是数字，也可以是 MAX 等字符串。
            如果是空，则表示使用默认的长度。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.TableMeta">
            <summary>
            实体映射表的元数据。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.TableMeta.#ctor(System.String)">
            <summary>
            构造一个映射指定表名的元数据对象
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:Rafy.MetaModel.TableMeta.#ctor">
            <summary>
            构造一个映射视图的元数据对象
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.TableMeta.TableName">
            <summary>
            映射数据库中的表名
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.TableMeta.ViewSql">
            <summary>
            如果是映射视图，则需要指定此属性为视图对应的 SQL。
            可以是一个 Sql 视图名，也可以是一个能查询出表格的 Sql 语句。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.TableMeta.IsMappingView">
            <summary>
            是否存在映射视图
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.MetaExtension">
            <summary>
            为元数据扩展的配置 API
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.MapAllProperties(Rafy.MetaModel.EntityMeta)">
            <summary>
            指定所有属性全部映射数据库字段
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.MapAllPropertiesExcept(Rafy.MetaModel.EntityMeta,Rafy.ManagedProperty.IManagedProperty[])">
            <summary>
            指定某个实体的所有属性全部映射数据库字段
            同时排除指定的属性列表。
            </summary>
            <param name="meta"></param>
            <param name="exceptProperties">
            这些属性不需要映射数据库
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.MapProperties(Rafy.MetaModel.EntityMeta,Rafy.ManagedProperty.IManagedProperty[])">
            <summary>
            指定该实体类型中的某些属性直接映射数据库字段
            </summary>
            <param name="meta"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.SupportTree(Rafy.MetaModel.EntityMeta)">
            <summary>
            打开指定实体类型的树型功能
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.MapTable(Rafy.MetaModel.EntityMeta)">
            <summary>
            指定某实体映射某个表。
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.MapTable(Rafy.MetaModel.EntityMeta,System.String)">
            <summary>
            指定某实体映射某个表，指定表名。
            </summary>
            <param name="meta"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.MapView(Rafy.MetaModel.EntityMeta,System.String)">
            <summary>
            指定某实体映射某个视图 SQL。
            </summary>
            <param name="meta"></param>
            <param name="viewSql">
            可以是一个数据库视图，也可以是一个能查询出数据的 Sql 语句。
            
            如果不指定此参数，则需要在所有的查询中都编写自定义查询。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.DontMapColumn(Rafy.MetaModel.EntityPropertyMeta)">
            <summary>
            指定某个属性是否需要直接映射字段
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.MapColumn(Rafy.MetaModel.EntityPropertyMeta)">
            <summary>
            开始指定某个属性直接映射字段的详细信息
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.HasColumnName(Rafy.MetaModel.ColumnMeta,System.String)">
            <summary>
            指定某个属性映射字段时的列名
            </summary>
            <param name="meta"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.HasDataType(Rafy.MetaModel.ColumnMeta,System.Data.DbType)">
            <summary>
            指定某个属性映射字段时的数据列类型
            </summary>
            <param name="meta">The meta.</param>
            <param name="dataType">Type of the data.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.HasLength(Rafy.MetaModel.ColumnMeta,System.String)">
            <summary>
            指定某个属性映射字段时的列的长度、精度等信息。
            注意，这个属性的变化，不会自动同步到数据库上。
            </summary>
            <param name="meta">The meta.</param>
            <param name="length">
            映射数据库中的字段的长度。
            可以是数字，也可以是 MAX 等字符串。
            如果是空，则表示使用默认的长度。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.IsRequired(Rafy.MetaModel.ColumnMeta)">
            <summary>
            指定某个属性映射字段时的是否为必需的
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.IsPrimaryKey(Rafy.MetaModel.ColumnMeta,System.Boolean)">
            <summary>
            指定某个属性映射字段时的是否为主键。
            
            一般情况下，直接使用 Id 为主键。
            但是在映射一些旧数据库的表时，可以保留原来的主键。而只让 Id 映射的字段保持自增长即可。
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.IsNullable(Rafy.MetaModel.ColumnMeta)">
            <summary>
            指定某个属性映射字段时的是否为必需的
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.IgnoreFK(Rafy.MetaModel.ColumnMeta)">
            <summary>
            如果出现循环引用的外键，则可以使用此方法来忽略某个列的外键，使得数据库生成时不生成该外键引用。
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.PropertyReadonlyIndicator">
            <summary>
            属性是否可见的指示器
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyReadonlyIndicator.Status">
            <summary>
            属性只读检测的状态
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyReadonlyIndicator.Property">
            <summary>
            当状态为动态检查时，这个属性表示需要被检查的属性。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.ReadOnlyStatus">
            <summary>
            三态的只读性。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.ReadOnlyStatus.None">
            <summary>
            可编辑状态。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.ReadOnlyStatus.ReadOnly">
            <summary>
            只读状态。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.ReadOnlyStatus.Dynamic">
            <summary>
            则表示不强制只读，容器按照自己相应的规则来计算自己的只读性。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.PropertyVisibilityIndicator">
            <summary>
            属性是否可见的指示器
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyVisibilityIndicator.VisiblityType">
            <summary>
            可见性指示器的类型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyVisibilityIndicator.IsDynamic">
            <summary>
            是否需要检测动态属性来获取可见性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyVisibilityIndicator.Property">
            <summary>
            当状态为动态检查时，这个属性表示需要被检查的属性。
            一个返回 bool 值的属性。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.VisiblityType">
            <summary>
            可见性指示器的类型
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.VisiblityType.Dynamic">
            <summary>
            动态表示是否需要检测动态属性来获取可见性
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.WebCommandJsHelper">
            <summary>
            js 文件帮助类。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.WebCommandJsHelper.ClassRegex">
            <summary>
            匹配 js 中定义的类名
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.WebCommandJsHelper.TextRegex">
            <summary>
            匹配 js 中 config 定义中 meta 中的 text 作为标签
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.WebCommandJsHelper.GroupRegex">
            <summary>
            匹配 js 中 config 定义中 meta 中的 group 作为标签
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.WebCommandJsHelper.JsBlocksSplitter">
            <summary>
            当一个 js 文件中写了多个 js 类时，需要使用此字符串来进行分隔
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.WebCommandJsHelper.LoadCommandJsBlocks(System.String,System.Collections.Generic.List{Rafy.MetaModel.JsBlock})">
            <summary>
            根据分隔符加载某个 js 文件中的所有的类。
            </summary>
            <param name="jsContent"></param>
            <param name="list"></param>
        </member>
        <member name="T:Rafy.MetaModel.JsBlock">
            <summary>
            表明一个 js 代码块
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.JsBlock.JavascriptCode">
            <summary>
            代码块对应的 js 代码。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.JsBlock.ClassName">
            <summary>
            如果这个代码块是一个类，则这个属性表示类名
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.JsBlock.Extend">
            <summary>
            如果这个代码块是一个类，并且它有基类，则这个属性这个类的基类的类名。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.JsBlock.SortByHierachy(System.Collections.Generic.List{Rafy.MetaModel.JsBlock})">
            <summary>
            按照继承关系排序整个列表
            </summary>
            <param name="list"></param>
        </member>
        <member name="T:Rafy.MetaModel.XmlConfig.MetaConfig">
            <summary>
            这个类是 xml 变更配置文件中所有运行时类的基类。
            
            这些类需要支持 xml 的序列化和反序列化。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.XmlConfig.MetaConfig.NullString">
            <summary>
            使用这个值的字符串都表示要主动把某个字符串值设置为 null。（默认情况下 null 表示没有更改。）
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.MetaConfig.IsChanged">
            <summary>
            子类重写此方法来返回当前的配置是否是有效的。
            只有有效的配置类才需要序列化到 XML 文件中。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.MetaConfig.GetXName">
            <summary>
            如果必要，子类可以重写此方法来指定 XML 元素的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.MetaConfig.ToXml">
            <summary>
            子类实现此方法来指定 序列化 逻辑
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.MetaConfig.ReadXml(System.Xml.Linq.XElement)">
            <summary>
            子类实现此方法来指定 反序列化 逻辑
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.MetaConfig.CreateElement">
            <summary>
            创建一个当前对象对应的 XML 元素
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.XmlConfig.Web.BlockCommandConfig">
            <summary>
            JsCommand 的配置器
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.XmlConfig.Web.BlockConfig">
            <summary>
            UI 块的配置
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.Web.BlockConfig.Key">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.Web.BlockConfig.PageSize">
            <summary>
            变更后的页面大小
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.Web.BlockConfig.GroupBy">
            <summary>
            分组属性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.Web.BlockConfig.EntityProperties">
            <summary>
            属性变更集
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.Web.BlockConfig.Commands">
            <summary>
            命令变更集
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.XmlConfig.Web.BlockPropertyConfig">
            <summary>
            UI 块界面属性的配置
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.Web.BlockPropertyConfig.Name">
            <summary>
            属性的名称
            此属性不可为空
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.Web.BlockPropertyConfig.Label">
            <summary>
            变更后的标签
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.Web.BlockPropertyConfig.ShowInWhere">
            <summary>
            变更后的显示信息
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.Web.BlockPropertyConfig.OrderNo">
            <summary>
            变更后的位置
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.XmlConfig.Web.XmlConfigManager">
            <summary>
            Web 模型的 Xml 配置文件管理器
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.Web.XmlConfigManager.Save(Rafy.MetaModel.XmlConfig.Web.BlockConfig)">
            <summary>
            把某个 BlockConfig 保存为 XML 文件。
            </summary>
            <param name="blockCfg"></param>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.Web.XmlConfigManager.GetBlockConfig(Rafy.MetaModel.XmlConfig.BlockConfigKey)">
            <summary>
            通过 key 查找 BlockConfig。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.Web.XmlConfigManager.Save(System.String,Rafy.MetaModel.View.AggtBlocks)">
            <summary>
            把某个自定义的聚合块保存到硬盘上。
            </summary>
            <param name="blocksName"></param>
            <param name="blocks"></param>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.Web.XmlConfigManager.GetBlocks(System.String)">
            <summary>
            创建某个自定义的聚合块
            </summary>
            <param name="blocksName"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.XmlConfig.BlockConfigKey">
            <summary>
            UI 块配置文件的主键
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.BlockConfigKey.EntityType">
            <summary>
            对应的实体类型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.BlockConfigKey.ExtendView">
            <summary>
            如果是扩展视图，则这个属性是扩展视图的名称
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.BlockConfigKey.Type">
            <summary>
            配置文件的类型
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.BlockConfigKey.IsDefaultView">
            <summary>
            判断当前配置是否为默认视图
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.BlockConfigKey.GetDescription">
            <summary>
            友好描述信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.BlockConfigKey.GetFilePath">
            <summary>
            对应的 XML 文件路径地址。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.XmlConfig.BlockConfigType">
            <summary>
            块配置文件类型
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.XmlConfig.BlockConfigType.Config">
            <summary>
            此类配置文件是在主干版本开发时使用的。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.XmlConfig.BlockConfigType.Customization">
            <summary>
            一类配置文件是在客户化期才起作用的。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.XmlConfig.XmlConfigFileSystem">
            <summary>
            此类为 XML 文件提供路径算法
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.BranchPathProvider">
            <summary>
            管理所有分支版本的路径及优先级。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.BranchPathProvider.BranchFilesRootDir">
            <summary>
            各分支版本存放的文件夹名称。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.BranchPathProvider.CommonAppName">
            <summary>
            主干版本的文件夹名。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.BranchPathProvider._appNames">
            <summary>
            所有的应用列表。
            第一个是Common
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.BranchPathProvider._rootPath">
            <summary>
            所有客户文件夹所在的父文件夹路径
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.BranchPathProvider.HasBranch">
            <summary>
            返回当前是否已经有分支版本进行了客户化。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.BranchPathProvider.AddBranch(System.String)">
            <summary>
            按照优先级调用此方法添加分支版本的路径。
            </summary>
            <param name="branchAppName"></param>
        </member>
        <member name="M:Rafy.MetaModel.BranchPathProvider.MapAllPathes(System.String,System.Boolean)">
            <summary>
            根据提供的版本文件（夹）路径，按优先级返回所有版本对应的文件名。
            </summary>
            <param name="versionPath"></param>
            <param name="toAbsolute"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.BranchPathProvider.GetCustomerFile(System.String)">
            <summary>
            找到客户化相对路径所对应的文件，按照版本的优先级寻找。
            
            从一个相对于版本目录的地址，获取到确切的文件相对地址，如：
            Images/1.jpg
            =>
            Files/DongFang/Images/1.jpg
            其中，分支版本名是不确定的。
            </summary>
            <param name="versionPath">与分支版本无关的文件路径。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.BranchPathProvider.FindCustomerFile(System.String)">
            <summary>
            找到客户化相对路径所对应的文件，按照版本的优先级寻找。
            
            从一个相对于版本目录的地址，获取到确切的文件相对地址，如：
            Images/1.jpg
            =>
            Files/DongFang/Images/1.jpg
            其中，分支版本名是不确定的。
            </summary>
            <param name="versionPath">与分支版本无关的文件路径。</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Utils.DateTimePart">
            <summary>
            系统的 DateTime 类型正在被使用的部分
            </summary>
        </member>
        <member name="F:Rafy.Utils.DateTimePart.DateTime">
            <summary>
            日期及时间都被使用
            Rafy 中属性编辑器的默认值。
            </summary>
        </member>
        <member name="F:Rafy.Utils.DateTimePart.Date">
            <summary>
            使用日期部分
            </summary>
        </member>
        <member name="F:Rafy.Utils.DateTimePart.Time">
            <summary>
            使用时间部分
            </summary>
        </member>
        <member name="T:Rafy.Utils.EnumViewModel">
            <summary>
            枚举值的逻辑视图
            </summary>
        </member>
        <member name="M:Rafy.Utils.EnumViewModel.#ctor(System.Enum)">
            <summary>
            构造函数
            </summary>
            <param name="value">枚举值</param>
        </member>
        <member name="P:Rafy.Utils.EnumViewModel.EnumValue">
            <summary>
            枚举值
            </summary>
        </member>
        <member name="P:Rafy.Utils.EnumViewModel.Label">
            <summary>
            枚举值的显示值
            </summary>
        </member>
        <member name="P:Rafy.Utils.EnumViewModel.TranslatedLabel">
            <summary>
            翻译后的枚举值的显示值
            </summary>
        </member>
        <member name="M:Rafy.Utils.EnumViewModel.Equals(System.Object)">
            <summary>
            EnumPropertyEditor 和其它地方中使用了这个方法来对比实体。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Utils.EnumViewModel.GetByEnumType(System.Type)">
            <summary>
            获取某个枚举类型下所有可用的视图值。
            
            注意：不加 Label 的枚举不显示。
            </summary>
            <param name="enumType">枚举类型。注意，支持传入 Nullable(Enum)。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Utils.EnumViewModel.EnumToLabel(System.Enum)">
            <summary>
            返回一个枚举值对应的 Label。
            如果该枚举值没有标记 Label，则返回 null。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Utils.EnumViewModel.Parse(System.String,System.Type,System.Boolean)">
            <summary>
            把 Label 或 Name 或 数值（字符串格式）解析为目标枚举类型中对应的枚举值。
            注意，如果无法转换时，会抛出异常。
            如果传入的是空字符串，则返回 null。
            </summary>
            <param name="labelOrNameOrValue">枚举对应的 Label、或名称、或对应的值。</param>
            <param name="enumType">枚举类型（不接受可空类型）</param>
            <param name="ignoreCase">在匹配时，是否需要忽略大小写。</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Utils.Freezable">
            <summary>
            一个可以被冻结的对象
            </summary>
        </member>
        <member name="P:Rafy.Utils.Freezable.IsFrozen">
            <summary>
            返回当前的对象是否已经被冻结了。
            子类可以在对状态进行更新时检查此属性。
            </summary>
        </member>
        <member name="M:Rafy.Utils.Freezable.Freeze">
            <summary>
            冻结本对象。
            冻结后，对象变为不可变对象。
            </summary>
        </member>
        <member name="M:Rafy.Utils.Freezable.CheckUnFrozen">
            <summary>
            调用此方法保证本对象还没有被冻结。否则会抛出异常。
            </summary>
        </member>
        <member name="M:Rafy.Utils.Freezable.OnFrozen">
            <summary>
            当对象被冻结时发生。
            </summary>
        </member>
        <member name="M:Rafy.Utils.Freezable.FreezeChildren(System.Collections.IList)">
            <summary>
            调用所有孩子的Freeze方法
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:Rafy.Utils.Freezable.FreezeChildren(System.Collections.IEnumerable)">
            <summary>
            调用所有孩子的Freeze方法
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:Rafy.Utils.Freezable.FreezeChildren(Rafy.Utils.Freezable[])">
            <summary>
            调用所有孩子的Freeze方法
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:Rafy.Utils.Freezable.CloneValues(Rafy.Utils.Freezable,Rafy.Utils.FreezableCloneOptions)">
            <summary>
            子类重写此方法来实现更复杂的复制功能。
            默认使用反射进行对象的拷贝。
            
            注意：
            集合字段，需要直接声明为 <![CDATA[IList<T>]]> 类型才能进行拷贝！！！
            </summary>
            <param name="target"></param>
            <param name="option"></param>
        </member>
        <member name="T:Rafy.Utils.FreezableCloneOptions">
            <summary>
            ready for extend
            </summary>
        </member>
        <member name="F:Rafy.Utils.FreezableCloneOptions.CopiedPairs">
            <summary>
            此数据用于防止循环引用对象时，进行重复的拷贝而导航溢出。
            </summary>
        </member>
        <member name="T:Rafy.Utils.UnAutoFreezeAttribute">
            <summary>
            标记此标记的所有字段都不会在冻结时，自动被 Freezable 基类冻结上。
            </summary>
        </member>
        <member name="T:Rafy.Utils.Caching.Cache">
            <summary>
            缓存子系统
            </summary>
        </member>
        <member name="M:Rafy.Utils.Caching.Cache.#ctor(Rafy.Utils.Caching.CacheProvider)">
            <summary>
            构造函数。
            </summary>
            <param name="cacheProvider">
            本缓存模块需要指定提供器。
            </param>
        </member>
        <member name="P:Rafy.Utils.Caching.Cache.IsEnabled">
            <summary>
            是否打开缓存功能？
            </summary>
        </member>
        <member name="M:Rafy.Utils.Caching.Cache.Get(System.String,System.String)">
            <summary>
            通过key和region从缓存中获取缓存项。
            如果不存在，则返回null。
            </summary>
            <param name="key"></param>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Utils.Caching.Cache.Add(System.String,System.Object,Rafy.Utils.Caching.Policy,System.String)">
            <summary>
            向缓存中添加一项。
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="policy">缓存使用的策略（一般是过期策略）</param>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Utils.Caching.Cache.Remove(System.String,System.String)">
            <summary>
            删除指定键值的缓存。
            </summary>
            <param name="key"></param>
            <param name="region"></param>
        </member>
        <member name="M:Rafy.Utils.Caching.Cache.ClearRegion(System.String)">
            <summary>
            清空某个区域下的所有数据。
            </summary>
            <param name="region"></param>
        </member>
        <member name="M:Rafy.Utils.Caching.Cache.Clear">
            <summary>
            清空所有缓存。
            </summary>
        </member>
        <member name="M:Rafy.Utils.Caching.Cache.Get``1(System.String,System.Func{``0},System.String,Rafy.Utils.Caching.Policy)">
            <summary>
            从缓存中获取指定的值。
            
            尝试使用缓存获取，如果不存在，则调用ifNotExists函数获取返回值，并添加到缓存中。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="ifNotExists"></param>
            <param name="regionName"></param>
            <param name="policy"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Utils.Caching.CacheProvider">
            <summary>
            通用缓存框架中的提供器
            </summary>
        </member>
        <member name="M:Rafy.Utils.Caching.CacheProvider.GetCacheItem(System.String,System.String)">
            <summary>
            通过key和region从缓存中获取缓存项。
            如果不存在，则返回null。
            </summary>
            <param name="key"></param>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Utils.Caching.CacheProvider.Add(System.String,System.Object,Rafy.Utils.Caching.Policy,System.String)">
            <summary>
            向缓存中添加一项。
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="policy">缓存使用的策略（一般是过期策略）</param>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Utils.Caching.CacheProvider.Remove(System.String,System.String)">
            <summary>
            把指定项从缓存中移除。
            </summary>
            <param name="key"></param>
            <param name="region"></param>
        </member>
        <member name="M:Rafy.Utils.Caching.CacheProvider.ClearRegion(System.String)">
            <summary>
            删除某个区域中的所有值。
            </summary>
            <param name="region"></param>
        </member>
        <member name="M:Rafy.Utils.Caching.CacheProvider.Clear">
            <summary>
            清空所有缓存。
            </summary>
        </member>
        <member name="T:Rafy.Utils.Caching.StoredValue">
            <summary>
            存储在缓存中的对象
            </summary>
        </member>
        <member name="F:Rafy.Utils.Caching.StoredValue.Value">
            <summary>
            真实的缓存值。
            </summary>
        </member>
        <member name="F:Rafy.Utils.Caching.StoredValue.Checker">
            <summary>
            缓存值获取时需要进行的检测。
            </summary>
        </member>
        <member name="T:Rafy.Utils.Caching.HybirdCacheProvider">
            <summary>
            综合使用内存和硬盘的缓存提供器。
            一级缓存：内存
            二级缓存：硬盘/数据库
            </summary>
        </member>
        <member name="F:Rafy.Utils.Caching.HybirdCacheProvider._memory">
            <summary>
            一级缓存：内存
            </summary>
        </member>
        <member name="F:Rafy.Utils.Caching.HybirdCacheProvider._disk">
            <summary>
            二级缓存：硬盘
            </summary>
        </member>
        <member name="M:Rafy.Utils.Caching.HybirdCacheProvider.#ctor(System.String)">
            <summary>
            使用指定的 sqlce 文件来作为二级缓存的硬盘缓存。
            </summary>
            <param name="sqlceFile"></param>
        </member>
        <member name="M:Rafy.Utils.Caching.HybirdCacheProvider.#ctor(Rafy.Utils.Caching.CacheProvider)">
            <summary>
            使用指定的硬盘缓存来构造二级缓存。
            </summary>
            <param name="diskProvider"></param>
        </member>
        <member name="T:Rafy.Utils.Caching.MemoryCacheProvider">
            <summary>
            内存缓存提供器
            
            使用System.Runtime.Caching.MemoryCache作为内部实现。
            由于MemoryCache不支持Region，所以这里使用RegionCache进行转换。
            </summary>
        </member>
        <member name="T:Rafy.Utils.Caching.SQLCompactCacheProvider">
            <summary>
            使用 SqlCe 的缓存提供器。
            </summary>
        </member>
        <member name="F:Rafy.Utils.Caching.SQLCompactCacheProvider._commonRegionName">
            <summary>
            所有未提供Region的项，都加入到这个Region中。
            </summary>
        </member>
        <member name="F:Rafy.Utils.Caching.SQLCompactCacheProvider._locker">
            <summary>
            SQL CE 3.5 不支持锁进制，但是ObjectCache必须实现多线程间同步。
            </summary>
        </member>
        <member name="F:Rafy.Utils.Caching.SQLCompactCacheProvider._syncRoot">
            <summary>
            由于SQLCE不支持多链接，所以打开/关闭链接时，需要手工进行同步。
            </summary>
        </member>
        <member name="F:Rafy.Utils.Caching.SQLCompactCacheProvider._cacheDir">
            <summary>
            文件缓存的文件夹名。
            如果某行的数据超过SQLCE的最大行长，则需要使用文件来缓存。
            </summary>
        </member>
        <member name="T:Rafy.Utils.Caching.NormalProvider">
            <summary>
            ObjectCache的一般实现
            </summary>
        </member>
        <member name="T:Rafy.Utils.Caching.RegionCache">
            <summary>
            使用装饰模式，把一个不支持Region的ObjectCache变为支持的。
            </summary>
        </member>
        <member name="T:Rafy.Utils.Caching.ChangeChecker">
            <summary>
            用于缓存是否过期的实时检测器
            </summary>
        </member>
        <member name="P:Rafy.Utils.Caching.ChangeChecker.HasChanged">
            <summary>
            是否已经发生了更改。
            </summary>
        </member>
        <member name="M:Rafy.Utils.Caching.ChangeChecker.Check">
            <summary>
            检测是否发生更改。
            </summary>
        </member>
        <member name="M:Rafy.Utils.Caching.ChangeChecker.NotifyChanged">
            <summary>
            子类调用方法通知发生了更改。
            </summary>
        </member>
        <member name="M:Rafy.Utils.Caching.ChangeChecker.GetMemoto">
            <summary>
            检测器需要实现Memoto模式，可能需要保存起来。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Utils.Caching.CheckerMemoto">
            <summary>
            ChangeChecker的可序列化的Memoto。
            </summary>
        </member>
        <member name="M:Rafy.Utils.Caching.CheckerMemoto.Restore">
            <summary>
            Memoto可以还原原有的ChangeChecker。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Utils.Caching.Policy">
            <summary>
            缓存策略
            </summary>
        </member>
        <member name="F:Rafy.Utils.Caching.Policy.Empty">
            <summary>
            一个空策略。
            </summary>
        </member>
        <member name="P:Rafy.Utils.Caching.Policy.Checker">
            <summary>
            缓存使用的实时检测器
            </summary>
        </member>
        <member name="M:Rafy.Utils.DateRange.#ctor(Rafy.Utils.DateRange)">
            <summary>
            克隆一个对象
            </summary>
            <param name="a"></param>
        </member>
        <member name="T:Rafy.Utils.EmitContext">
            <summary>
            一个简单的 Emit 上下文。
            目前只是提供了一个基本的 ModuleBuilder。
            </summary>
        </member>
        <member name="M:Rafy.Utils.EmitContext.GetDynamicModule">
            <summary>
            获取动态的模块，所有的类都生成在这个模块中。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Utils.NumberRange.#ctor(Rafy.Utils.NumberRange)">
            <summary>
            克隆一个对象
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:Rafy.Utils.ObjectCloner.Clone``1(``0)">
            <summary>
            使用序列化器来序列化反序列化的方式，深度复制一个对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Utils.PathHelper.ModifyPrivateBinPath(System.String)">
            <summary>
            修改当前程序的私有路径
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:Rafy.Utils.TypeNameComparer">
            <summary>
            类型的比较器
            </summary>
        </member>
        <member name="M:Rafy.Utils.TypeNameComparer.System#Collections#Generic#IComparer{System#Type}#Compare(System.Type,System.Type)">
            <summary>
            TypeNameComparer 先尝试使用Name来比较，如果一样，再使用NameSpace进行比较。
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.EnvironmentProvider">
            <summary>
            环境变量值提供器。
            </summary>
        </member>
        <member name="P:Rafy.EnvironmentProvider.RootDirectory">
            <summary>
            整个应用程序的根目录
            </summary>
        </member>
        <member name="P:Rafy.EnvironmentProvider.DllRootDirectory">
            <summary>
            Dll 存在的目录路径
            （Web 项目的路径是 RootDirectory+"/Bin"）
            </summary>
        </member>
        <member name="P:Rafy.EnvironmentProvider.IsDebuggingEnabled">
            <summary>
            在程序启动时，设置本属性以指示当前程序是否处于调试状态。
            </summary>
        </member>
        <member name="P:Rafy.EnvironmentProvider.Translator">
            <summary>
            当前使用的翻译器
            </summary>
        </member>
        <member name="T:Rafy.RafyConfiguration">
            <summary>
            Rafy 的配置。
            </summary>
        </member>
        <member name="P:Rafy.RafyConfiguration.Section">
            <summary>
            配置文件节对应的 WMSSection 配置节。相当于 Instance.WMSSection。
            </summary>
        </member>
        <member name="P:Rafy.RafyConfiguration.DevCulture">
            <summary>
            开发语言文化代码，默认值是 zh-CN。
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.ILOBProperty">
            <summary>
            大对象属性
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ILOBProperty.LOBType">
            <summary>
            LOB属性的类型
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.LOBType">
            <summary>
            LOB属性的类型
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.LOBType.String">
            <summary>
            长字符串
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.LOBType.Binary">
            <summary>
            长二进制流
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.ReferenceType">
            <summary>
            引用的类型。
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.ReferenceType.Normal">
            <summary>
            一般的外键引用
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.ReferenceType.Parent">
            <summary>
            此引用表示父实体的引用
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.ReferenceType.Child">
            <summary>
            此引用表示子实体的引用，一对一的子实体关系。
            <remarks>
            后期，可能不再需要这种一对一的子实体关系。
            主要是因为用的地方比较少，而且也可以直接使用一对多的子实体来表示。另外，Web 框架中目前也不支持。
            由于目前已经写了比较多的代码来支持，所以先暂时不删除。
            </remarks>
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.IPropertyMetadata">
            <summary>
            Rafy 中的属性元数据
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IPropertyMetadata.DateTimePart">
            <summary>
            如果当前是一个时间类型，则这个属性表示该时间类型正在被使用的部分。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IPropertyMetadata.AffectStatus">
            <summary>
            此属性的变更，是否会造成实体状态的变更（变脏）。
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.IListProperty">
            <summary>
            Rafy 列表属性
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IListProperty.ListEntityType">
            <summary>
            列表对应的实体类型
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IListProperty.HasManyType">
            <summary>
            一对多子属性的类型
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.IListProperty.GetMeta(System.Object)">
            <summary>
            为某个对象获取本属性的元数据
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.IListProperty.GetMeta(System.Type)">
            <summary>
            为某个类型获取本属性的元数据
            </summary>
            <param name="ownerType"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.ManagedProperty.HasManyType">
            <summary>
            一对多子属性的类型
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.HasManyType.Composition">
            <summary>
            组合（子对象）
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.HasManyType.Aggregation">
            <summary>
            聚合（简单引用）
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.IRafyListPropertyMetadata">
            <summary>
            列表属性的元数据
            
            暂无属性，留待扩展
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.IRefProperty">
            <summary>
            引用 Id 属性或者是引用实体属性。
            两类属性，都可以转换为此接口，方便统一使用方法。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IRefProperty.RefEntityType">
            <summary>
            引用实体的类型
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IRefProperty.ReferenceType">
            <summary>
            实体引用的类型
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IRefProperty.Nullable">
            <summary>
            该引用属性是否可空。
            如果引用Id属性的类型是引用类型（字符串）或者是一个 Nullable 类型，则这个属性返回 true。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IRefProperty.RefIdProperty">
            <summary>
            返回对应的引用 Id 属性。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IRefProperty.RefEntityProperty">
            <summary>
            返回对应的引用实体属性。
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.IRefIdProperty">
            <summary>
            引用实体属性的静态属性 Id 标记
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IRefIdProperty.KeyProvider">
            <summary>
            引用的实体的主键的算法程序。
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.IRefEntityProperty">
            <summary>
            引用实体属性的静态属性实体标记
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.CompiledPropertyDeclarerAttribute">
            <summary>
            编译/启动期属性声明器
            
            声明了托管属性（包括扩展属性）的类标记这个接口后，
            框架会在启动期自动查找这些类，并把其中的托管属性都初始化为启动期属性。
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.ConcreteProperty">
            <summary>
            某个具体类型的托管属性。
            
            由于 IManagedProperty 中只有 OwnerType、DeclareType，
            而当想表达该属性是从属于 OwnerType 的子类型时，则需要使用这个类来表达。
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.ConcreteProperty.#ctor(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            使用托管属性及它的 OwnerType 作为 ConcreteType 来构造一个 ConcreteProperty。
            </summary>
            <param name="property">托管属性</param>
        </member>
        <member name="M:Rafy.ManagedProperty.ConcreteProperty.#ctor(Rafy.ManagedProperty.IManagedProperty,System.Type)">
            <summary>
            构造器。
            </summary>
            <param name="property">托管属性</param>
            <param name="owner">该属性对应的具体类型。
            这个具体的类型必须是属性的拥有类型或者它的子类型。如果传入 null，则默认为属性的拥有类型。</param>
            <exception cref="T:System.ArgumentNullException">property</exception>
        </member>
        <member name="P:Rafy.ManagedProperty.ConcreteProperty.Name">
            <summary>
            属性名称。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ConcreteProperty.FullName">
            <summary>
            包含类型的全名称。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ConcreteProperty.Property">
            <summary>
            托管属性
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ConcreteProperty.Owner">
            <summary>
            该属性对应的具体类型。
            这个具体的类型必须是属性的拥有类型或者它的子类型。
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.ConcreteProperty.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化构造函数。
            
            需要更高安全性，加上 SecurityPermissionAttribute 标记。
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Rafy.ManagedProperty.ExtensionPropertiesRegister">
            <summary>
            一个动态注册扩展实体属性的类型。
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.ExtensionPropertiesRegister.RegisterCore">
            <summary>
            子类实现此方法来实现动态注册扩展实体属性的逻辑。
            注意，此方法中不能使用任何实体，否则触发该实体的静态构造函数，而在加载扩展属性前就加载非扩展属性，从而造成框架抛出异常。
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.FreezableMeta">
            <summary>
            一个可以被冻结的对象
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.FreezableMeta.IsFrozen">
            <summary>
            返回当前的对象是否已经被冻结了。
            子类可以在对状态进行更新时检查此属性。
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.FreezableMeta.Freeze">
            <summary>
            冻结本对象。
            冻结后，对象变为不可变对象。
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.FreezableMeta.Unfreeze">
            <summary>
            for unit test
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.FreezableMeta.CheckUnFrozen">
            <summary>
            调用此方法保证本对象还没有被冻结。否则会抛出异常。
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.IManagedPropertyObject">
            <summary>
            托管属性对象接口
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.IManagedPropertyObject.ResetProperty(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            重设属性为默认值
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Rafy.ManagedProperty.IManagedPropertyObject.GetProperty(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            获取某个托管属性的值。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.IManagedPropertyObject.GetProperty``1(Rafy.ManagedProperty.ManagedProperty{``0})">
            <summary>
            获取某个托管属性的值。
            </summary>
            <typeparam name="TPropertyType"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.IManagedPropertyObject.SetProperty(Rafy.ManagedProperty.ManagedProperty{System.Boolean},System.Boolean,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置某个 bool 类型托管属性的值。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="source">本次值设置的来源。</param>
            <returns>返回最终使用的值。</returns>
        </member>
        <member name="M:Rafy.ManagedProperty.IManagedPropertyObject.SetProperty(Rafy.ManagedProperty.IManagedProperty,System.Object,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置某个托管属性的值。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="source">本次值设置的来源。</param>
            <returns>返回最终使用的值。</returns>
        </member>
        <member name="M:Rafy.ManagedProperty.IManagedPropertyObject.LoadProperty(Rafy.ManagedProperty.IManagedProperty,System.Object)">
            <summary>
            LoadProperty 以最快的方式直接加载值，不发生 PropertyChanged 事件。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.ManagedProperty.IManagedPropertyObject.FieldExists(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            是否存在主动设置/加载的字段值（本地值）。
            </summary>
            <param name="property">托管属性</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.IManagedPropertyObject.GetCompiledPropertyValues">
            <summary>
            获取编译期属性值集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.IManagedPropertyObject.GetNonDefaultPropertyValues">
            <summary>
            获取当前对象所有非默认值的属性值集合。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.ManagedProperty.IManagedProperty">
            <summary>
            托管属性标记
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IManagedProperty.OwnerType">
            <summary>
            定义此属性的类型
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IManagedProperty.DeclareType">
            <summary>
            申明这个属性的类型
            
            如果这个属性是一个扩展属性，则这个值与 OwnerType 不同。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IManagedProperty.PropertyType">
            <summary>
            属性类型
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IManagedProperty.GlobalIndex">
            <summary>
            全局索引
            
            只在本次运行中有效，每次运行不保证一致。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IManagedProperty.LifeCycle">
            <summary>
            为本属性所定义的生命周期
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IManagedProperty.IsUnregistered">
            <summary>
            表示当前属性是否已经被注销、不再使用。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IManagedProperty.IsExtension">
            <summary>
            是否为扩展属性（一个类中为另一个类定义的扩展属性）
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IManagedProperty.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IManagedProperty.TypeCompiledIndex">
            <summary>
            如果此属性即是编译期属性，也不是只读的，则这个值表示该属性在对象中的索引。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IManagedProperty.DefaultMeta">
            <summary>
            获取 this.OwnerType 类型所对应的元数据。
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.IManagedProperty.GetMeta(System.Object)">
            <summary>
            为某个对象获取本属性的元数据
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.IManagedProperty.GetMeta(System.Type)">
            <summary>
            为某个类型获取本属性的元数据
            </summary>
            <param name="ownerType"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.ManagedProperty.IManagedPropertyInternal">
            <summary>
            内部使用的接口
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedProperty`1.OwnerType">
            <summary>
            定义此属性的类型
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedProperty`1.DeclareType">
            <summary>
            申明这个属性的类型
            
            如果这个属性是一个扩展属性，则这个值与 OwnerType 不同。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedProperty`1.Name">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedProperty`1.IsUnregistered">
            <summary>
            表示当前属性是否已经被注销、不再使用。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedProperty`1.LifeCycle">
            <summary>
            为本属性所定义的生命周期
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedProperty`1.GlobalIndex">
            <summary>
            全局索引
            
            只在本次运行中有效，每次运行不保证一致。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedProperty`1.IsExtension">
            <summary>
            是否为扩展属性（一个类中为另一个类定义的扩展发展）
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedProperty`1.TypeCompiledIndex">
            <summary>
            如果此属性即是编译期属性，也不是只读的，则这个值表示该属性在对象中的索引。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedProperty`1.PropertyType">
            <summary>
            属性类型
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedProperty`1.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedProperty`1.AsReadOnly(System.Func{Rafy.ManagedProperty.ManagedPropertyObject,`0},Rafy.ManagedProperty.IManagedProperty[])">
            <summary>
            声明本属性为只读属性
            </summary>
            <param name="readOnlyValueProvider"></param>
            <param name="dependencies"></param>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedProperty`1.DefaultMeta">
            <summary>
            获取 this.OwnerType 类型所对应的元数据。
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedProperty`1.GetMeta(System.Object)">
            <summary>
            为某个对象获取本属性的元数据
            </summary>
            <param name="owner">
            当前属性的声明类或者它的子类的实例
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedProperty`1.GetMeta(System.Type)">
            <summary>
            为某个类型获取本属性的元数据
            </summary>
            <param name="ownerType">
            当前属性的声明类或者它的子类
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedProperty`1.OverrideMeta``1(System.Type,``0,System.Action{``0})">
            <summary>
            为某个子类重写元数据
            </summary>
            <typeparam name="TMeta">The type of the meta.</typeparam>
            <param name="ownerSubType">子类的类型。</param>
            <param name="overrideMeta">一个全新的元数据对象。</param>
            <param name="overrideValues">覆盖某些属性的方法。</param>
            <exception cref="T:System.ArgumentNullException">ownerSubType
            or
            overrideValues</exception>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedProperty`1.CloneMeta``1(System.Type,``0)">
            <summary>
            把当前的元数据的值全部合并到 overrideMeta 上。
            </summary>
            <typeparam name="TMeta"></typeparam>
            <param name="ownerSubType"></param>
            <param name="overrideMeta"></param>
        </member>
        <member name="T:Rafy.ManagedProperty.ManagedPropertyChangedEventArgs">
            <summary>
            泛型版本的属性变更事件
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyChangedEventArgs.NewValue">
            <summary>
            变更后的值
            
            注意，如果是只读属性，则这个值永远是默认值。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyChangedEventArgs.OldValue">
            <summary>
            变更前的值
            
            注意，如果是只读属性，则这个值永远是默认值。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyChangedEventArgs.Property">
            <summary>
            对应的托管属性
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyChangedEventArgs.Source">
            <summary>
            变更源
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.ManagedPropertyChangedSource">
            <summary>
            属性变更源
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.ManagedPropertyChangedSource.FromProperty">
            <summary>
            一般的属性设置（来自代码）
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.ManagedPropertyChangedSource.FromUIOperating">
            <summary>
            来自界面操作
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.IManagedPropertyChangingEventArgs">
            <summary>
            属性变更前事件
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IManagedPropertyChangingEventArgs.Cancel">
            <summary>
            设置本属性的值可以取消本次属性设置操作
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IManagedPropertyChangingEventArgs.Value">
            <summary>
            设置的属性值
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IManagedPropertyChangingEventArgs.HasCoercedValue">
            <summary>
            是否已经变更了 CoercedValue 属性
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IManagedPropertyChangingEventArgs.CoercedValue">
            <summary>
            设置本属性的值可以强制更改本次属性设置的最终值
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IManagedPropertyChangingEventArgs.Property">
            <summary>
            对应的属性
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IManagedPropertyChangingEventArgs.Source">
            <summary>
            变更源
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.ManagedPropertyChangingEventArgs`1">
            <summary>
            泛型版本的属性变更前事件
            </summary>
            <typeparam name="TPropertyType">属性类型</typeparam>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyChangingEventArgs`1.Value">
            <summary>
            设置的属性值
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyChangingEventArgs`1.CoercedValue">
            <summary>
            设置本属性的值可以强制更改本次属性设置的最终值
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyChangingEventArgs`1.HasCoercedValue">
            <summary>
            是否已经变更了 CoercedValue 属性
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyChangingEventArgs`1.Property">
            <summary>
            对应的属性
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyChangingEventArgs`1.Source">
            <summary>
            变更源
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.ManagedPropertyField">
            <summary>
            托管属性的字段值。
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.ManagedPropertyField.DefaultValue">
            <summary>
            所有字段的默认值。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyField.Property">
            <summary>
            对应的托管属性
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyField.Value">
            <summary>
            字段的值
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyField.HasValue">
            <summary>
            返回字段是否已经有值，而非使用默认值。
            此属性不能公布：
            有时 Value 属性的值会被设置为字段的默认值，虽然这时 HasValue 为真，但是值本身还是默认值，
            所以不能简单地通过这个属性来判断是否本字段的值是默认值。
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.ManagedPropertyLifeCycle">
            <summary>
            托管属性生命周期
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.ManagedPropertyLifeCycle.Compile">
            <summary>
            编译期、启动期
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.ManagedPropertyLifeCycle.Runtime">
            <summary>
            运行期（动态属性）
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.IManagedPropertyMetadata">
            <summary>
            托管属性元数据
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IManagedPropertyMetadata.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IManagedPropertyMetadata.Serializable">
            <summary>
            是否支持序列化
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.IManagedPropertyMetadataInternal">
            <summary>
            内部使用的 托管属性元数据
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.ManagedPropertyMetadata`1">
            <summary>
            泛型版本的托管属性元数据
            </summary>
            <typeparam name="TPropertyType"></typeparam>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyMetadata`1.DefaultValue">
            <summary>
            默认值
            get { return (TPropertyType)this._provider.GetDefaultValue(); }
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyMetadata`1.Serializable">
            <summary>
            是否支持序列化。
            默认为 true。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyMetadata`1.CoerceGetValueCallBack">
            <summary>
            属性获取时的强制逻辑回调
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyMetadata`1.PropertyChangingCallBack">
            <summary>
            属性变更前回调
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyMetadata`1.PropertyChangedCallBack">
            <summary>
            属性变更后回调
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.ManagedPropertyCoerceGetValueCallBack`1">
            <summary>
            属性获取时的强制逻辑回调
            </summary>
            <typeparam name="TPropertyType"></typeparam>
            <param name="o"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.ManagedProperty.ManagedPropertyChangingCallBack`1">
            <summary>
            属性变更前回调
            </summary>
            <typeparam name="TPropertyType"></typeparam>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="T:Rafy.ManagedProperty.ManagedPropertyChangedCallBack">
            <summary>
            属性变更后回调
            </summary>
            <param name="o">The automatic.</param>
            <param name="e">The <see cref="T:Rafy.ManagedProperty.ManagedPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Rafy.ManagedProperty.ManagedPropertyObject">
            <summary>
            托管属性对象
            
            从此类继承的子类，可以以托管属性的方式声明自己的所有属性。同时，其它的类型可以为其在扩展编译期属性，也可以在运行时动态扩展属性，
            </summary>
            <summary>
            运行时动态属性的实现。
            
            概念：动态属性表示可以在运行时为单个实体随意添加的属性。同一类型的各个实体实例间的动态属性是互不相关的。
            </summary>
            <remarks>大部分代码拷贝自：<see cref="T:Rafy.Extendable"/>。</remarks>
            <summary>
            此文件中代码主要处理 ManagedPropertyObject 对象的序列化相关代码。
            其中包含系统序列化 和 Mobile 序列化
            
            ManagedPropertyObject 继承自 MobileObject，使得其支持自定义序列化（JSON等各种格式）
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.ManagedProperty.ManagedPropertyObject"/> class.
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyObject.PropertiesContainer">
            <summary>
            本对象所有的属性容器
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.FindPropertiesContainer">
            <summary>
            子类重写此方法以使用更高效的属性容器查找方法。
            </summary>
            <returns></returns>
        </member>
        <member name="F:Rafy.ManagedProperty.ManagedPropertyObject._compiledFields">
            <summary>
            编译期属性以数组方式存储，使得检索速度是 O(1)
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.ManagedPropertyObject._runtimeFields">
            <summary>
            由于运行时属性不会很多，所以使用 Dictionary 类来进行更快速的检索。
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.InitFields(System.Collections.Generic.IList{Rafy.ManagedProperty.IManagedProperty})">
            <summary>
            通过编译期属性来初始化字段数组。
            </summary>
            <param name="compiledProperties"></param>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject._ResetProperty(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            重设为默认值
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject._SetProperty(Rafy.ManagedProperty.IManagedProperty,System.Object,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置某个属性的值。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="source"></param>
            <returns>返回最终使用的值。</returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject._LoadProperty(Rafy.ManagedProperty.IManagedProperty,System.Object)">
            <summary>
            LoadProperty 直接设置值，不发生 PropertyChanged 事件。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.NeedReset(Rafy.ManagedProperty.IManagedProperty,System.Object)">
            <summary>
            如果把 null 赋值给一个值类型，则直接还原此属性为默认值。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.ResetProperty(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            重设属性为默认值
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.GetProperty(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            获取某个托管属性的值。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.GetProperty``1(Rafy.ManagedProperty.ManagedProperty{``0})">
            <summary>
            获取某个托管属性的值。
            </summary>
            <typeparam name="TPropertyType"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.SetProperty(Rafy.ManagedProperty.ManagedProperty{System.Boolean},System.Boolean,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置某个 bool 类型托管属性的值。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="source">本次值设置的来源。</param>
            <returns>返回最终使用的值。</returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.SetProperty(Rafy.ManagedProperty.IManagedProperty,System.Object,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置某个托管属性的值。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="source">本次值设置的来源。</param>
            <returns>返回最终使用的值。</returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.LoadProperty(Rafy.ManagedProperty.IManagedProperty,System.Object)">
            <summary>
            LoadProperty 以最快的方式直接加载值，不发生 PropertyChanged 事件。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.NotifyAllPropertiesChanged">
            <summary>
            对所有的属性都发生属性变更事件。
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.NotifyPropertyChanged(Rafy.ManagedProperty.IManagedProperty,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            向子类公布一个方法，这样子类可以使用 IManagedProperty 来进行属性变更通知。
            注意，这个方法发布的事件，NewValue、OldValue 将不可用。
            </summary>
            <param name="property"></param>
            <param name="source"></param>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.OnPropertyChanged(Rafy.ManagedProperty.ManagedPropertyChangedEventArgs)">
            <summary>
            子类重写此方法实现某个扩展属性变更后的处理函数
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.OnPropertyChanged(System.String)">
            <summary>
            子类重写此方法实现某个属性变更后的处理函数
            默认实现中，会触发本对象的 PropertyChanged 事件。
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="E:Rafy.ManagedProperty.ManagedPropertyObject.PropertyChanged">
            <summary>
            属性变更后事件。
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.GetCompiledPropertyValues">
            <summary>
            获取编译期属性值集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.GetNonDefaultPropertyValues">
            <summary>
            获取当前对象所有非默认值的属性值集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.FieldExists(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            是否存在主动设置/加载的字段值（本地值）。
            </summary>
            <param name="property">托管属性</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyObject.DebuggerDisplay">
            <summary>
            调试器显示文本
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.ToString">
            <summary>
            返回 this.DebuggerDisplay。
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="F:Rafy.ManagedProperty.ManagedPropertyObject._dynamics">
            <summary>
            由于运行时动态属性不会很多，所以使用 Dictionary 类来进行更快速的检索。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyObject.DynamicPropertiesCount">
            <summary>
            返回当前已经添加的动态属性的个数。
            概念：动态属性表示可以在运行时为单个实体随意添加的属性。同一类型的各个实体实例间的动态属性是互不相关的。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyObject.Item(System.String)">
            <summary>
            获取或设置动态属性的值。
            
            注意，如果设置 null 值，则表示清空该属性。
            </summary>
            <param name="dynamicProperty">对应的动态属性的名称。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.GetDynamicPropertyOrDefault``1(System.String,``0)">
            <summary>
            获取指定名称的动态属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dynamicProperty">对应的动态属性的名称。</param>
            <param name="defaultValue">如果属性还没有值，则返回这个默认值。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.GetDynamicProperty(System.String,System.Type)">
            <summary>
            获取动态属性的值。
            </summary>
            <param name="dynamicProperty">对应的动态属性的名称。</param>
            <param name="desiredType">需要转换的类型。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.SetDynamicProperty(System.String,System.Object)">
            <summary>
            设置某个动态属性为指定的值。
            </summary>
            <param name="dynamicProperty">对应的动态属性的名称。</param>
            <param name="value">要设置的值。</param>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.SetDynamicProperty(System.String,System.Boolean)">
            <summary>
            设置某个动态属性为指定的值。
            </summary>
            <param name="dynamicProperty">对应的动态属性的名称。</param>
            <param name="value">要设置的值。</param>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.GetDynamicProperties">
            <summary>
            获取已经设置的所有的动态属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.Serialize(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化数据到 info 中。
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.ManagedProperty.ManagedPropertyObject"/> class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化完成时，调用此函数。
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyObject.OnDeserialized(Rafy.Serialization.DesirializedArgs)">
            <summary>
            反序列化完成后的回调函数。
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Rafy.ManagedProperty.ManagedPropertyObject.ManagedPropertyObjectTypeProxy">
            <summary>
            ManagedPropertyObject 使用这个类型在 Debugger 中显示字段列表。
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.ManagedPropertyObjectList`1">
            <summary>
            托管属性对象的集合基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Rafy.ManagedProperty.CLRPropertyDescriptor">
            <summary>
            CLR 属性的描述器
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.ManagedPropertyDescriptor">
            <summary>
            托管属性的描述器
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.PropertyDescriptorFactory">
            <summary>
            ManagedPropertyObject 的 PropertyDescriptor 工厂
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.PropertyDescriptorFactory.Current">
            <summary>
            当前正在被使用的属性描述器工厂
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.PropertyDescriptorFactory.CreateDescriptor(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            子类重写此方法实现新的扩展属性描述器的生成。
            </summary>
            <param name="mp"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.ManagedProperty.ConsolidatedTypePropertiesContainer">
            <summary>
            联合属性容器
            
            此容器中存放了类型及其基类的所有托管属性。
            外部一般使用此类
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.ConsolidatedTypePropertiesContainer.PropertyDescriptors">
            <summary>
            为界面层使用反射提供属性描述器集合。
            
            直接在此申明一个字段保存该值，提高查询的效率。
            所有的逻辑都在 PropertyDescriptorFactory 类中。
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.ConsolidatedTypePropertiesContainer.GetNonReadOnlyCompiledProperties">
            <summary>
            获取编译时非只读属性的列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ConsolidatedTypePropertiesContainer.GetCompiledProperties">
            <summary>
            获取编译时属性列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ConsolidatedTypePropertiesContainer.GetRuntimeProperties">
            <summary>
            获取动态运行时属性列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ConsolidatedTypePropertiesContainer.GetAvailableProperties">
            <summary>
            获取当前可用的属性列表，包括编译时属性、动态运行时属性。
            </summary>
            <returns></returns>
        </member>
        <member name="E:Rafy.ManagedProperty.ConsolidatedTypePropertiesContainer.RuntimePropertiesChanged">
            <summary>
            运行时属性变更事件
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.ConsolidatedTypePropertiesContainer.ChangeWithHierarchy">
            <summary>
            父类中任何一个在改变时，子类都需要变化。
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.ManagedPropertyList">
            <summary>
            一个托管属性的只读列表。
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyList.AddRange(System.Collections.Generic.IEnumerable{Rafy.ManagedProperty.IManagedProperty})">
            <summary>
            唯一的，可修改集合内部数据的操作。
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyList.Find(System.String)">
            <summary>
            可以通过属性的名称来快速查找集合中的托管属性。
            复杂度：Log(n)
            </summary>
            <param name="propertyName">托管属性名称</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName</exception>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyList.Find(System.String,System.Boolean)">
            <summary>
            可以通过属性的名称来快速查找集合中的托管属性。
            复杂度：Log(n)
            </summary>
            <param name="propertyName">托管属性名称</param>
            <param name="ignoreCase">是否忽略大小写。
            注意，如果是忽略大小写的方式，那么是按顺序在集合中进行查询。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName</exception>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyList.GetEnumerator">
            <summary>
            列表的枚举器。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.ManagedProperty.ManagedPropertyRepository">
            <summary>
            托管属性仓库
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ManagedPropertyRepository.IsExtensionRegistered">
            <summary>
            是否所有扩展属性都已经被注册完成。
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.ManagedPropertyRepository._isRegisteringExtension">
            <summary>
            是否正在扩展属性注册过程中。
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyRepository.IntializeExtension(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            通过所有包含扩展属性的程序集来初始化所有的扩展属性。
            
            注意，扩展属性需要在程序启动时就完全注册完成，否则托管属性类型并不知道自己最终会有哪些属性。
            </summary>
            <param name="assemblies"></param>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyRepository.SearchAllExtensionDeclarers(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            获取所有标记了 CompiledPropertyDeclarerAttribute 的类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyRepository.SearchAllExtensionRegisters(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            获取所有 ExtensionPropertiesRegister 的子类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyRepository.UnRegisterAllRuntimeProperties(System.Type)">
            <summary>
            注销某个类型所对应的所有运行时属性
            </summary>
            <param name="ownerType"></param>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyRepository.UnRegister(Rafy.ManagedProperty.IManagedProperty[])">
            <summary>
            注销指定的属性集合
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyRepository.RegisterProperty``1(Rafy.ManagedProperty.ManagedProperty{``0})">
            <summary>
            注册某个属性到容器中
            
            线程安全。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyRepository.GetTypePropertiesContainer(System.Type)">
            <summary>
            获取某个类型的已经注册的所有可用属性
            </summary>
            <param name="ownerType"></param>
            <returns></returns>
        </member>
        <member name="F:Rafy.ManagedProperty.ManagedPropertyRepository._lastResultCache">
            <summary>
            最后一次使用的类型缓存，此字段不需要同步锁。
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyRepository.GetOrCreateTypeProperties(System.Type)">
            <summary>
            获取某个类型的已经注册的所有可用属性。
            
            如果该类型还没有创建相应的容器，则递归为该类型及其基类型创建相应的属性容器。
            </summary>
            <param name="ownerType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyRepository.CompleteCompileProperties(Rafy.ManagedProperty.TypePropertiesContainer)">
            <summary>
            完成所有编译期属性的注册。此时会变更 container 的对应生成周期，并为其设置 ConsolidatedContainer 属性。
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyRepository.RunPropertyResigtry(System.Type)">
            <summary>
            执行某个托管属性声明类型的静态构造函数，以保证其中的所有静态字段都被初始化完成。
            如果已经执行过，则不会再次执行。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.ManagedPropertyRepository.DeferSortingCompiledProperties">
            <summary>
            在 Using 语句最后释放时，才排序所有字段，提高效率。
            
            但是暂时没有使用，没有提高明显的效率。待验证。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.ManagedProperty.TypePropertiesContainer">
            <summary>
            属性容器
            类型本身的托管属性的容器
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.TypePropertiesContainer.Lock">
            <summary>
            在变更本容器时，都应该执行加锁操作。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.TypePropertiesContainer.OwnerType">
            <summary>
            对应的类型
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.TypePropertiesContainer.BaseType">
            <summary>
            基类的属性容器
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.TypePropertiesContainer.ConsolidatedContainer">
            <summary>
            对应的联合属性容器
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.TypePropertiesContainer.GetCompiledProperties">
            <summary>
            当前类型声明的编译期属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.TypePropertiesContainer.GetRuntimeProperties">
            <summary>
            当前类型声明的运行时属性
            </summary>
            <returns></returns>
        </member>
        <member name="E:Rafy.ManagedProperty.TypePropertiesContainer.RuntimePropertiesChanged">
            <summary>
            运行时属性变更事件
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.TypePropertiesContainer.NotifyRuntimeChanged">
            <summary>
            使用这个事件，通知本类的子类也应该更新动态属性列表。
            </summary>
        </member>
        <member name="T:Rafy.AnonymousPrincipal">
            <summary>
            匿名身份。
            </summary>
        </member>
        <member name="T:Rafy.PermissionProvider">
            <summary>
            权限提供程序。
            </summary>
        </member>
        <member name="M:Rafy.PermissionProvider.CanShowModule(Rafy.MetaModel.ModuleMeta)">
            <summary>
            是否能显示某个模块
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.PermissionProvider.CanShowBlock(Rafy.MetaModel.ModuleMeta,Rafy.MetaModel.View.Block)">
            <summary>
            控制某一个块是否可以显示
            </summary>
            <param name="module"></param>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.PermissionProvider.HasOperation(Rafy.MetaModel.ModuleMeta,Rafy.MetaModel.ModuleOperation)">
            <summary>
            是否有某个操作的权限
            </summary>
            <param name="module"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.PermissionProvider.HasCommand(Rafy.MetaModel.ModuleMeta,Rafy.MetaModel.View.Block,System.String)">
            <summary>
            是否能执行某个命令
            </summary>
            <param name="module"></param>
            <param name="block"></param>
            <param name="commandName"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.EmptyTranslator">
            <summary>
            不支持更换其它语言的翻译器
            </summary>
        </member>
        <member name="T:Rafy.Translator">
            <summary>
            语言提供器
            </summary>
        </member>
        <member name="F:Rafy.Translator._currentCulture">
            <summary>
            当前文化
            </summary>
        </member>
        <member name="F:Rafy.Translator._isDevCulture">
            <summary>
            是否直接使用开发语言
            </summary>
        </member>
        <member name="F:Rafy.Translator._autoCollect">
            <summary>
            是否正在收集所有开发语言。
            </summary>
        </member>
        <member name="F:Rafy.Translator._collected">
            <summary>
            收集到的所有语言。
            </summary>
        </member>
        <member name="P:Rafy.Translator.Enabled">
            <summary>
            是否启用整个多语言功能。
            </summary>
        </member>
        <member name="P:Rafy.Translator.AutoCollect">
            <summary>
            是否启动语言收集功能
            </summary>
        </member>
        <member name="P:Rafy.Translator.CurrentCulture">
            <summary>
            系统当前的文化标识。
            </summary>
        </member>
        <member name="P:Rafy.Translator.CollectedList">
            <summary>
            获取收集到的所有字符串。
            </summary>
        </member>
        <member name="M:Rafy.Translator.Collect(System.String)">
            <summary>
            收集某个开发语言。
            </summary>
            <param name="devCulture"></param>
        </member>
        <member name="M:Rafy.Translator.OnCollected(System.String)">
            <summary>
            某个开发语言被收集后发生。
            </summary>
            <param name="devCulture"></param>
        </member>
        <member name="M:Rafy.Translator.IgnoreCollect(System.String)">
            <summary>
            忽略某个字符串的收集。
            
            一般使用在动态拼接字符串的情况下。
            </summary>
            <param name="words">一个不希望被翻译引擎收集的字符串。</param>
        </member>
        <member name="M:Rafy.Translator.Translate(System.String)">
            <summary>
            通过代码中直接编写的语言，翻译为对应当前语言。
            
            实现时，注意，此方法与 TranslateReverse 互为可逆的操作。
            </summary>
            <param name="devCulture">代码中直接编写的语言。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Translator.TranslateCore(System.String,System.String@)">
            <summary>
            通过代码中直接编写的语言，翻译为对应当前语言。
            
            实现时，注意，此方法与 TranslateReverseCore 互为可逆的操作。
            </summary>
            <param name="devCulture">代码中直接编写的语言。</param>
            <param name="result">翻译后的结果。</param>
            <returns>是否成功翻译。如果翻译失败，基类会把结果收集起来。</returns>
        </member>
        <member name="M:Rafy.Translator.TranslateReverse(System.String)">
            <summary>
            通过当前语言，翻译为对应代码中直接编写的语言。
            
            实现时，注意，此方法与 Translate 互为可逆的操作。
            </summary>
            <param name="currentCulture">当前语言对应的语句。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Translator.TranslateReverseCore(System.String)">
            <summary>
            通过当前语言，翻译为代码中直接编写的语言。
            
            实现时，注意，此方法与 TranslateCore 互为可逆的操作。
            </summary>
            <param name="currentCulture"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Translator.GetSupportCultures">
            <summary>
            所有支持的语言。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Translator.OnCurrentCultureChanged">
            <summary>
            当前文化项发生改变时的事件。
            </summary>
        </member>
        <member name="M:Rafy.Translator.IsDevCulture(System.String)">
            <summary>
            判断指定的语言是否为开发语言。
            </summary>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.RafyEnvironment">
            <summary>
            Rafy 的上下文环境
            </summary>
            <summary>
            Library Module Plugins
            </summary>
        </member>
        <member name="P:Rafy.RafyEnvironment.Provider">
            <summary>
            获取应用程序环境的值提供器。
            </summary>
            <value>
            The provider.
            </value>
        </member>
        <member name="F:Rafy.RafyEnvironment.Configuration">
            <summary>
            Rafy 配置信息。
            </summary>
        </member>
        <member name="P:Rafy.RafyEnvironment.Identity">
            <summary>
            返回当前上下文中的当前用户。
            
            本属性不会为 null，请使用 IsAuthenticated 属性来判断是否已经登录。
            
            如果想使用实体的 Id 属性，可尝试将此属性转换为 <see cref="T:Rafy.IRafyIdentity"/> 接口。
            </summary>
        </member>
        <member name="P:Rafy.RafyEnvironment.Principal">
            <summary>
            返回当前上下文中的当前身份。
            </summary>
        </member>
        <member name="M:Rafy.RafyEnvironment.Translate(System.String)">
            <summary>
            把程序中编写的字符串翻译为当前语言。
            
            直接扩展在字符串上的翻译方法，方便使用
            </summary>
            <param name="embadedValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.TranslateReverse(System.String)">
            <summary>
            把当前语言翻译为程序中编写的字符串。
            
            直接扩展在字符串上的翻译方法，方便使用
            </summary>
            <param name="translatedValue"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.RafyEnvironment.App">
            <summary>
            当前的应用程序运行时。
            </summary>
        </member>
        <member name="P:Rafy.RafyEnvironment.BranchProvider">
            <summary>
            查找文件路径的查找算法提供器。
            </summary>
        </member>
        <member name="M:Rafy.RafyEnvironment.InitCustomizationPath">
            <summary>
            提供一个先初始化路径的方法，这个方法可以单独先被调用。
            这样，就可以通过路径找到需要的程序集，其它的初始化才能正常进行。
            </summary>
        </member>
        <member name="M:Rafy.RafyEnvironment.GetCustomerEntityDlls(System.Boolean)">
            <summary>
            获取所有此版本中需要加载的实体类Dll集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.GetCustomerModuleDlls">
            <summary>
            获取所有此版本中需要加载的模块Dll集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.MapDllPath(System.String)">
            <summary>
            使用一个相对的路径来计算绝对路径
            </summary>
            <param name="appRootRelative"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.MapAbsolutePath(System.String)">
            <summary>
            相对路径转换为绝对路径。
            </summary>
            <param name="appRootRelative"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.MapRelativePath(System.String)">
            <summary>
            把绝对路径转换为相对路径。
            </summary>
            <param name="absolutePath"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.RafyEnvironment.IsDebuggingEnabled">
            <summary>
            当前是否正处于调试状态。
            </summary>
        </member>
        <member name="P:Rafy.RafyEnvironment.Location">
            <summary>
            当前应用程序的位置信息。
            
            对应的位置：
            单机版：IsWPFUI = true, DataPortalMode = DirectConnect；
            Web 服务器：IsWebUI = true, DataPortalMode = DirectConnect；
            C/S 客户端：IsWPFUI = true, DataPortalMode = ThroughService；
            C/S 服务端（默认值）：IsWPFUI = flase, IsWebUI = flase, DataPortalMode = DirectConnect；
            </summary>
        </member>
        <member name="M:Rafy.RafyEnvironment.ResetLocation">
            <summary>
            使用这个方法后，Location 会被重置，这样可以再次对该属性进行设置。
            </summary>
        </member>
        <member name="P:Rafy.RafyEnvironment.ThreadPortalCount">
            <summary>
            获取当前线程目前已经进入的数据门户层数。
            </summary>
        </member>
        <member name="M:Rafy.RafyEnvironment.IsOnServer">
            <summary>
            判断是否在服务端。
            
            如果是单机版，则当进入至少一次数据门户后，才能算作服务端，返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.IsOnClient">
            <summary>
            判断是否在客户端
            单机版，如果还没有进入数据门户中，则同样返回 true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.NewLocalId">
            <summary>
            返回一个本地的 Id，该 Id 在当前应用程序中是唯一的，每次调用都会自增一。
            </summary>
            <returns></returns>
        </member>
        <member name="F:Rafy.RafyEnvironment.DebugHelper">
            <summary>
            帮助调试的变量，可随时把即时窗口中的临时对象放在这里进行查看。
            </summary>
        </member>
        <member name="M:Rafy.RafyEnvironment.InitExtensionProperties">
            <summary>
            注册所有插件中的扩展托管属性
            </summary>
        </member>
        <member name="P:Rafy.RafyEnvironment.DomainPlugins">
            <summary>
            当前程序所有可运行的领域实体插件。
            </summary>
        </member>
        <member name="P:Rafy.RafyEnvironment.UIPlugins">
            <summary>
            当前程序所有可运行的界面插件程序集。
            </summary>
        </member>
        <member name="P:Rafy.RafyEnvironment.AllPlugins">
            <summary>
            获取当前环境被初始化的所有插件。
            </summary>
        </member>
        <member name="M:Rafy.RafyEnvironment.InitPlugins">
            <summary>
            启动所有的插件
            </summary>
        </member>
        <member name="M:Rafy.RafyEnvironment.SearchAllRootTypes">
            <summary>
            遍历系统中存在的所有聚合根类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.GetRootType(System.Type)">
            <summary>
            获取一个实体类型的根类型。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.GetTypeConfigurations">
            <summary>
            获取所有的实体配置列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.FindConfigurations(System.Type)">
            <summary>
            获取某个实体视图的所有配置类实例
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.ViewConfigFinder`1.FindViewConfigurations(System.Type,System.String)">
            <summary>
            获取某个实体视图的所有配置类实例
            </summary>
            <param name="entityType"></param>
            <param name="extendView">如果想获取扩展视图列表，则需要传入指定的扩展视图列表</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.LocationInformation">
            <summary>
            当前应用程序执行环境的位置信息。
            
            对应旧的 RafyLocation：
            单机版：IsWPFUI = true, DataPortalMode = ConnectDirectly；
            C/S 客户端：IsWPFUI = true, DataPortalMode = ThroughService；
            C/S 服务端：IsWPFUI = flase, DataPortalMode = ConnectDirectly；
            Web 服务器：IsWebUI = true, DataPortalMode = ConnectDirectly；
            </summary>
        </member>
        <member name="P:Rafy.LocationInformation.IsWPFUI">
            <summary>
            当前应用程序是否是一个 WPF UI 应用程序。
            </summary>
        </member>
        <member name="P:Rafy.LocationInformation.IsWebUI">
            <summary>
            当前应用程序是否是一个 Web UI 应用程序。
            </summary>
        </member>
        <member name="P:Rafy.LocationInformation.DataPortalMode">
            <summary>
            应用程序默认的数据门户模式。
            </summary>
        </member>
        <member name="P:Rafy.LocationInformation.ConnectDataDirectly">
            <summary>
            是否应用程序直接连接数据。
            DataPortalMode == DataPortalMode.DirectConnect。
            </summary>
        </member>
        <member name="P:Rafy.LocationInformation.IsUI">
            <summary>
            当前应用程序是否是一个 UI 应用程序。
            </summary>
        </member>
        <member name="T:Rafy.DataPortalMode">
            <summary>
            数据门户模式。
            </summary>
        </member>
        <member name="F:Rafy.DataPortalMode.ConnectDirectly">
            <summary>
            应用程序直接连接数据。
            </summary>
        </member>
        <member name="F:Rafy.DataPortalMode.ThroughService">
            <summary>
            应用程序通过服务来连接数据。
            </summary>
        </member>
        <member name="T:Rafy.AnonymousIdentity">
            <summary>
            匿名用户。
            </summary>
        </member>
        <member name="T:Rafy.IRafyIdentity">
            <summary>
            当前用户的接口定义
            为后期扩展预留的接口。
            </summary>
        </member>
        <member name="P:Rafy.IRafyIdentity.Id">
            <summary>
            用户的 Id。
            
            如果未被验证，则此值返回 0。
            </summary>
        </member>
        <member name="T:Rafy.PermissionMgr">
            <summary>
            系统权限的抽象定义
            </summary>
        </member>
        <member name="P:Rafy.PermissionMgr.Provider">
            <summary>
            所有接口的提供程序。
            </summary>
        </member>
        <member name="M:Rafy.PermissionMgr.CanShowModule(Rafy.MetaModel.ModuleMeta)">
            <summary>
            是否能显示某个模块
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.PermissionMgr.CanShowBlock(Rafy.MetaModel.ModuleMeta,Rafy.MetaModel.View.Block)">
            <summary>
            控制某一个块是否可以显示
            </summary>
            <param name="module"></param>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.PermissionMgr.HasOperation(Rafy.MetaModel.ModuleMeta,Rafy.MetaModel.ModuleOperation)">
            <summary>
            是否有某个操作的权限
            </summary>
            <param name="module"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.PermissionMgr.HasCommand(Rafy.MetaModel.ModuleMeta,Rafy.MetaModel.View.Block,System.String)">
            <summary>
            是否能执行某个命令
            </summary>
            <param name="module"></param>
            <param name="block"></param>
            <param name="commandName"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.SystemOperationKeys">
            <summary>
            系统的功能权限 id 列表
            
            此些 Id 会保存到数据库中，不能更改值。
            </summary>
        </member>
        <member name="F:Rafy.SystemOperationKeys.Read">
            <summary>
            是否可查看某对象的功能的权限标记。
            模块根对象对应为打开模块功能，子对象对应为显示子对象功能。
            </summary>
        </member>
        <member name="T:Rafy.CustomSerializationObject">
            <summary>
            需要自定义序列化的类，都可以直接从此类继承。
            </summary>
        </member>
        <member name="M:Rafy.CustomSerializationObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化构造函数。
            
            需要更高安全性，加上 SecurityPermissionAttribute 标记。
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Rafy.CustomSerializationObject.Serialize(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化数据到 info 中。
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Rafy.CustomSerializationObject.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化完成时，调用此函数。 
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Rafy.Serialization.BinaryFormatterWrapper">
            <summary>
            Wraps the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>
            in the 
            <see cref="T:Rafy.Serialization.ISerializationFormatter"/>
            interface so it can be used in a standardized
            manner.
            </summary>
        </member>
        <member name="M:Rafy.Serialization.BinaryFormatterWrapper.Deserialize(System.IO.Stream)">
            <summary>
            Converts a serialization stream into an
            object graph.
            </summary>
            <param name="serializationStream">
            Byte stream containing the serialized data.</param>
            <returns>A deserialized object graph.</returns>
        </member>
        <member name="M:Rafy.Serialization.BinaryFormatterWrapper.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Converts an object graph into a byte stream.
            </summary>
            <param name="serializationStream">
            Stream that will contain the the serialized data.</param>
            <param name="graph">Object graph to be serialized.</param>
        </member>
        <member name="P:Rafy.Serialization.BinaryFormatterWrapper.Formatter">
            <summary>
            Gets a reference to the underlying
            <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>
            object.
            </summary>
        </member>
        <member name="T:Rafy.Serialization.ISerializationFormatter">
            <summary>
            Defines an object that can serialize and deserialize
            object graphs.
            </summary>
        </member>
        <member name="M:Rafy.Serialization.ISerializationFormatter.Deserialize(System.IO.Stream)">
            <summary>
            Converts a serialization stream into an
            object graph.
            </summary>
            <param name="serializationStream">
            Byte stream containing the serialized data.</param>
            <returns>A deserialized object graph.</returns>
        </member>
        <member name="M:Rafy.Serialization.ISerializationFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Converts an object graph into a byte stream.
            </summary>
            <param name="serializationStream">
            Stream that will contain the the serialized data.</param>
            <param name="graph">Object graph to be serialized.</param>
        </member>
        <member name="T:Rafy.Serialization.MobileAndBinaryFormatter">
            <summary>
            为了兼容，主要使用 MobileFormatter，否则使用 BinaryFormatter。
            </summary>
        </member>
        <member name="T:Rafy.Serialization.Mobile.BitContainer">
            <summary>
            低存储空间的多个 Boolean 值序列化器
            </summary>
        </member>
        <member name="T:Rafy.Serialization.Mobile.FieldsSerializationHelper">
            <summary>
            为了兼容系统的序列化机制，特写此类进行字段的序列化：
            只要不标记 NonSerialized 的字段都进行序列化。
            </summary>
        </member>
        <member name="T:Rafy.Serialization.Mobile.IMobileObject">
            <summary>
            Interface to be implemented by any object
            that supports serialization by the
            MobileFormatter.
            </summary>
        </member>
        <member name="M:Rafy.Serialization.Mobile.IMobileObject.SerializeState(Rafy.Serialization.Mobile.ISerializationContext)">
            <summary>
            Method called by MobileFormatter when an object
            should serialize its data. The data should be
            serialized into the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object to contain the serialized data.
            </param>
        </member>
        <member name="M:Rafy.Serialization.Mobile.IMobileObject.SerializeRef(Rafy.Serialization.Mobile.ISerializationContext)">
            <summary>
            Method called by MobileFormatter when an object
            should serialize its child references. The data should be
            serialized into the SerializationInfo parameter.
            </summary>
            <param name="info">Object to contain the serialized data.</param>
        </member>
        <member name="M:Rafy.Serialization.Mobile.IMobileObject.DeserializeState(Rafy.Serialization.Mobile.ISerializationContext)">
            <summary>
            Method called by MobileFormatter when an object
            should be deserialized. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
        </member>
        <member name="M:Rafy.Serialization.Mobile.IMobileObject.DeserializeRef(Rafy.Serialization.Mobile.ISerializationContext)">
            <summary>
            Method called by MobileFormatter when an object
            should deserialize its child references. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">Object containing the serialized data.</param>
        </member>
        <member name="T:Rafy.Serialization.Mobile.ISerializationNotification">
            <summary>
            Interface defining callback methods used
            by the MobileFormatter.
            </summary>
        </member>
        <member name="M:Rafy.Serialization.Mobile.ISerializationNotification.Deserialized(Rafy.Serialization.Mobile.ISerializationContext)">
            <summary>
            Method called on an object after deserialization
            is complete.
            </summary>
            <remarks>
            This method is called on all objects in an
            object graph after all the objects have been
            deserialized.
            </remarks>
        </member>
        <member name="T:Rafy.Serialization.Mobile.MobileCollection`1">
            <summary>
            Inherit from this base class to easily
            create a serializable list class.
            </summary>
            <typeparam name="T">
            Type of the items contained in the list.
            </typeparam>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileCollection`1.OnSerializeRef(Rafy.Serialization.Mobile.ISerializationContext)">
            <summary>
            Override this method to get custom child object
            values from the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <exception cref="T:System.InvalidOperationException">CannotSerializeCollectionsNotOfIMobileObject</exception>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileCollection`1.OnSerializeState(Rafy.Serialization.Mobile.ISerializationContext)">
            <summary>
            Override this method to get custom field values
            from the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileCollection`1.OnDeserializeState(Rafy.Serialization.Mobile.ISerializationContext)">
            <summary>
            Override this method to set custom field values
            into the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileCollection`1.OnDeserializeRef(Rafy.Serialization.Mobile.ISerializationContext)">
            <summary>
            Override this method to set custom child object
            values into the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <exception cref="T:System.InvalidOperationException">CannotSerializeCollectionsNotOfIMobileObject</exception>
        </member>
        <member name="T:Rafy.Serialization.Mobile.MobileDictionary`2">
            <summary>
            Defines a dictionary that can be serialized through
            the MobileFormatter.
            </summary>
            <typeparam name="K">Key value: any primitive or IMobileObject type.</typeparam>
            <typeparam name="V">Value: any primitive or IMobileObject type.</typeparam>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileDictionary`2.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileDictionary`2.#ctor(System.Int32)">
            <summary>
            Creates an instance of the object based
            on the supplied dictionary, whose elements
            are copied to the new dictionary.
            </summary>
            <param name="capacity">The initial number of elements 
            the dictionary can contain.</param>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates an instance of the object based
            on the supplied dictionary, whose elements
            are copied to the new dictionary.
            </summary>
            <param name="comparer">The comparer to use when
            comparing keys.</param>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileDictionary`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Creates an instance of the object based
            on the supplied dictionary, whose elements
            are copied to the new dictionary.
            </summary>
            <param name="dict">Source dictionary.</param>
        </member>
        <member name="T:Rafy.Serialization.Mobile.MobileFormatter">
            <summary>
            Serializes and deserializes objects
            at the field level. A Silverlight-
            compatible facsimile of the
            BinaryFormatter or NetDataContractSerializer.
            </summary>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileFormatter.Serialize(System.Object)">
            <summary>
            Serializes the object into a byte array.
            </summary>
            <param name="obj">
            The object to be serialized, which must implement
            IMobileObject.
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileFormatter.Deserialize(System.Byte[])">
            <summary>
            Deserializes a byte stream into an object.
            </summary>
            <param name="data">
            Byte array containing the object's serialized
            data.
            </param>
            <returns>
            An object containing the data from the
            byte stream. The object must implement
            IMobileObject to be deserialized.
            </returns>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileFormatter.SerializeObject(System.Object)">
            <summary>
            Serializes an object into a SerializationInfo object.
            </summary>
            <param name="obj">Object to be serialized.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileFormatter.GetObject(System.Int32)">
            <summary>
            Gets a deserialized object based on the object's
            reference id within the serialization stream.
            </summary>
            <param name="referenceId">Id of object in stream.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Serialization.Mobile.MobileList`1">
            <summary>
            Implements a list that is serializable using
            the MobileFormatter.
            </summary>
            <typeparam name="T">
            Type of object contained in the list.
            </typeparam>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileList`1.#ctor">
            <summary>
            Creates an instance of the type.
            </summary>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileList`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of the type.
            </summary>
            <param name="capacity">Capacity of the list.</param>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates an instance of the type.
            </summary>
            <param name="collection">Data to add to list.</param>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileList`1.OnSerializeRef(Rafy.Serialization.Mobile.ISerializationContext)">
            <summary>
            Override this method to manually serialize child objects
            contained within the current object.
            </summary>
            <param name="info">Object containing serialized values.</param>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileList`1.OnSerializeState(Rafy.Serialization.Mobile.ISerializationContext)">
            <summary>
            Override this method to add extra field values to
            the serialization stream.
            </summary>
            <param name="info">Object containing field values.</param>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileList`1.OnDeserializeState(Rafy.Serialization.Mobile.ISerializationContext)">
            <summary>
            Override this method to retrieve extra field values to
            the serialization stream.
            </summary>
            <param name="info">Object containing field values.</param>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileList`1.OnDeserializeRef(Rafy.Serialization.Mobile.ISerializationContext)">
            <summary>
            Override this method to manually deserialize child objects
            from data in the serialization stream.
            </summary>
            <param name="info">Object containing serialized values.</param>
        </member>
        <member name="T:Rafy.Serialization.Mobile.MobileNonSerializedAttribute">
            <summary>
            类型标记此特性，表示该类型及其父类中的字段都不需要 MobileSerialization 引擎自动序列化。
            </summary>
        </member>
        <member name="T:Rafy.Serialization.Mobile.MobileObject">
            <summary>
            当使用 MobileFormatter 作为序列化时，才会运行此类的代码。
            也就是说，二进制序列化不会使用以下代码。
            </summary>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileObject.OnMobileSerializeRef(Rafy.Serialization.Mobile.ISerializationContext)">
            <summary>
            Override this method to insert your child object
            references into the MobileFormatter serialzation stream.
            </summary>
            <param name="context">Object containing the data to serialize.</param>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileObject.OnMobileSerializeState(Rafy.Serialization.Mobile.ISerializationContext)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="context">Object containing the data to serialize.</param>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileObject.OnMobileDeserializeState(Rafy.Serialization.Mobile.ISerializationContext)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="context">Object containing the data to serialize.</param>
        </member>
        <member name="M:Rafy.Serialization.Mobile.MobileObject.OnMobileDeserializeRef(Rafy.Serialization.Mobile.ISerializationContext)">
            <summary>
            Override this method to retrieve your child object
            references from the MobileFormatter serialzation stream.
            </summary>
            <param name="context">Object containing the data to serialize.</param>
        </member>
        <member name="T:Rafy.Serialization.Mobile.NullPlaceholder">
            <summary>
            Placeholder for null child objects.
            </summary>
        </member>
        <member name="T:Rafy.Serialization.Mobile.ReferenceComparer`1">
            <summary>
            Implements an equality comparer for <see cref="T:Rafy.Serialization.Mobile.IMobileObject" /> that compares
            the objects only on the basis is the reference value.
            </summary>
        </member>
        <member name="M:Rafy.Serialization.Mobile.ReferenceComparer`1.Equals(`0,`0)">
            <summary>
            Determines if the two objects are reference-equal.
            </summary>
        </member>
        <member name="P:Rafy.Serialization.Mobile.SerializationContainerContext.IsProcessingState">
            <summary>
            是否正在序列/反序列化 State
            </summary>
        </member>
        <member name="T:Rafy.Serialization.NetDataContractSerializerWrapper">
            Wraps the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer"/>
            in the 
            <see cref="T:Rafy.Serialization.ISerializationFormatter"/>
            interface so it can be used in a standardized
            manner.
        </member>
        <member name="M:Rafy.Serialization.NetDataContractSerializerWrapper.Deserialize(System.IO.Stream)">
            <summary>
            Converts a serialization stream into an
            object graph.
            </summary>
            <param name="serializationStream">
            Byte stream containing the serialized data.</param>
            <returns>A deserialized object graph.</returns>
        </member>
        <member name="M:Rafy.Serialization.NetDataContractSerializerWrapper.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Converts an object graph into a byte stream.
            </summary>
            <param name="serializationStream">
            Stream that will contain the the serialized data.</param>
            <param name="graph">Object graph to be serialized.</param>
        </member>
        <member name="P:Rafy.Serialization.NetDataContractSerializerWrapper.Formatter">
            <summary>
            Gets a reference to the underlying
            <see cref="T:System.Runtime.Serialization.NetDataContractSerializer"/>
            object.
            </summary>
        </member>
        <member name="T:Rafy.Serialization.SerializationFormatterFactory">
            <summary>
            Factory used to create the appropriate
            serialization formatter object based
            on the application configuration.
            </summary>
        </member>
        <member name="M:Rafy.Serialization.SerializationFormatterFactory.GetFormatter">
            <summary>
            创建一个序列化器。
            
            工厂方法，方便未来统一扩展。
            </summary>
        </member>
        <member name="T:Rafy.Serialization.Serializer">
            <summary>
            序列化门户 API
            </summary>
        </member>
        <member name="M:Rafy.Serialization.Serializer.SerializeBytes(System.Object)">
            <summary>
            使用二进制序列化对象。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Serialization.Serializer.DeserializeBytes(System.Byte[])">
            <summary>
            使用二进制反序列化对象。
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.SerializationInfoContainer">
            <summary>
            Object containing the serialization
            data for a specific object.
            </summary>
        </member>
        <member name="P:Rafy.SerializationInfoContainer.ReferenceId">
            <summary>
            Reference number for this object.
            </summary>
        </member>
        <member name="P:Rafy.SerializationInfoContainer.TypeName">
            <summary>
            Assembly-qualified type name of the
            object being serialized.
            </summary>
        </member>
        <member name="P:Rafy.SerializationInfoContainer.References">
            <summary>
            Dictionary containing child reference data.
            </summary>
        </member>
        <member name="P:Rafy.SerializationInfoContainer.States">
            <summary>
            Dictionary containg field data.
            </summary>
        </member>
        <member name="M:Rafy.SerializationInfoContainer.AddState(System.String,System.Object)">
            <summary>
            Adds a value to the serialization stream.
            </summary>
            <param name="name">
            Name of the field.
            </param>
            <param name="state">
            注意：只能是系统自带的类型
            Value of the field.
            </param>
        </member>
        <member name="M:Rafy.SerializationInfoContainer.GetState``1(System.String)">
            <summary>
            Gets a value from the list of fields.
            </summary>
            <typeparam name="T">
            Type to which the value should be coerced.
            </typeparam>
            <param name="name">
            Name of the field.
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.SerializationInfoContainer.AddDelegate(System.String,System.Delegate)">
            <summary>
            Adds a child to the list of child references.
            </summary>
            <param name="name">Name of the field.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.NotSupportedException">实例对象的代理方法暂时不支持被序列化！</exception>
        </member>
        <member name="M:Rafy.SerializationInfoContainer.AddRef(System.String,System.Int32)">
            <summary>
            Adds a child to the list of child references.
            </summary>
            <param name="name">
            Name of the field.
            </param>
            <param name="referenceId">
            Reference id for the child object.
            </param>
        </member>
        <member name="M:Rafy.SerializationInfoContainer.IsState(System.Type)">
            <summary>
            value type, string, object
            </summary>
            <param name="stateType"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.SysState">
            <summary>
            系统中 PrimitiveType 在使用 Mobile 序列化时，需要使用这个对象来进行封装。
            </summary>
        </member>
        <member name="T:Rafy.WCF.CompactMessageEncoder">
            <summary>
            A message encoder class that compacts the message size by compressing it.
            </summary>
        </member>
        <member name="F:Rafy.WCF.CompactMessageEncoder._contentType">
            <summary>
            Stores the content type name of the message
            </summary>
        </member>
        <member name="F:Rafy.WCF.CompactMessageEncoder._innerEncoder">
            <summary>
            Holds the inner message encoder (binary or text)
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncoder.#ctor(System.ServiceModel.Channels.MessageEncoder)">
            <summary>
            Initialize the message encoder with an inner encoder
            </summary>
            <param name="innerEncoder">Binary or Text message encoder to use as an inner encoder</param>
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncoder.ContentType">
            <summary>
            Get the content type of the message
            </summary>
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncoder.MediaType">
            <summary>
            Get the media type of the encoder
            </summary>
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncoder.MessageVersion">
            <summary>
            Get the message version of the encoder
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
            <summary>
            Decompress and desearialize array of bytes into a message. 
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
            <summary>
            Searialize and compress a message into an array of bytes
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncoder.CompressBuffer(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.Int32)">
            <summary>
            Compress a buffer
            </summary>
            <param name="buffer"></param>
            <param name="bufferManager"></param>
            <param name="messageOffset"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncoder.DecompressBuffer(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager)">
            <summary>
            Decompress a buffer
            </summary>
            <param name="buffer"></param>
            <param name="bufferManager"></param>
            <returns></returns>
        </member>
        <member name="F:Rafy.WCF.CompactMessageEncoderFactory._encoder">
            <summary>
            Stores the compact message encoder
            </summary>
        </member>
        <member name="F:Rafy.WCF.CompactMessageEncoderFactory._innerFactory">
            <summary>
            Stores the message encoder factory of the inner encoder
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncoderFactory.#ctor(System.ServiceModel.Channels.MessageEncoderFactory)">
            <summary>
            Construct a compact message encoder factory
            </summary>
            <param name="innerFactory">The inner encoder factory</param>o
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncoderFactory.Encoder">
            <summary>
            Get the compress message encoder
            </summary>
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncoderFactory.MessageVersion">
            <summary>
            Get the message version
            </summary>
        </member>
        <member name="F:Rafy.WCF.CompactMessageEncodingBindingElement._innerBindingElement">
            <summary>
            Stores the inner binding element
            </summary>
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncodingBindingElement.InnerBindingElement">
            <summary>
            Returns the inner binding element
            </summary>
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncodingBindingElement.MessageVersion">
            <summary>
            Get/Set the message version
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel factory stack on the client that creates a specified type of channel for a specified context. 
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncodingBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel listener on the service that accepts a specified type of channel for a specified context.
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncodingBindingElement.CreateMessageEncoderFactory">
            <summary>
            Create the CompactMessageEncoderFactory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a typed object requested, if present, from the appropriate layer in the binding element stack. 
            </summary>
        </member>
        <member name="F:Rafy.WCF.CompactMessageEncodingBindingElement._baseBindingElement">
            <summary>
            Stores the base binding element so clones can use it.
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncodingBindingElement.Clone">
            <summary>
            Clone the CompactMessageEncodingBindingElement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncodingBindingElement.#ctor(Rafy.WCF.CompactMessageEncodingBindingElement)">
            <summary>
            Constructor, used with the Clone method
            </summary>
            <param name="originalBindingElement"></param>
        </member>
        <member name="T:Rafy.WCF.CompactMessageEncodingElement">
            <summary>
            This class enables the user to configure the CompactMesssageEncoder with the configuration file.
            It's derived from ConfigurationElement
            </summary>
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncodingElement.BindingElementType">
            <summary>
            Gets the type of the binding element. 
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncodingElement.CreateBindingElement">
            <summary>
            Creates an instance of the binding element
            </summary>
        </member>
        <member name="F:Rafy.WCF.CompactMessageEncodingElement._properties">
            <summary>
            Stores the available properties of this ConfigurationElement.
            It's initialized in the Properties property.
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncodingElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
            <summary>
            Apply the configuration file to the binding element
            </summary>
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncodingElement.Properties">
            <summary>
            Gets the collection of properties. 
            </summary>
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncodingElement.BinaryMessageEncodingElement">
            <summary>
            Get the BinaryMessageEncodingElement configuration 
            </summary>
        </member>
        <member name="T:Rafy.WCF.BinaryFormatterAdapter">
            <summary>
            在内部序列化器的基础上添加 Remoting 二进制序列化的功能。
            </summary>
        </member>
        <member name="M:Rafy.WCF.BinaryFormatterAdapter.#ctor(System.String,System.Reflection.ParameterInfo[],System.ServiceModel.Dispatcher.IClientMessageFormatter,System.String)">
            <summary>
            for client
            </summary>
            <param name="operationName"></param>
            <param name="parameterInfos"></param>
            <param name="innerClientFormatter"></param>
            <param name="action"></param>
        </member>
        <member name="M:Rafy.WCF.BinaryFormatterAdapter.#ctor(System.String,System.Reflection.ParameterInfo[],System.ServiceModel.Dispatcher.IDispatchMessageFormatter)">
            <summary>
            for server
            </summary>
            <param name="operationName"></param>
            <param name="parameterInfos"></param>
            <param name="innerDispatchFormatter"></param>
        </member>
        <member name="T:Rafy.WCF.BinaryFormatterOperationBehavior">
            <summary>
            在原始 Formatter 的基础上装饰 BinaryFormatterAdapter
            <remarks>
            BinaryFormatterOperationBehavior 为什么要实现为操作的行为：
            因为只有当操作的 DataContractSerializerBehavior 行为应用功能后，才能拿到 DataContractSerializerFormatter 并包装到 BinaryFormatterAdapter 中。
            
            由于一个操作的操作契约在系统中只有一份。而我们期望序列化的行为只影响指定的终结点，所以这个行为在应用时，会检查是否传入的运行时，即是添加时的运行时。
            </remarks>
            </summary>
        </member>
        <member name="P:Rafy.WCF.BinaryFormatterOperationBehavior.ParentRuntime">
            <summary>
            本行为只为这个运行时起作用。
            </summary>
        </member>
        <member name="T:Rafy.WCF.EnableBinaryFormatterBehaviorElement">
            <summary>
            启用旧的 BinaryFormatter 来对数据进行序列化。
            </summary>
        </member>
        <member name="T:Rafy.WCF.NetDataContractOperationBehavior">
            <summary>
            Override the DataContract serialization behavior to
            use the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer"/>.
            </summary>
        </member>
        <member name="M:Rafy.WCF.NetDataContractOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Create new instance of object.
            </summary>
            <param name="operation">Operation description.</param>
        </member>
        <member name="M:Rafy.WCF.NetDataContractOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription,System.ServiceModel.DataContractFormatAttribute)">
            <summary>
            Create new instance of object.
            </summary>
            <param name="operation">Operation description.</param>
            <param name="dataContractFormatAttribute">Data contract attribute object.</param>
        </member>
        <member name="M:Rafy.WCF.NetDataContractOperationBehavior.CreateSerializer(System.Type,System.String,System.String,System.Collections.Generic.IList{System.Type})">
            <summary>
            Overrided CreateSerializer to return an XmlObjectSerializer which is capable of 
            preserving the object references.
            </summary>
        </member>
        <member name="M:Rafy.WCF.NetDataContractOperationBehavior.CreateSerializer(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IList{System.Type})">
            <summary>
            Overrided CreateSerializer to return an XmlObjectSerializer which is capable of 
            preserving the object references.
            </summary>
        </member>
        <member name="T:Rafy.WCF.UseNetDataContractAttribute">
            <summary>
            加上这个标记以后，将会使用 NetDataContractSerializer 来替换原来的 DataContractSerializer
            来对数据进行序列化与反序列化。
            二者的区别在于：前者会将类型的 AssemblyQualifiedName 输出到 Xml 中。这使得接口 IWcfPortal 可以为所有类型进行通用的序列化。
            反之，如果不使用 DataContractSerializer 进行序列化，那么必须使用 KnownTypes 标记在接口上标记它可序列化的所有类型，使得 IWcfPortal 将不能作为一个通用的接口程序。
            
            但是，使用了这个标记之后，也会带来相应的不利的影响：由于使用 .NET 内部的序列化规范，这个接口将不再满足 WSDL 的规范，使得其它平台无法调用此接口，也导致了无法为 .NET 的项目直接使用服务的地址来添加服务的引用。
            
            Specify that WCF should serialize objects in a .NET
            specific manner to as to preserve complex object
            references and to be able to deserialize the graph
            into the same type as the original objets.
            </summary>
        </member>
        <member name="M:Rafy.WCF.UseNetDataContractAttribute.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
            <summary>
            Apply the client behavior by requiring
            the use of the NetDataContractSerializer.
            </summary>
            <param name="description">Operation description.</param>
            <param name="proxy">Client operation object.</param>
        </member>
        <member name="M:Rafy.WCF.UseNetDataContractAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
            <summary>
            Apply the dispatch behavior by requiring
            the use of the NetDataContractSerializer.
            </summary>
            <param name="description">Operation description.</param>
            <param name="dispatch">Dispatch operation object.</param>
        </member>
        <member name="T:Rafy.Threading.ForeAsyncLoader">
            <summary>
            预加载的实现类。
            
            实现某个action的预加载。
            </summary>
        </member>
        <member name="F:Rafy.Threading.ForeAsyncLoader._signal">
            <summary>
            同步两个线程的信号
            </summary>
        </member>
        <member name="F:Rafy.Threading.ForeAsyncLoader._version">
            <summary>
            _status的“版本号”
            </summary>
        </member>
        <member name="F:Rafy.Threading.ForeAsyncLoader._action">
            <summary>
            真正执行的耗时的操作
            </summary>
        </member>
        <member name="M:Rafy.Threading.ForeAsyncLoader.#ctor(System.Action)">
            <summary>
            构造一个对应指定方法的预加载器。
            </summary>
            <param name="loadAction">
            真正的加载方法，比较耗时的操作。
            </param>
        </member>
        <member name="M:Rafy.Threading.ForeAsyncLoader.IsRunOver">
            <summary>
            是否已经加载完毕。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Threading.ForeAsyncLoader.Status">
            <summary>
            加载器状态
            </summary>
        </member>
        <member name="E:Rafy.Threading.ForeAsyncLoader.ActionSucceeded">
            <summary>
            执行成功的事件。
            </summary>
        </member>
        <member name="M:Rafy.Threading.ForeAsyncLoader.BeginLoading">
            <summary>
            开始异步进行预加载。
            
            如果在进行执行Reset操作前，调用本方法多次，也只会执行一次loadAction。
            </summary>
        </member>
        <member name="M:Rafy.Threading.ForeAsyncLoader.WaitForLoading">
            <summary>
            等待异步加载完成。
            
            （注意，如果在这个方法之前没有调用Begin，则这里也会先调用Begin。）
            </summary>
        </member>
        <member name="M:Rafy.Threading.ForeAsyncLoader.Reset">
            <summary>
            重设本加载器，使得BeginLoading可以再次起作用。
            </summary>
        </member>
        <member name="T:Rafy.Threading.LoaderStatus">
            <summary>
            预加载器状态。
            </summary>
        </member>
        <member name="F:Rafy.Threading.LoaderStatus.NotStarted">
            <summary>
            还未启动
            </summary>
        </member>
        <member name="F:Rafy.Threading.LoaderStatus.Running">
            <summary>
            正在加载中。
            </summary>
        </member>
        <member name="F:Rafy.Threading.LoaderStatus.Completed">
            <summary>
            表示是否已经运行过。
            </summary>
        </member>
        <member name="F:Rafy.Threading.LoaderStatus.Failed">
            <summary>
            加载失败。
            </summary>
        </member>
        <member name="T:Rafy.Threading.IObservableActions">
            <summary>
            任意开始，最后结束
            </summary>
        </member>
        <member name="E:Rafy.Threading.IObservableActions.FirstActionStarted">
            <summary>
            第一个异步任务开始执行时
            </summary>
        </member>
        <member name="E:Rafy.Threading.IObservableActions.LastActionEnded">
            <summary>
            最后一个异步任务执行完毕后
            </summary>
        </member>
        <member name="M:Rafy.Threading.IObservableActions.Execute(System.Action)">
            <summary>
            调用此方法时，任务直接进入调度队列中
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:Rafy.Threading.IParallelActions">
            <summary>
            这个只有准备好了任务后，再一起开始
            </summary>
        </member>
        <member name="P:Rafy.Threading.IParallelActions.MaxThreadCount">
            <summary>
            可同时运行的最大线程数。
            </summary>
        </member>
        <member name="M:Rafy.Threading.IParallelActions.Prepare(System.Action)">
            <summary>
            准备需要执行的“非主任务”
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Rafy.Threading.IParallelActions.Clear">
            <summary>
            把所有的action清空。
            </summary>
        </member>
        <member name="M:Rafy.Threading.IParallelActions.RunAll">
            <summary>
            执行所有Action。
            执行完毕，函数返回。
            </summary>
        </member>
        <member name="T:Rafy.Threading.AsyncHelper">
            <summary>
            异步线程的帮助方法。
            </summary>
        </member>
        <member name="M:Rafy.Threading.AsyncHelper.CreateObservableActions">
            <summary>
            一个可监听 “任意开始，最终结束” 的任务管理器。
            </summary>
        </member>
        <member name="M:Rafy.Threading.AsyncHelper.CreateParallelActions">
            <summary>
            一个多任务同时进行的任务管理器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Threading.AsyncHelper.InvokeSafe(System.Action,System.Action{System.Exception})">
            <summary>
            安全地对任务进行异步调用。
            
            原因：在异步线程中调用任务，如果任务执行过程中出现异常，往往会使整个应用程序死机。
            </summary>
            <param name="action"></param>
            <param name="errorHandler"></param>
        </member>
        <member name="M:Rafy.Threading.AsyncHelper.Invoke(System.Action)">
            <summary>
            对任务进行异步调用。
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Rafy.Threading.AsyncHelper.WrapByCurrentPrinciple(System.Action)">
            <summary>
            这里生成的wrapper会保证，在执行action前后，新开的线程和主线程都使用同一个Principel。
            
            解决问题：
            由于RafyEnvironment.User是基于线程的，
            所以如果在同一次请求中，如果在服务端打开一个新的线程做一定的事情，
            这个新开的线程可能会和打开者使用不同的Principle而造成代码异常。
            </summary>
            <param name="action">
            可能会使用RafyEnvironment.User，并需要在服务端另开线程来执行的操作。
            </param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Web.ClientEntities">
            <summary>
            所有实体类在 Web 客户端的查询类、容器
            </summary>
        </member>
        <member name="M:Rafy.Web.ClientEntities.Find(System.String)">
            <summary>
            通过客户端命令来查找对应实体的元数据。
            </summary>
            <param name="clientName">Name of the client.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Web.ClientEntities.GetClientName(System.Type)">
            <summary>
            获取某个实体类型在客户端的名称。
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Web.JsonServiceAttribute">
            <summary>
            此标记用于标记于 Service 之上。
            </summary>
        </member>
        <member name="M:Rafy.Web.JsonServiceAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Web.JsonServiceAttribute"/> class.
            </summary>
        </member>
        <member name="M:Rafy.Web.JsonServiceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Web.JsonServiceAttribute"/> class.
            </summary>
            <param name="clientName">Name of the client.</param>
        </member>
        <member name="P:Rafy.Web.JsonServiceAttribute.ClientName">
            <summary>
            获取或设置在客户端对应调用的服务的名称标记。
            如果没有不标记，则默认以类的全名称为服务名。
            </summary>
        </member>
        <member name="T:Rafy.BooleanBoxes">
            <summary>
            bool 值的装箱值
            </summary>
        </member>
        <member name="F:Rafy.BooleanBoxes.True">
            <summary>
            The true
            </summary>
        </member>
        <member name="F:Rafy.BooleanBoxes.False">
            <summary>
            The false
            </summary>
        </member>
        <member name="M:Rafy.BooleanBoxes.Box(System.Boolean)">
            <summary>
            Boxes the specified bool value.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.INotifyChangedCollection">
            <summary>
            这个类解决了基类在 Clear 时，不提供所有 OldItems 的问题。
            </summary>
        </member>
        <member name="M:Rafy.INotifyChangedCollection.PopClearedItems">
            <summary>
            获取被清空的项，并清空这个缓存。
            </summary>
        </member>
        <member name="T:Rafy.NotifyChangedCollection`1">
            <summary>
            这个类解决了基类在 Clear 时，不提供所有 OldItems 的问题。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rafy.NotifyChangedCollection`1.PopClearedItems">
            <summary>
            获取被清空的项，并清空这个缓存。
            </summary>
        </member>
        <member name="T:Rafy.SealableCollection`1">
            <summary>
            一个可被锁定的集合。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Rafy.SealableCollection`1.IsSealed">
            <summary>
            是否已经被锁定。
            </summary>
        </member>
        <member name="M:Rafy.SealableCollection`1.Seal">
            <summary>
            锁定本集合。
            </summary>
        </member>
        <member name="M:Rafy.SealableCollection`1.Unseal">
            <summary>
            子类可调用此方法来取消本集合的锁定状态。
            </summary>
        </member>
        <member name="M:Rafy.ConfigurationExtension.SetAppSettingOrDefault``1(System.Configuration.Configuration,System.String,``0)">
            <summary>
            设置某个 AppSetting 的值到 configuration 中。
            </summary>
            <param name="configuration"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:Rafy.ConfigurationExtension.SetAppSettingOrDefault(System.Configuration.Configuration,System.String,System.String)">
            <summary>
            设置某个 AppSetting 的值到 configuration 中。
            </summary>
            <param name="configuration"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.ConfigurationHelper.GetAppSettingOrDefault``1(System.String,``0)">
            <summary>
            获取配置文件中的 AppSettings 配置节的的指定键的值，并转换为指定类型。
            如果配置文件中没有该配置项，则方法返回给定的默认值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ConfigurationHelper.GetAppSettingOrDefault(System.String,System.String)">
            <summary>
            获取配置文件中的 AppSettings 配置节的的指定键的值。
            如果配置文件中没有该配置项，则方法返回空字符串。
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.AppContext">
            <summary>
            <para>本类型表示执行的上下文环境。</para>
            <para>其中包含：自定义数据集合、当前身份。</para>
            
            <para>一般可用的上下文有：</para>
            <para>单线程共用数据的执行环境、进程共用数据的执行环境、一次请求（如 Web）共用数据的执行环境。</para>
            <para>默认使用单线程上下文，如果要使用其它上下文，请使用 <see cref="M:Rafy.AppContext.SetProvider(Rafy.IAppContextProvider)"/> 方法替换提供算法。</para>
            </summary>
        </member>
        <member name="M:Rafy.AppContext.SetProvider(Rafy.IAppContextProvider)">
            <summary>
            设置上下文提供程序。
            默认使用 <see cref="T:Rafy.ThreadStaticAppContextProvider"/>。
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Rafy.AppContext.CurrentPrincipal">
            <summary>
            可获取或设置当前的身份。
            </summary>
        </member>
        <member name="P:Rafy.AppContext.Items">
            <summary>
            当前上下文中的所有数据
            </summary>
        </member>
        <member name="T:Rafy.AppContextItem`1">
            <summary>
            表示 <see cref="P:Rafy.AppContext.Items"/> 中的一个项。
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Rafy.AppContextItem`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.AppContextItem`1"/> class.
            </summary>
            <param name="key">此项在 <see cref="P:Rafy.AppContext.Items" /> 中的 Key。</param>
            <param name="defaultValue">如果 <see cref="P:Rafy.AppContext.Items" /> 中没有值时，本项对应的默认值。</param>
        </member>
        <member name="T:Rafy.AppContextScope`1">
            <summary>
            ServerContextScope 的泛型版本。
            
            它封装了 ContextKey 的构造，提升易用性。如果要定制 ContextKey，请继承非泛型版本。
            </summary>
            <typeparam name="TSub"></typeparam>
        </member>
        <member name="M:Rafy.AppContextScope`1.#ctor">
            <summary>
            构造器。
            </summary>
        </member>
        <member name="P:Rafy.AppContextScope`1.WholeScope">
            <summary>
            获取最外层的范围对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.AppContextScope`1.GetWholeScope">
            <summary>
            获取当前最外层的范围对象。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.ContextItem`1">
            <summary>
            表示一个从上下文数据环境中的一个项。
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Rafy.ContextItem`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.ContextItem`1"/> class.
            </summary>
            <param name="key">此项在 <see cref="P:Rafy.ContextItem`1.ContextDataContainer" /> 中的 Key。</param>
            <param name="defaultValue">如果 <see cref="P:Rafy.ContextItem`1.ContextDataContainer" /> 中没有值时，本项对应的默认值。</param>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="P:Rafy.ContextItem`1.ContextDataContainer">
            <summary>
            子类实现此属性来提供使用的上下文数据窗口。
            </summary>
        </member>
        <member name="P:Rafy.ContextItem`1.Value">
            <summary>
            获取或设置当前代码上下文中的本项对应的值。
            </summary>
        </member>
        <member name="M:Rafy.ContextItem`1.UseScopeValue(`0)">
            <summary>
            可以使用 using 语法调用本方法来声明一个代码段，在代码段中时 AppContext 中本项的值将使用指定的值；
            当跳出代码段时，本项的值又回复原来的值。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.ContextScope">
            <summary>
            基于 IDictionary 服务上下文的一个范围类型。
            继承此类的子类都拥有多层嵌套声明范围的功能，只有最外层的范围对象的 ExitWholeScope 方法会被调用。
            
            注意：必须使用 using 来构造此类型的子类，否则会出现未知的问题。
            </summary>
        </member>
        <member name="F:Rafy.ContextScope._context">
            <summary>
            存储项的位置
            </summary>
        </member>
        <member name="F:Rafy.ContextScope._scopeEntered">
            <summary>
            是否已经进入本对象声明的代码范围。
            </summary>
        </member>
        <member name="F:Rafy.ContextScope._disposed">
            <summary>
            本对象是否已经被析构。
            </summary>
        </member>
        <member name="F:Rafy.ContextScope._contextKey">
            <summary>
            在 <see cref="F:Rafy.ContextScope._context"/> 中的名称。
            </summary>
        </member>
        <member name="F:Rafy.ContextScope._wholeScope">
            <summary>
            最外层的范围对象缓存。
            </summary>
        </member>
        <member name="F:Rafy.ContextScope._scopeCount">
            <summary>
            目前进入到了第几个代码范围。
            这个字段只在最外层范围上有用。
            </summary>
        </member>
        <member name="M:Rafy.ContextScope.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            构造函数
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Rafy.ContextScope.WholeScope">
            <summary>
            获取最外层的范围对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.ContextScope.EnterScope(System.String)">
            <summary>
            声明进入这个范围对象声明的范围代码。
            </summary>
            <param name="contextKey"></param>
        </member>
        <member name="M:Rafy.ContextScope.EnterWholeScope">
            <summary>
            进入最外层范围时，会调用此方法。
            </summary>
        </member>
        <member name="M:Rafy.ContextScope.ExitWholeScope">
            <summary>
            如果本对象是最外层的范围对象，则这个对象的这个方法会在范围退出时执行。
            </summary>
        </member>
        <member name="M:Rafy.ContextScope.Dispose(System.Boolean)">
            <summary>
            本对象的范围结束。
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Rafy.ContextScope.GetWholeScope(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            子类可以通过这个方法来获取当前最外层的范围对象。
            </summary>
            <param name="contextKey">The context key.</param>
            <param name="store">The store.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.IAppContextProvider">
            <summary>
            AppContext 的算法提供器。
            </summary>
        </member>
        <member name="P:Rafy.IAppContextProvider.CurrentPrincipal">
            <summary>
            可获取或设置当前的身份。
            </summary>
        </member>
        <member name="P:Rafy.IAppContextProvider.DataContainer">
            <summary>
            获取或设置当前的上下文数据容器。
            </summary>
        </member>
        <member name="T:Rafy.StaticAppContextProvider">
            <summary>
            服务器端上下文提供器。
            默认实现：静态字段。
            </summary>
        </member>
        <member name="T:Rafy.ThreadStaticAppContextProvider">
            <summary>
            服务器端上下文提供器。
            默认实现：一个标记了 ThreadStatic 的字段。
            </summary>
        </member>
        <member name="P:Rafy.ThreadStaticAppContextProvider.Items">
            <summary>
            当前线程所使用的项的集合。
            </summary>
        </member>
        <member name="T:Rafy.Data.DbAccesser">
            <summary>
            Encapsulate the common operations to communicate with database.
            <remarks>
            It supports the query use DBParameter.(But it doesn't catch any exception, so the client program should deal with it by itself)
            
            There are two categories of query method:
            1.The public methods:
                These methods use a special sql sentences which looks like the parameter of String.Format,
                and input the needed parameters follow.
            2.The public methods on IRawDbAccesser property:
                These methods use the normal sql sentences, the input parameters array should be created outside.
                You can use <see cref="P:Rafy.Data.IRawDbAccesser.ParameterFactory"/> to create parameters.
            </remarks>
            </summary>
            <author>whiteLight</author>
            <createDate>2008-7-6, 20:19:08</createDate>
            <modify>2008-7-22，add ConvertParamaters method，and change the interface，use a common formatted sql to search database</modify>
            <modify>2008-8-7, If any one of the parameters is null, it is converted to DBNull.Value.</modify>
        </member>
        <member name="F:Rafy.Data.DbAccesser._openConnectionBySelf">
            <summary>
            Was the connection opened by my self.
            </summary>
        </member>
        <member name="F:Rafy.Data.DbAccesser._connectionCreatedBySelf">
            <summary>
            Is this connection created by my self;
            </summary>
        </member>
        <member name="F:Rafy.Data.DbAccesser._connection">
            <summary>
            inner db connection
            </summary>
        </member>
        <member name="F:Rafy.Data.DbAccesser._factory">
            <summary>
            abstract db provider factory
            </summary>
        </member>
        <member name="F:Rafy.Data.DbAccesser._converter">
            <summary>
            used to format sql and its corresponding parameters.
            </summary>
        </member>
        <member name="M:Rafy.Data.DbAccesser.#ctor(System.String)">
            <summary>
            Constructor
            
            this accessor uses <see cref="T:Rafy.Data.DbSetting"/> class to find its connection string, and creates connection by itself.
            </summary>
            <param name="connectionStringSettingName">the setting name in configuration file.</param>
        </member>
        <member name="M:Rafy.Data.DbAccesser.#ctor(System.String,System.String)">
            <summary>
            Constructor
            
            this accessor creates the db connection by itself.
            </summary>
            <param name="connectionString">Connection string</param>
            <param name="connectionProvider">
            The provider.
            eg.
            "System.Data.SqlClient"
            </param>
        </member>
        <member name="M:Rafy.Data.DbAccesser.#ctor(Rafy.Data.DbConnectionSchema)">
            <summary>
            Constructor
            
            this accessor uses schema to find its connection string, and creates connection by itself.
            </summary>
            <param name="schema">the connection schema.</param>
        </member>
        <member name="M:Rafy.Data.DbAccesser.#ctor(Rafy.Data.DbConnectionSchema,System.Data.IDbConnection)">
            <summary>
            Constructor
            </summary>
            <param name="schema">the connection schema.</param>
            <param name="dbConnection">use a exsiting connection, rather than to create a new one.</param>
        </member>
        <member name="P:Rafy.Data.DbAccesser.ConnectionSchema">
            <summary>
            Gets the connection schema of current database.
            </summary>
        </member>
        <member name="P:Rafy.Data.DbAccesser.Connection">
            <summary>
            The underlying db connection
            </summary>
        </member>
        <member name="P:Rafy.Data.DbAccesser.Transaction">
            <summary>
            current avaiable transaction.
            this transaction is retrieved from <see cref="T:Rafy.Data.LocalTransactionBlock"/> class, and it is created by current connection.
            </summary>
        </member>
        <member name="P:Rafy.Data.DbAccesser.RawAccesser">
            <summary>
            Gets a raw accesser which is oriented to raw sql and <c>IDbDataParameter</c>。
            </summary>
        </member>
        <member name="M:Rafy.Data.DbAccesser.MakeConnectionOpen">
            <summary>
            Open the connection
            </summary>
        </member>
        <member name="M:Rafy.Data.DbAccesser.MakeConnectionClose">
            <summary>
            This method only close the connection which is opened by this object itself.
            </summary>
        </member>
        <member name="M:Rafy.Data.DbAccesser.QueryDataTable(System.String,System.Object[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.QueryDataRow(System.String,System.Object[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="formattedSql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.QueryLiteDataTable(System.String,System.Object[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.QueryLiteDataRow(System.String,System.Object[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="formattedSql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.QueryDataReader(System.String,System.Object[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.QueryDataReader(System.String,System.Boolean,System.Object[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="closeConnection">Indicates whether to close the corresponding connection when the reader is closed?</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.QueryValue(System.String,System.Object[])">
            <summary>
            Execute the sql, and return the element of first row and first column, ignore the other values.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>DBNull or value object.</returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.ExecuteText(System.String,System.Object[])">
            <summary>
            Execute a sql which is not a database procudure, return rows effected.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>The number of rows effected</returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.ConvertFormatParamaters(System.Object[])">
            <summary>
            此方法提供特定数据库的参数列表。
            </summary>
            <param name="parametersValues">formattedSql参数列表</param>
            <returns>数据库参数列表</returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.PrepareCommand(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Prepare a command for communicate with database.
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IDbParameterFactory#CreateParameter">
            <summary>
            Create a DBParameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IDbParameterFactory#CreateParameter(System.String)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IDbParameterFactory#CreateParameter(System.String,System.Object)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IDbParameterFactory#CreateParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IDbParameterFactory#CreateParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IDbParameterFactory#CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IDbParameterFactory#CreateParameter(System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IDbParameterFactory#CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <param name="size"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#ParameterFactory">
            <summary>
            A factory to create parameters.
            </summary>
        </member>
        <member name="P:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#CommandFactory">
            <summary>
            A factory to create IDbCommand.
            </summary>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryLiteDataTable(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryLiteDataTable(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryLiteDataRow(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryLiteDataRow(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryDataTable(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryDataTable(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryDataRow(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryDataRow(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryDataReader(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="sql">specific sql</param>
            <param name="closeConnection">Indicates whether to close the corresponding connection when the reader is closed?</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryDataReader(System.String,System.Data.CommandType,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="closeConnection">Indicates whether to close the corresponding connection when the reader is closed?</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryDataReader(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryDataReader(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryValue(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute the sql, and return the element of first row and first column, ignore the other values.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>DBNull or object.</returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryValue(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Execute the sql, and return the element of first row and first column, ignore the other values.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>DBNull or object.</returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#ExecuteProcedure(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a procudure, and return the value returned by this procedure
            </summary>
            <param name="procedureName">The name of this procedure</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>The value returned by procedure</returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#ExecuteProcedure(System.String,System.Int32@,System.Data.IDbDataParameter[])">
            <summary>
            Execute a procudure, and return the value returned by this procedure
            </summary>
            <param name="procedureName">The name of this procedure</param>
            <param name="rowsAffect">The number of rows effected</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>The value returned by procedure</returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#ExecuteText(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a sql which is not a database procudure, return rows effected.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>The number of rows effected</returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Dispose">
            <summary>
            dispose this accesser.
            </summary>
        </member>
        <member name="T:Rafy.Data.DbConnectionSchema">
            <summary>
            数据库连接结构/方案
            </summary>
        </member>
        <member name="M:Rafy.Data.DbConnectionSchema.#ctor">
            <summary>
            子类使用
            </summary>
        </member>
        <member name="P:Rafy.Data.DbConnectionSchema.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:Rafy.Data.DbConnectionSchema.ProviderName">
            <summary>
            连接的提供器名称
            </summary>
        </member>
        <member name="P:Rafy.Data.DbConnectionSchema.Database">
            <summary>
            对应的数据库名称
            </summary>
        </member>
        <member name="M:Rafy.Data.DbConnectionSchema.CreateConnection">
            <summary>
            使用当前的结构来创建一个连接。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbConnectionSchema.IsOracleProvider(Rafy.Data.DbConnectionSchema)">
            <summary>
            判断指定的提供程序是否为 Oracle 提供程序。
            目前已知的 Oracle 提供程序有：
            System.Data.OracleClient、Oracle.DataAccess.Client、Oracle.ManagedDataAccess.Client
            </summary>
            <param name="schema">The schema.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbConnectionSchema.IsOracleProvider(System.String)">
            <summary>
            判断指定的提供程序是否为 Oracle 提供程序。
            目前已知的 Oracle 提供程序有：
            System.Data.OracleClient、Oracle.DataAccess.Client、Oracle.ManagedDataAccess.Client
            </summary>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbConnectionSchema.GetOracleUserId(Rafy.Data.DbConnectionSchema)">
            <summary>
            获取 Oracle 连接中的用户 Id。
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Data.DbSetting">
            <summary>
            数据库配置
            </summary>
        </member>
        <member name="P:Rafy.Data.DbSetting.Name">
            <summary>
            配置名称
            </summary>
        </member>
        <member name="M:Rafy.Data.DbSetting.FindOrCreate(System.String)">
            <summary>
            查找或者根据约定创建连接字符串
            </summary>
            <param name="dbSettingName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbSetting.SetSetting(System.String,System.String,System.String)">
            <summary>
            添加一个数据库连接配置。
            </summary>
            <param name="name"></param>
            <param name="connectionString"></param>
            <param name="providerName"></param>
        </member>
        <member name="M:Rafy.Data.DbSetting.GetGeneratedSettings">
            <summary>
            获取当前已经被生成的 DbSetting。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Data.FormattedSql">
            <summary>
            格式化 Sql 构造器
            
            如果想直接面向 Sql 字符串进行操作，可以使用 Append 打头的方法，或者使用 InnerWriter 属性获取内部的 TextWriter 后再进行操作。
            </summary>
        </member>
        <member name="F:Rafy.Data.FormattedSql._sql">
            <summary>
            最终生成的 Sql 字符串的 TextWriter
            </summary>
        </member>
        <member name="F:Rafy.Data.FormattedSql._writer">
            <summary>
            内部使用的 TextWriter，可能被外部使用属性 InnerWriter 进行替换。
            </summary>
        </member>
        <member name="P:Rafy.Data.FormattedSql.Parameters">
            <summary>
            当前可用的参数
            </summary>
        </member>
        <member name="M:Rafy.Data.FormattedSql.AppendParameter(System.Object)">
            <summary>
            写入一个参数值。
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Rafy.Data.FormattedSql.InnerWriter">
            <summary>
            获取内部的 TextWriter，用于直接面向字符串进行文本输出。
            同时，也可以使用新的 TextWriter 来装饰当前的 TextWriter。
            </summary>
        </member>
        <member name="M:Rafy.Data.FormattedSql.AppendAnd">
            <summary>
            直接添加 " AND "。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSql.AppendOr">
            <summary>
            直接添加 " OR "。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSql.Append(System.String)">
            <summary>
            直接添加指定的字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSql.Append(System.Char)">
            <summary>
            直接添加指定的 char 值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSql.Append(System.Int32)">
            <summary>
            直接添加指定的 int 值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSql.Append(System.Double)">
            <summary>
            直接添加指定的 double 值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSql.Append(System.Object)">
            <summary>
            直接添加指定的 object 值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSql.Append(System.Boolean)">
            <summary>
            直接添加指定的 bool 值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSql.AppendLine(System.String)">
            <summary>
            直接添加指定的字符串值，并添加回车。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSql.AppendLine">
            <summary>
            添加回车
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Data.FormattedSqlParameters">
            <summary>
            FormattedSql 中的参数列表封装
            </summary>
        </member>
        <member name="M:Rafy.Data.FormattedSqlParameters.Add(System.Object)">
            <summary>
            添加一个参数，并返回该参数应该使用的索引号
            
            当在 Sql 中直接写入 {0} 时，可以使用本方法直接添加一个参数到参数列表中。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSqlParameters.WriteParameter(System.Text.StringBuilder,System.Object)">
            <summary>
            添加一个参数，并在 SQL 中添加相应的索引号
            </summary>
            <param name="sql"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSqlParameters.WriteParameter(System.IO.TextWriter,System.Object)">
            <summary>
            添加一个参数，并在 SQL 中添加相应的索引号
            </summary>
            <param name="sql"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.FormattedSqlParameters.Item(System.Int32)">
            <summary>
            获取指定位置的参数值
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.FormattedSqlParameters.Count">
            <summary>
            当前参数的个数
            </summary>
        </member>
        <member name="M:Rafy.Data.FormattedSqlParameters.ToArray">
            <summary>
            按照添加时的索引，返回所有的参数值数组。
            此数组可以直接使用在 DBAccesser 方法中。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSqlParameters.op_Implicit(Rafy.Data.FormattedSqlParameters)~System.Object[]">
            <summary>
            隐式操作符，使得本类的对象可以直接当作 object[] 使用。方便 DBA 类型的操作。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Data.IDbAccesser">
            <summary>
            A db accesser which can use formatted sql to communicate with data base.
            </summary>
        </member>
        <member name="P:Rafy.Data.IDbAccesser.Connection">
            <summary>
            The underlying db connection
            </summary>
        </member>
        <member name="P:Rafy.Data.IDbAccesser.ConnectionSchema">
            <summary>
            数据连接结构
            </summary>
        </member>
        <member name="P:Rafy.Data.IDbAccesser.RawAccesser">
            <summary>
            Gets a raw accesser which is oriented to raw sql and <c>IDbDataParameter</c>。
            </summary>
        </member>
        <member name="M:Rafy.Data.IDbAccesser.ExecuteText(System.String,System.Object[])">
            <summary>
            Execute a sql which is not a database procudure, return rows effected.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>The number of rows effected.</returns>
        </member>
        <member name="M:Rafy.Data.IDbAccesser.QueryValue(System.String,System.Object[])">
            <summary>
            Execute the sql, and return the element of first row and first column, ignore the other values.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>DBNull or value object.</returns>
        </member>
        <member name="M:Rafy.Data.IDbAccesser.QueryDataReader(System.String,System.Object[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbAccesser.QueryDataReader(System.String,System.Boolean,System.Object[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="closeConnection">Indicates whether to close the corresponding connection when the reader is closed?</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbAccesser.QueryDataRow(System.String,System.Object[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbAccesser.QueryDataTable(System.String,System.Object[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbAccesser.QueryLiteDataRow(System.String,System.Object[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbAccesser.QueryLiteDataTable(System.String,System.Object[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbBackuper.BackupDatabase(System.String,System.String,System.Boolean)">
            <summary>
            Backup a special database
            </summary>
            <param name="databaseName"></param>
            <param name="filename">database file path to save.</param>
            <param name="isErase">if exists, whether to delete current file.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbBackuper.RestoreDatabase(System.String,System.String)">
            <summary>
            restore a special database from a file
            </summary>
            <param name="databaseName"></param>
            <param name="filename">the file path which is a database backup</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Data.IDbCommandFactory">
            <summary>
            A factory to create IDbCommand.
            </summary>
        </member>
        <member name="M:Rafy.Data.IDbCommandFactory.CreateCommand(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Create a command by sql,type and parameters
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Data.IDbParameterFactory">
            <summary>
            A factory to create IDbDataParameter by some specific conditions
            </summary>
        </member>
        <member name="M:Rafy.Data.IDbParameterFactory.CreateParameter">
            <summary>
            Create a DBParameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbParameterFactory.CreateParameter(System.String)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbParameterFactory.CreateParameter(System.String,System.Object)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbParameterFactory.CreateParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbParameterFactory.CreateParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbParameterFactory.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbParameterFactory.CreateParameter(System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbParameterFactory.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <param name="size"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Data.IRawDbAccesser">
            <summary>
            A db accesser which can use raw sql to communicate with data base.
            </summary>
        </member>
        <member name="P:Rafy.Data.IRawDbAccesser.Connection">
            <summary>
            The underlying db connection
            </summary>
        </member>
        <member name="P:Rafy.Data.IRawDbAccesser.Transaction">
            <summary>
            current avaiable transaction.
            this transaction is retrieved from <see cref="T:Rafy.Data.LocalTransactionBlock"/> class, and it is created by current connection.
            </summary>
        </member>
        <member name="P:Rafy.Data.IRawDbAccesser.ConnectionSchema">
            <summary>
            数据连接结构
            </summary>
        </member>
        <member name="P:Rafy.Data.IRawDbAccesser.ParameterFactory">
            <summary>
            A factory to create parameters.
            </summary>
        </member>
        <member name="P:Rafy.Data.IRawDbAccesser.CommandFactory">
            <summary>
            A factory to create database command.
            </summary>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.ExecuteProcedure(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a procudure, and return the value returned by this procedure
            </summary>
            <param name="procedureName">The name of this procedure</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>The value returned by procedure</returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.ExecuteProcedure(System.String,System.Int32@,System.Data.IDbDataParameter[])">
            <summary>
            Execute a procudure, and return the value returned by this procedure
            </summary>
            <param name="procedureName">The name of this procedure</param>
            <param name="rowsAffect">The number of rows effected</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>The value returned by procedure</returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.ExecuteText(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a sql which is not a database procudure, return rows effected.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>The number of rows effected</returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryDataReader(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="sql">specific sql</param>
            <param name="closeConnection">Indicates whether to close the corresponding connection when the reader is closed?</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryDataReader(System.String,System.Data.CommandType,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="closeConnection">Indicates whether to close the corresponding connection when the reader is closed?</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryDataReader(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryDataReader(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryLiteDataRow(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryLiteDataRow(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryLiteDataTable(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryLiteDataTable(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryDataRow(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryDataRow(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryDataTable(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryDataTable(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryValue(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute the sql, and return the element of first row and first column, ignore the other values.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>DBNull or object.</returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryValue(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Execute the sql, and return the element of first row and first column, ignore the other values.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>DBNull or object.</returns>
        </member>
        <member name="T:Rafy.Data.LiteDataColumn">
            <summary>
            列定义
            <remarks>
            定义列的属性和名称
            </remarks>
            </summary>
            Author: Steven
            Version: 1.0
            History:
                2006-04-15 Steven [创建] 
        </member>
        <member name="P:Rafy.Data.LiteDataColumn.ColumnName">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Rafy.Data.LiteDataColumn.TypeName">
            <summary>
            类型名(字符型)
            </summary>
        </member>
        <member name="P:Rafy.Data.LiteDataColumn.Type">
            <summary>
            列的类型。
            <remarks>只能是基础数据类型。（mscorlib 程序集中定义的类型）</remarks>
            </summary>
        </member>
        <member name="T:Rafy.Data.LiteDataColumnCollection">
            <summary>
            列定义集合
            </summary>
            <remarks>
            因为考虑到执行的sql语句中返回的schema和函数中对应的名称会有不同，
            所以需要手工定义Column，如果实际情况中绝大多数情况都是相同的话，
            可以考虑直接从IDataReader中生成列定义
            </remarks>
            Title: ColumnCollection
            Author: Steven
            Version: 1.0
            History:
                2006-04-15 Steven [创建] 
        </member>
        <member name="P:Rafy.Data.LiteDataColumnCollection.Item(System.String)">
            <summary>
            查找指定名称的列。
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.LiteDataColumnCollection.IndexOf(System.String)">
            <summary>
            return the index of a column according it's name.
            </summary>
            <param name="columnName">Column Name. Ignore case.</param>
            <returns>-1 if not found.</returns>
        </member>
        <member name="M:Rafy.Data.LiteDataColumnCollection.Find(System.String)">
            <summary>
            查找指定名称的列。
            
            如果没有找到，则返回 null。
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Data.LiteDataRow">
            <summary>
            数据容器行
            <remarks>
            用于存储行数据。
            空值使用 <c>null</c> 表示，而不是 <see cref="F:System.DBNull.Value"/>。
            </remarks>
            </summary>
            Title: DataContainerRow
            Author: Steven
            Version: 1.0
            History:
                2006-03-17 Steven [创建] 
                2013-06-07 Huqf [使用 Convert 类来进行类型转换，防止 Oracle 中一些数据类型的转换失败。] 
        </member>
        <member name="P:Rafy.Data.LiteDataRow.Item(System.Int32)">
            <summary>
            获取或设置指定列号的数据。
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.LiteDataRow.Item(System.String)">
            <summary>
            获取或设置指定列的数据。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.LiteDataRow.Item(Rafy.IHasName)">
            <summary>
            获取或设置指定列的数据。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.LiteDataRow.Table">
            <summary>
            所属表格对象。
            </summary>
        </member>
        <member name="P:Rafy.Data.LiteDataRow.Values">
            <summary>
            原始数据
            </summary>
        </member>
        <member name="P:Rafy.Data.LiteDataRow.FieldCount">
            <summary>
            当前行的列的个数。
            </summary>
        </member>
        <member name="M:Rafy.Data.LiteDataRow.GetValuesByIndex(System.Int32[])">
            <summary>
            传入一个Index数组，返回对应的值，当传入的Index为<value>-1</value>时，其对应的值为<value>Null</value>.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Data.LiteDataTable">
            <summary>
            一个轻量级的数据表格容器。
            
            LiteDataTable 中的空值不是 DBNull
            <remarks>
            用于跨进程传递数据。
            </remarks>
            </summary>
            Title: DataContainer
            Author: Steven
            Version: 1.0
            History:
                2006-03-17 Steven [创建] 
        </member>
        <member name="P:Rafy.Data.LiteDataTable.Columns">
            <summary>
            列定义集合
            </summary>
        </member>
        <member name="P:Rafy.Data.LiteDataTable.Rows">
            <summary>
            行集合
            </summary>
        </member>
        <member name="M:Rafy.Data.LiteDataTable.NewRow">
            <summary>
            创建一个拥有同样列数的行对象。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.LiteDataTable.Item(System.Int32)">
            <summary>
            根据行号获取对应的行。
            </summary>
            <param name="rowIndex">行索引号</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.LiteDataTable.Item(System.Int32,System.Int32)">
            <summary>
            根据行列号获取数据。
            </summary>
            <param name="rowIndex">行索引号</param>
            <param name="columnIndex">列索引号</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.LiteDataTable.Item(System.Int32,System.String)">
            <summary>
            根据行、列获取数据。
            </summary>
            <param name="rowIndex">行索引号</param>
            <param name="columnName">列名。忽略大小写。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.LiteDataTable.GetRowData(System.Int32[])">
            <summary>
            此方法暂时不公开。以后再说。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.LiteDataTable.ToDataTable">
            <summary>
            构造一个 DataTable 并把数据拷贝到其中。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Data.LiteDataTableAdapter">
            <summary>
            数据容器帮助类
            </summary>
            Title: DataContainerUtil
            Author: Steven
            Version: 1.0
            History:
                2006-04-15 Steven [创建] 
                2007-06-07 jianghaoqun [添加功能 FillDataContainer()]
                2007-06-13 Steven 添加FillDatawindowChild重载
        </member>
        <member name="M:Rafy.Data.LiteDataTableAdapter.Fill(Rafy.Data.LiteDataTable,System.Data.IDataReader)">
            <summary>
            根据SQL Command返回的IDataReader填充数据容器
            <para>
            对于DBNull的值，填充null
            </para>
            </summary>
            <param name="dataTable">数据容器</param>
            <param name="reader">SQL语句返回的</param>
        </member>
        <member name="M:Rafy.Data.LiteDataTableAdapter.AddColumns(Rafy.Data.LiteDataTable,System.Data.IDataReader)">
            <summary>
            使用 IDataReader 中的结构为指定的表格添加列。
            </summary>
            <param name="dataTable"></param>
            <param name="reader"></param>
        </member>
        <member name="M:Rafy.Data.LiteDataTableAdapter.Fill(Rafy.Data.LiteDataTable,System.Data.DataTable)">
            <summary>
            把DataTable填充到数据容器中，方便填充数据到DataWindow
            </summary>
            <param name="dataTable">数据容器</param>
            <param name="dt">DataTable</param>
            <Author>jianghaoqun 2007-06-07</Author>
        </member>
        <member name="T:Rafy.Data.LocalTransactionBlock">
            <summary>
            表示一个本地数据库事务代码块。（Local 的意思是本地事务，不使用分布式事务。）
            
            注意：
            * 多个数据库之间的事务，将会完全独立，互不干扰。
            * 一个事务的代码只能在同一个线程中执行。（事务是存储在当前线程中的。多线程之间不共享事务。）
            * 如果想主动使用分布式事务，请在最外层使用 ADO.NET 的 TransactionScope 类。
            </summary>
        </member>
        <member name="F:Rafy.Data.LocalTransactionBlock._rollback">
            <summary>
            是否已经提交完成。
            </summary>
        </member>
        <member name="F:Rafy.Data.LocalTransactionBlock._wholeRoolback">
            <summary>
            是否需要把整个事务回滚。
            </summary>
        </member>
        <member name="P:Rafy.Data.LocalTransactionBlock.ContextItems">
            <summary>
            所使用的存储位置
            </summary>
        </member>
        <member name="M:Rafy.Data.LocalTransactionBlock.#ctor(Rafy.Data.DbSetting,System.Data.IsolationLevel)">
            <summary>
            构造一个本地事务代码块
            </summary>
            <param name="dbSetting">数据库配置</param>
            <param name="level">
            此级别只在最外层的代码块中有效。
            </param>
        </member>
        <member name="P:Rafy.Data.LocalTransactionBlock.DbSetting">
            <summary>
            对应的数据库配置
            </summary>
        </member>
        <member name="P:Rafy.Data.LocalTransactionBlock.IsolationLevel">
            <summary>
            对应的事务孤立级别
            </summary>
        </member>
        <member name="P:Rafy.Data.LocalTransactionBlock.WholeTransaction">
            <summary>
            当前范围块正在使用的数据库事务。
            </summary>
        </member>
        <member name="M:Rafy.Data.LocalTransactionBlock.Complete">
            <summary>
            提交本事务。
            </summary>
        </member>
        <member name="M:Rafy.Data.LocalTransactionBlock.BeginTransaction">
            <summary>
            子类实现此方法进入指定库的事务。
            
            注意，该方法只会在最外层的 using 块中被调用一次。
            返回的事务，由基类负责它的 Commit、Rollback 和 Dispose，子类不需要管理。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.LocalTransactionBlock.DisposeTransaction(System.Data.IDbTransaction)">
            <summary>
            子类实现此方法释放指定的事务。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.LocalTransactionBlock.GetCurrentTransactionBlock(Rafy.Data.DbSetting)">
            <summary>
            获取指定数据库对应的当前最内部的 <see cref="T:Rafy.Data.LocalTransactionBlock"/>。
            </summary>
            <param name="dbSetting">The database setting.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Data.PagingHelper">
            <summary>
            分页算法帮助类
            </summary>
        </member>
        <member name="M:Rafy.Data.PagingHelper.MemoryPaging(System.Data.IDataReader,System.Action{System.Data.IDataReader},Rafy.PagingInfo)">
            <summary>
            使用 IDataReader 的内存分页读取方案。
            </summary>
            <param name="reader"></param>
            <param name="rowReader">每一行数据，会调用此方法进行调取。</param>
            <param name="pagingInfo">分页信息。如果这个参数不为空，则使用其中描述的分页规则进行内存分页查询。</param>
        </member>
        <member name="M:Rafy.Data.Providers.ConverterFactory.GetFactory(System.String)">
            <summary>
            以快速键值对照来获取 DbProviderFactory。
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="F:Rafy.Data.Providers.ConverterFactory.ReParameterName">
            <summary>
            在 FormatSQL 中的参数格式定义。
            </summary>
        </member>
        <member name="T:Rafy.Data.Providers.ISqlProvider">
            <summary>
            此接口用于把可用于String.Format格式的字符串转换为特定数据库格式的字符串
            </summary>
        </member>
        <member name="M:Rafy.Data.Providers.ISqlProvider.ConvertToSpecialDbSql(System.String)">
            <summary>
            把可用于String.Format格式的字符串转换为特定数据库格式的字符串
            </summary>
            <param name="commonSql">可用于String.Format格式的字符串</param>
            <returns>可用于特定数据库的sql语句</returns>
        </member>
        <member name="M:Rafy.Data.Providers.ISqlProvider.GetParameterName(System.Int32)">
            <summary>
            返回用于
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.Providers.SqlServerBackuper.BackupDatabase(System.String,System.String,System.Boolean)">
            <summary>
            Backup a special database
            </summary>
            <param name="databaseName"></param>
            <param name="filename">database file path to save.</param>
            <param name="isErase">if exists, whether to delete current file.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.Providers.SqlServerBackuper.RestoreDatabase(System.String,System.String)">
            <summary>
            restore a special database from a file
            </summary>
            <param name="databaseName"></param>
            <param name="filename">the file path which is a database backup</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.Providers.SqlServerBackuper.DealFile(System.String,System.Boolean)">
            <summary>
            处理文件
            </summary>
            <param name="filename">文件名</param>
            <param name="isErase">是否擦除</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Extendable">
            <summary>
            一个可进行简单属性扩展的类型
            </summary>
        </member>
        <member name="P:Rafy.Extendable.ExtendedProperties">
            <summary>
            WCF 序列化使用。
            </summary>
        </member>
        <member name="P:Rafy.Extendable.ExtendedPropertiesCount">
            <summary>
            返回当前已经扩展的属性个数。
            </summary>
        </member>
        <member name="P:Rafy.Extendable.Item(System.String)">
            <summary>
            用于扩展的属性列表。
            
            注意，如果设置 null 值，则表示清空该属性。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Extendable.GetPropertyOrDefault``1(System.String,``0)">
            <summary>
            获取指定名称的扩展属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Extendable.SetExtendedProperty(System.String,System.Object)">
            <summary>
            设置某个扩展属性为指定的值。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.Extendable.SetExtendedProperty(System.String,System.Boolean)">
            <summary>
            设置某个扩展属性为指定的值。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.Extendable.GetExtendedProperties">
            <summary>
            获取已经设置的所有的扩展属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Extendable.OnExtendedPropertyChanging(System.String,System.Object)">
            <summary>
            扩展属性变化前事件。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.Extendable.OnExtendedPropertyChanged(System.String)">
            <summary>
            扩展属性变化后事件。
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Rafy.IEnumerableExtension.JumpToPage``1(System.Linq.IQueryable{``0},Rafy.PagingInfo)">
            <summary>
            进行指定的分页操作。
            
            如果分页信息指定了要统计所有的行数，则立刻执行 Count 方法获取所有行数。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="models">The models.</param>
            <param name="pagingInfo">The paging information.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">索引不能是负数。</exception>
        </member>
        <member name="M:Rafy.IEnumerableExtension.JumpToPage``1(System.Collections.Generic.IEnumerable{``0},Rafy.PagingInfo)">
            <summary>
            进行指定的分页操作。
            
            如果分页信息指定了要统计所有的行数，则立刻执行 Count 方法获取所有行数。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="models">The models.</param>
            <param name="pagingInfo">The paging information.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">索引不能是负数。</exception>
        </member>
        <member name="M:Rafy.IEnumerableExtension.AsReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>
            转换为一个只读的集合。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="orignalCollections"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.StringExtension.Cut(System.String,System.Int32,System.String)">
            <summary>
            if this string's length is more than size,
            cut the excessive part and append another string.
            </summary>
            <param name="str"></param>
            <param name="size">whether longer than this size</param>
            <param name="appendMe">if longer, append this string</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.StringExtension.Cut(System.String,System.Int32)">
            <summary>
            if this string's length is more than size,
            cut the excessive part and append another string.
            </summary>
            <param name="str"></param>
            <param name="size">whether longer than this size</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.StringExtension.CutChinese(System.String,System.Int32,System.String)">
            <summary>
            Cut a string by a english word size.
            CutChinese("abcdefg",3,"...") => "abc..."
            CutChinese("a胡庆访",3,"...") => "a胡..."
            CutChinese("胡庆访",3,"...")  => "胡..."
            </summary>
            <param name="str"></param>
            <param name="maxSize">the max size of English chars.</param>
            <param name="appendMe">if longer, append this string. This value could be null.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.StringExtension.CutChinese(System.String,System.Int32)">
            <summary>
            Cut a string by a english word size.
            CutChinese("abcdefg",3) => "abc"
            CutChinese("a胡庆访",3) => "a胡"
            CutChinese("胡庆访",3)  => "胡"
            </summary>
            <param name="str"></param>
            <param name="maxSize">the max size of English chars.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.StringExtension.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            比较两个字符串是否相等。忽略大小写
            </summary>
            <param name="str"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.StringExtension.IsAllWhite(System.String)">
            <summary>
            judge this string is :
            null/String.Empty/all white spaces.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.StringExtension.TrimNull(System.String)">
            <summary>
            Removes all leading and trailing white-space characters from the current System.String object.
            if it is null, return the string.Empty.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.SystemExtension.CastTo``1(System.Object)">
            <summary>
            强制转换当前对象为指定类型。
            
            传入的对象为空，或者转换失败，则会抛出异常。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.IExtendable">
            <summary>
            可附加参数的行为
            
            可以给元数据附加一些额外的参数
            </summary>
        </member>
        <member name="P:Rafy.IExtendable.ExtendedPropertiesCount">
            <summary>
            返回当前已经扩展的属性个数。
            </summary>
        </member>
        <member name="P:Rafy.IExtendable.Item(System.String)">
            <summary>
            通过属性名称设置/获取某个值。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.IExtendable.GetPropertyOrDefault``1(System.String,``0)">
            <summary>
            获取指定名称的扩展属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.IExtendable.SetExtendedProperty(System.String,System.Object)">
            <summary>
            设置某个扩展属性为指定的值。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.IExtendable.GetExtendedProperties">
            <summary>
            获取已经设置的所有的扩展属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.IExtendableExtension.CopyExtendedProperties(Rafy.IExtendable,Rafy.IExtendable)">
            <summary>
            从特定的参数存储器中拷贝所有自定义参数
            </summary>
            <param name="a"></param>
            <param name="target"></param>
        </member>
        <member name="T:Rafy.IHasName">
            <summary>
            一个拥有名称的对象。
            </summary>
        </member>
        <member name="P:Rafy.IHasName.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Rafy.FileLogger">
            <summary>
            一个默认使用文件进行记录的日志器。
            </summary>
        </member>
        <member name="M:Rafy.FileLogger.#ctor">
            <summary>
            构造一个默认的文件记录器。
            </summary>
        </member>
        <member name="P:Rafy.FileLogger.ExceptionLogFileName">
            <summary>
            错误日志的文件名。
            默认为：ExceptionLog.txt。
            </summary>
        </member>
        <member name="P:Rafy.FileLogger.SqlTraceFileName">
            <summary>
            默认使用配置文件中的 Rafy.FileLogger.SqlTraceFileName 配置项。
            </summary>
        </member>
        <member name="P:Rafy.FileLogger.EmbadParameters">
            <summary>
            把所有的参数嵌入到 Sql 语句中。（方便开发者粘贴并调试）
            默认为 true。
            </summary>
        </member>
        <member name="M:Rafy.FileLogger.LogError(System.String,System.Exception)">
            <summary>
            记录某个已经生成的异常到文件中。
            </summary>
            <param name="title">异常对应的标题，用于描述当前异常的信息。</param>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.FileLogger.LogDbAccessed(System.String,System.Data.IDbDataParameter[],Rafy.Data.DbConnectionSchema,System.Data.IDbConnection)">
            <summary>
            记录 Sql 执行过程。
            把 SQL 语句及参数，写到 'Rafy.FileLogger.SqlTraceFileName' 配置所对应的文件中。
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <param name="connectionSchema"></param>
            <param name="connection"></param>
        </member>
        <member name="M:Rafy.FileLogger.WriteSqlAndParameters(System.Text.StringBuilder,System.String,System.Data.IDbDataParameter[],Rafy.Data.DbConnectionSchema)">
            <summary>
            把 Sql 和 参数写入到 content 中。
            </summary>
            <param name="content"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <param name="connectionSchema"></param>
        </member>
        <member name="T:Rafy.Logger">
            <summary>
            一个简单的日志记录类。
            
            目前只有处理异常的方法。
            </summary>
        </member>
        <member name="M:Rafy.Logger.SetImplementation(Rafy.LoggerBase)">
            <summary>
            使用具体的日志记录器来接管本 API。
            </summary>
            <param name="loggerImpl"></param>
        </member>
        <member name="M:Rafy.Logger.LogError(System.String,System.Exception)">
            <summary>
            记录某个已经生成的异常到文件中。
            </summary>
            <param name="title">异常对应的标题，用于描述当前异常的信息。</param>
            <param name="e"></param>
        </member>
        <member name="P:Rafy.Logger.DbAccessedCount">
            <summary>
            返回系统运行到现在，一共记录了多少次 Sql 语句。
            </summary>
        </member>
        <member name="P:Rafy.Logger.ThreadDbAccessedCount">
            <summary>
            返回当前线程运行到现在，一共记录了多少次 Sql 语句。
            </summary>
        </member>
        <member name="P:Rafy.Logger.EnableSqlObervation">
            <summary>
            是否启用 Sql 查询监听。 默认为 false。
            打开后，DbAccessed、ThreadDbAccessed 两个事件才会发生。这样才可以监听每一个被执行 Sql。
            </summary>
        </member>
        <member name="E:Rafy.Logger.DbAccessed">
            <summary>
            发生了数据访问时的事件。
            </summary>
        </member>
        <member name="E:Rafy.Logger.ThreadDbAccessed">
            <summary>
            当前线程，发生了数据访问时的事件。
            </summary>
        </member>
        <member name="M:Rafy.Logger.LogDbAccessed(System.String,System.Data.IDbDataParameter[],Rafy.Data.DbConnectionSchema,System.Data.IDbConnection)">
            <summary>
            记录 Sql 执行过程。
            </summary>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
            <param name="connectionSchema">The connection schema.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="T:Rafy.Logger.DbAccessedEventArgs">
            <summary>
            数据访问事件参数。
            </summary>
        </member>
        <member name="P:Rafy.Logger.DbAccessedEventArgs.Sql">
            <summary>
            执行的 Sql
            </summary>
        </member>
        <member name="P:Rafy.Logger.DbAccessedEventArgs.Parameters">
            <summary>
            所有的参数值。
            </summary>
        </member>
        <member name="P:Rafy.Logger.DbAccessedEventArgs.ConnectionSchema">
            <summary>
            对应的数据库连接
            </summary>
        </member>
        <member name="T:Rafy.LoggerBase">
            <summary>
            日志记录器。
            </summary>
        </member>
        <member name="M:Rafy.LoggerBase.LogError(System.String,System.Exception)">
            <summary>
            记录某个已经生成的异常到文件中。
            </summary>
            <param name="title"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.LoggerBase.LogDbAccessed(System.String,System.Data.IDbDataParameter[],Rafy.Data.DbConnectionSchema,System.Data.IDbConnection)">
            <summary>
            记录 Sql 执行过程。
            </summary>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
            <param name="connectionSchema">The connection schema.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="T:Rafy.PagingInfo">
            <summary>
            this indicates a pager info,
            includes page number, page size, and total count;
            Note!
            Don't use null to indicates a empty paging information, use <see cref="F:Rafy.PagingInfo.Empty" /> instead.
            </summary>
        </member>
        <member name="F:Rafy.PagingInfo._totalCount">
            <summary>
            If this value is positive or zero, it indicates the count.
            Otherwise, it means "need count all items".
            </summary>
        </member>
        <member name="M:Rafy.PagingInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.PagingInfo"/> class.
            Its pageNumber will be set to 1, and pageSize will be set to 10.
            </summary>
        </member>
        <member name="M:Rafy.PagingInfo.#ctor(System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.PagingInfo"/> class.
            this constructor indicates that does not retrieve count information from persistence.
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:Rafy.PagingInfo.#ctor(System.Int64,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.PagingInfo"/> class.
            this constructor indicates whether to retrieve count information from persistence.
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="isNeedCount">is need retrieve count of all records(if it is true,it will retrieve count info from persistence)</param>
        </member>
        <member name="M:Rafy.PagingInfo.#ctor(System.Int64,System.Int32,System.Int64)">
            <summary>
            construct with a totalCount
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="totalCount"></param>
        </member>
        <member name="M:Rafy.PagingInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化构造函数。
            
            需要更高安全性，加上以下这句：
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Rafy.PagingInfo.IsNeedCount">
            <summary>
            Whether need to retrieve count of all records
            (if it's true, it means the DAL should retrieve count info from database.)
            </summary>
        </member>
        <member name="P:Rafy.PagingInfo.TotalCount">
            <summary>
            Count of all records
            </summary>
        </member>
        <member name="P:Rafy.PagingInfo.PageSize">
            <summary>
            size of a page
            </summary>
        </member>
        <member name="P:Rafy.PagingInfo.PageNumber">
            <summary>
            current page number.
            start from 1.
            </summary>
        </member>
        <member name="P:Rafy.PagingInfo.PageCount">
            <summary>
            Gets the total page count, if <see cref="P:Rafy.PagingInfo.TotalCount"/> has positive value.
            </summary>
        </member>
        <member name="P:Rafy.PagingInfo.HasPreviousPage">
            <summary>
            Indicates whether current page is not the first one.
            </summary>
        </member>
        <member name="P:Rafy.PagingInfo.HasNextPage">
            <summary>
            Indicates whether current page is not the last one.
            </summary>
        </member>
        <member name="F:Rafy.PagingInfo.Empty">
            <summary>
            A singleton instance indicates there is no paging action.
            </summary>
        </member>
        <member name="M:Rafy.PagingInfo.IsEmpty">
            <summary>
            Indicates is this pagingInfo a nonsence.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.PagingInfo.IsNullOrEmpty(Rafy.PagingInfo)">
            <summary>
            Indicates is this pagingInfo a nonsence.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.EmptyPagingInfo">
            <summary>
            不进行分页查询的分页信息。
            
            一般情况下，效果等同于传入 null 值的 PagingInfo。
            在使用多参数查询时，则只能使用这个对象，而不能使用 null 查询。
            </summary>
        </member>
        <member name="M:Rafy.EmptyPagingInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化构造函数。
            
            需要更高安全性，加上以下这句：
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Rafy.EmptyPagingInfo.SSH">
            <summary>
            Singleton Serialization Helper
            </summary>
        </member>
        <member name="F:Rafy.Reflection.DynamicMethodHandle.Method">
            <summary>
            对应的方法
            </summary>
        </member>
        <member name="F:Rafy.Reflection.DynamicMethodHandle.DynamicMethod">
            <summary>
            动态生成的代理方法
            </summary>
        </member>
        <member name="F:Rafy.Reflection.DynamicMethodHandle.HasFinalArrayParam">
            <summary>
            最后一个参数是否为一个标记了 param 标记的数组对象。
            </summary>
        </member>
        <member name="F:Rafy.Reflection.DynamicMethodHandle.MethodParamsLength">
            <summary>
            方法参数的长度
            </summary>
        </member>
        <member name="F:Rafy.Reflection.DynamicMethodHandle.FinalArrayElementType">
            <summary>
            如果 HasFinalArrayParam 为 true，那么此属性表示最后一个数组中的元素的类型。
            </summary>
        </member>
        <member name="T:Rafy.Reflection.DynamicCtorDelegate">
            <summary>
            Delegate for a dynamic constructor method.
            </summary>
        </member>
        <member name="T:Rafy.Reflection.DynamicMethodDelegate">
            <summary>
            Delegate for a dynamic method.
            </summary>
            <param name="target">
            Object containg method to invoke.
            </param>
            <param name="args">
            Parameters passed to method.
            </param>
        </member>
        <member name="T:Rafy.Reflection.DynamicMemberGetDelegate">
            <summary>
            Delegate for getting a value.
            </summary>
            <param name="target">Target object.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Reflection.DynamicMemberSetDelegate">
            <summary>
            Delegate for setting a value.
            </summary>
            <param name="target">Target object.</param>
            <param name="arg">Argument value.</param>
        </member>
        <member name="M:Rafy.Reflection.ExpressionHelper.GetRuntimeProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取某个属性表达式对应的属性元数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.ExpressionHelper.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取某个属性表达式对应的属性名称
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.MemberInfoExtension.GetTypeMarked``1(System.Reflection.Assembly)">
            <summary>
            获取程序集中标记了某标记的所有类型。
            </summary>
            <typeparam name="TAttr"></typeparam>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.MemberInfoExtension.GetSingleAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            找到member的指定Attribute的唯一标记实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.MemberInfoExtension.HasMarked``1(System.Reflection.MemberInfo)">
            <summary>
            是否标记了指定的Attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Reflection.MethodCaller">
            <summary>
            本类提供了使用 Emit 方式来高速调用字段、属性、方法的一些方法。
            所有调用过的被生成的方法，都会被存储起来，以方便再次调用。
            </summary>
        </member>
        <member name="P:Rafy.Reflection.MethodCaller.StoreCount">
            <summary>
            Gets the store count.
            </summary>
            <value>
            The store count.
            </value>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.ClearStore">
            <summary>
            Clears the store.
            </summary>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.CallPropertyGetter(System.Object,System.String)">
            <summary>
            Invokes a property getter using dynamic
            method invocation.
            </summary>
            <param name="obj">Target object.</param>
            <param name="property">Property to invoke.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.CallPropertySetter(System.Object,System.String,System.Object)">
            <summary>
            Invokes a property setter using dynamic
            method invocation.
            </summary>
            <param name="obj">Target object.</param>
            <param name="property">Property to invoke.</param>
            <param name="value">New value for property.</param>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.CallMethodIfImplemented(System.Object,System.String,System.Object[],System.Object@)">
            <summary>
            使用反射动态调用一个方法。
            如果指定对象已经实现了这个方法，则直接调用，否则直接返回。
            </summary>
            <param name="obj">The object.</param>
            <param name="method">The method.</param>
            <param name="parameters">
            方法的参数数组。
            注意，为了能尽量正确地找到方法，数组中的每一个元素应该尽量不是 null。如果有参数传入 null 时，可以传入参数的类型来代替。
            在有任意一个参数的类型未指定的情况下，会对方法进行模糊匹配，同时不再对找到的结果方法 Emit 生成方法并缓存。
            </param>
            <param name="result">如果成功调用，则返回方法的返回值。</param>
            <returns>
            返回是否在目标对象上成功调用了该方法。
            </returns>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            Uses reflection to dynamically invoke a method,
            throwing an exception if it is not
            implemented on the target object.
            </summary>
            <param name="obj">
            Object containing method.
            </param>
            <param name="method">
            Name of the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.CallMethod(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Uses reflection to dynamically invoke a method,
            throwing an exception if it is not
            implemented on the target object.
            </summary>
            <param name="obj">
            Object containing method.
            </param>
            <param name="info">
            MethodInfo for the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.CallMethod(System.Object,Rafy.Reflection.DynamicMethodHandle,System.Object[])">
            <summary>
            Uses reflection to dynamically invoke a method,
            throwing an exception if it is not implemented
            on the target object.
            </summary>
            <param name="obj">
            Object containing method.
            </param>
            <param name="methodHandle">
            MethodHandle for the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.CallMethodCore(System.Object,System.String,System.Object[],System.Boolean,System.Object@)">
            <summary>
            使用反射动态调用一个方法。
            如果指定对象已经实现了这个方法，则直接调用，否则直接返回。
            </summary>
            <param name="obj">The object.</param>
            <param name="method">The method.</param>
            <param name="parameters">方法的参数数组。
            注意，为了能尽量正确地找到方法，数组中的每一个元素应该尽量不是 null。如果有参数传入 null 时，可以传入参数的类型来代替。
            在有任意一个参数的类型未指定的情况下，会对方法进行模糊匹配。</param>
            <param name="errorIfNotFound">如果没有找到对应的方法，是否需要抛出异常。</param>
            <param name="result">如果成功调用，则返回方法的返回值。</param>
            <returns>
            返回是否在目标对象上成功调用了该方法。
            </returns>
            <exception cref="T:System.InvalidProgramException"></exception>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.FindMethodsOnNullParam(System.Type,System.String,System.Type[])">
            <summary>
            如果参数列表中存在 null 类型时，使用模糊的匹配方式。
            </summary>
            <param name="objType"></param>
            <param name="methodName"></param>
            <param name="paramters"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.IsParamTypeMatched(System.Type,System.Type)">
            <summary>
            判断指定的实参是否与方法中的某形参匹配。
            </summary>
            <param name="parameterType">实参类型。</param>
            <param name="targetType">形参的类型。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            Uses reflection to locate a matching method
            on the target object.
            </summary>
            <param name="objectType">Type of object containing method.</param>
            <param name="method">Name of the method.</param>
            <param name="parameters">Parameters to pass to method.</param>
            <returns></returns>
            <exception cref="T:System.InvalidProgramException"></exception>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.FindMethod(System.Type,System.String,System.Type[])">
            <summary>
            查找指定类型上对应参数类型的指定方法。
            从子类到基类逐个检查。同时，也检测私有的方法。
            </summary>
            <param name="objectType">包含这个方法的类型。</param>
            <param name="method">方法名。</param>
            <param name="types">方法的所有参数类型。</param>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.FindMethod(System.Type,System.String,System.Int32)">
            <summary>
            Returns information about the specified
            method, finding the method based purely
            on the method name and number of parameters.
            </summary>
            <param name="objectType">
            Type of object containing method.
            </param>
            <param name="method">
            Name of the method.
            </param>
            <param name="parameterCount">
            Number of parameters to pass to method.
            </param>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.IsLastArray(System.Reflection.ParameterInfo[])">
            <summary>
            判断某个方法的形参列表中是否拥有一个可接受多个实际参数的数组类型参数：
            方法只有一个数组类型的参数，或者方法的形参列表中的最后一个参数被标记为数组型。
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.IsParamArray(System.Reflection.ParameterInfo[])">
            <summary>
            判断某个方法的形参列表中的最后一个参数被标记为数组型(params)。
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Reflection.NullParameter">
            <summary>
            表示一个空参数。
            </summary>
        </member>
        <member name="T:Rafy.Reflection.ObjectHelper">
            <summary>
            object 类型的帮助方法。
            </summary>
        </member>
        <member name="M:Rafy.Reflection.ObjectHelper.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            获取指定属性的值
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.ObjectHelper.GetPropertyValue(System.Object,System.String)">
            <summary>
            获取指定属性的值
            
            使用方法：
            var value = obj.GetStepPropertyValue("Property1.Property2.Property3");
            </summary>
            <param name="obj"></param>
            <param name="propertyName">
            级联属性过滤串,格式如:属性.子属性.子子属性...
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.ObjectHelper.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            设置指定属性的值
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="T:Rafy.Reflection.Reflect`1">
            <summary>
            Provides strong-typed reflection of the <typeparamref name="TTarget"/> 
            type.
            </summary>
            <typeparam name="TTarget">Type to reflect.</typeparam>
        </member>
        <member name="M:Rafy.Reflection.Reflect`1.GetMethod(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.Reflect`1.GetMethod``1(System.Linq.Expressions.Expression{System.Action{`0,``0}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.Reflect`1.GetMethod``2(System.Linq.Expressions.Expression{System.Action{`0,``0,``1}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:Rafy.Reflection.Reflect`1.GetMethod``3(System.Linq.Expressions.Expression{System.Action{`0,``0,``1,``2}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:Rafy.Reflection.Reflect`1.GetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the property.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Member is not a property</exception>
        </member>
        <member name="M:Rafy.Reflection.Reflect`1.GetProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets the property represented by the lambda expression.
            </summary>
            <typeparam name="P">Type assigned to the property</typeparam>
            <param name="property">Property Expression</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Member is not a property</exception>
        </member>
        <member name="M:Rafy.Reflection.Reflect`1.GetField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the field represented by the lambda expression.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Member is not a field</exception>
        </member>
        <member name="T:Rafy.Reflection.TypeHelper">
            <summary>
            类型的一些帮助方法。
            </summary>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.GetHierarchy(System.Type,System.Type[])">
            <summary>
            获取继承层次列表，从子类到基类
            </summary>
            <param name="from">From.</param>
            <param name="exceptTypes">The except types.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.IsNumber(System.Type)">
            <summary>
            判断指定的类型是不是数字类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.GetDefaultValue(System.Type)">
            <summary>
            获取指定类型的默认值。
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.IgnoreNullable(System.Type)">
            <summary>
            如果是 Nullable 泛型类型，则返回内部的真实类型。
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.IsNullable(System.Type)">
            <summary>
            判断某个类型是否为 Nullable 泛型类型。
            </summary>
            <param name="targetType">需要判断的目标类型。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.IsGenericType(System.Type,System.Type)">
            <summary>
            判断指定的类型是否是一个指定的泛型类型。
            </summary>
            <param name="targetType">需要判断的目标类型。</param>
            <param name="genericType">泛型类型。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.IsEnumNullable(System.Type)">
            <summary>
            判断指定的类型是否是一个枚举类型，或者是一个可空的枚举类型。
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.SortByReference(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            根据引用关系来排列程序集。
            </summary>
            <param name="assemblies"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.CoerceValue(System.Type,System.Object)">
            <summary>
            强制把 value 的值变换为 desiredType
            </summary>
            <param name="desiredType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.CoerceValue(System.Type,System.Type,System.Object)">
            <summary>
            Attempts to coerce a value of one type into
            a value of a different type.
            </summary>
            <param name="desiredType">
            Type to which the value should be coerced.
            </param>
            <param name="valueType">
            Original type of the value.
            </param>
            
            <param name="value">
            The value to coerce.
            </param>
            <remarks>
            <para>
            If the desired type is a primitive type or Decimal, 
            empty string and null values will result in a 0 
            or equivalent.
            </para>
            <para>
            If the desired type is a Nullable type, empty string
            and null values will result in a null result.
            </para>
            <para>
            If the desired type is an enum the value's ToString()
            result is parsed to convert into the enum value.
            </para>
            </remarks>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.CoerceValue``1(System.Type,System.Object)">
            <summary>
            Attempts to coerce a value of one type into
            a value of a different type.
            </summary>
            <typeparam name="T">
            Type to which the value should be coerced.
            </typeparam>
            <param name="valueType">
            Original type of the value.
            </param>
            
            <param name="value">
            The value to coerce.
            </param>
            <remarks>
            <para>
            If the desired type is a primitive type or Decimal, 
            empty string and null values will result in a 0 
            or equivalent.
            </para>
            <para>
            If the desired type is a Nullable type, empty string
            and null values will result in a null result.
            </para>
            <para>
            If the desired type is an enum the value's ToString()
            result is parsed to convert into the enum value.
            </para>
            </remarks>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.CoerceValue``1(System.Object)">
            <summary>
            Attempts to coerce a value of one type into
            a value of a different type.
            </summary>
            <typeparam name="T">Type to which the value should be coerced.</typeparam>
            <param name="value">The value to coerce.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <remarks>
              <para>
            If the desired type is a primitive type or Decimal,
            empty string and null values will result in a 0
            or equivalent.
              </para>
              <para>
            If the desired type is a Nullable type, empty string
            and null values will result in a null result.
              </para>
              <para>
            If the desired type is an enum the value's ToString()
            result is parsed to convert into the enum value.
              </para>
            </remarks>
        </member>
        <member name="T:Rafy.Result">
            <summary>
            indicates the result of a normal invoking the "service"
            </summary>
        </member>
        <member name="F:Rafy.Result.SuccessMessage">
            <summary>
            A string message used by the success result.
            </summary>
        </member>
        <member name="F:Rafy.Result.FailedMessage">
            <summary>
            A string message used by the failed result.
            </summary>
        </member>
        <member name="M:Rafy.Result.#ctor(System.Boolean)">
            <summary>
            Message=string.Empty
            </summary>
            <param name="success"></param>
        </member>
        <member name="M:Rafy.Result.#ctor(System.String)">
            <summary>
            Success = false
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Rafy.Result.#ctor(System.Int32)">
            <summary>
            create a error message with its status.
            </summary>
            <param name="statusCode"></param>
        </member>
        <member name="M:Rafy.Result.#ctor(System.Object)">
            <summary>
            create a successful result with corresponding data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Rafy.Result.#ctor(System.Boolean,System.String)">
            <summary>
            create a result with its message.
            </summary>
            <param name="success"></param>
            <param name="message"></param>
        </member>
        <member name="M:Rafy.Result.#ctor(System.Boolean,System.Int32)">
            <summary>
            create a result by specifing its success status and a message.
            </summary>
            <param name="success"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Rafy.Result.#ctor(System.Int32,System.String)">
            <summary>
            create a failed result by its statusCode and a error message.
            </summary>
            <param name="statusCode"></param>
            <param name="message"></param>
        </member>
        <member name="M:Rafy.Result.#ctor(System.Boolean,System.Int32,System.String)">
            <summary>
            create a result by specifing all its status.
            </summary>
            <param name="success"></param>
            <param name="statusCode"></param>
            <param name="message"></param>
        </member>
        <member name="P:Rafy.Result.Success">
            <summary>
            Indicates this invoking is success or failed.
            When the StatusCode equals 1, Success equals true.
            </summary>
        </member>
        <member name="P:Rafy.Result.StatusCode">
            <summary>
            status code indecates the result type of this invoking.
            other:  other customized types.
            </summary>
        </member>
        <member name="P:Rafy.Result.Message">
            <summary>
            Represents the message from this invoking.
            if successed, this property represent some useful string.(eg. a html document.).
            if failed, this property represent a message that can be used to show to the end users.
            
            (this property doesn't return null.)
            </summary>
        </member>
        <member name="P:Rafy.Result.Data">
            <summary>
            the data result.
            </summary>
        </member>
        <member name="M:Rafy.Result.Reset">
            <summary>
            Reset this result to a unsuccessful status.
            </summary>
        </member>
        <member name="M:Rafy.Result.StatusEquals(Rafy.Result)">
            <summary>
            Indicates whether this instance's StatusCode and a specified object's StatusCode are equal.
            </summary>
            <param name="another"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.BytesFormatter">
            <summary>
            一个简单的二进制序列化类
            </summary>
        </member>
        <member name="P:Rafy.BytesFormatter.NowEncoding">
            <summary>
            Current Encoding to serialize/deserialize the object.
            </summary>
        </member>
        <member name="M:Rafy.BytesFormatter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Rafy.BytesFormatter.SerializeToBytes(System.Object)">
            <summary>
            Serialize the object to bytes
            </summary>
            <param name="x">the object to be serialized.(The type should marked a [Serializable] attribute)</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.BytesFormatter.Serialize(System.Object)">
            <summary>
            Serialize the object to string
            </summary>
            <param name="x">the object to be serialized.(The type should marked a [Serializable] attribute)</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.BytesFormatter.Deserialize(System.Byte[])">
            <summary>
            Deserialize the bytes to original object
            </summary>
            <param name="binaryData">the data which is storing the state of a object.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.BytesFormatter.Deserialize(System.String)">
            <summary>
            Deserialize the string to original object
            </summary>
            <param name="Data">the data which is storing the state of a object.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.IStateFormatter">
            <summary>
            Serializer
            </summary>
        </member>
        <member name="M:Rafy.IStateFormatter.Deserialize(System.String)">
            <summary>
            Deserialize a string which is storing the state of a object to the original object.
            </summary>
            <param name="serializedState"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.IStateFormatter.Serialize(System.Object)">
            <summary>
            Serialize a object to a string.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.XmlFormatter">
            <summary>
            A simple class to deal with xml serialize
            This class is thread safe
            </summary>
        </member>
        <member name="M:Rafy.XmlFormatter.#ctor(System.Type)">
            <summary>
            Construct a XmlFormatter to format a specific type
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Rafy.XmlFormatter.Serialize(System.Object)">
            <summary>
            Serialize a object of the specific type to a xml document.
            </summary>
            <param name="x">The object to be serialized.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.XmlFormatter.Deserialize(System.String)">
            <summary>
            Deserialize the xml to the original obecjt
            </summary>
            <param name="xml">xml document</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.TextFormatter.AggregateString(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Aggregate a array to a string which splitted by comma.
            </summary>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.TextFormatter.AggregateString(System.Collections.Generic.IEnumerable{System.String},System.Text.StringBuilder)">
            <summary>
            Aggregate a array to a string which splitted by comma.
            </summary>
            <param name="array"></param>
            <param name="buffer">share this variation</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.TextFormatter.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Aggregate a array to a string which splitted by comma.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="toString">The automatic string.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.TextFormatter.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Text.StringBuilder)">
            <summary>
            Aggregate a array to a string which splitted by comma.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="toString">The automatic string.</param>
            <param name="buffer">share this variation</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">toString</exception>
        </member>
        <member name="M:Rafy.TextFormatter.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String,System.Text.StringBuilder)">
            <summary>
            Aggregate a array to a string which splitted by comma.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="toString">The automatic string.</param>
            <param name="split">The split.</param>
            <param name="buffer">share this variation</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">toString</exception>
        </member>
        <member name="F:Rafy.TextFormatter.ReAllChinese">
            <summary>
            All chars are chinese words.
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReUrl">
            <summary>
            URL
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.RePhone">
            <summary>
            Telephone
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReMobilePhone">
            <summary>
            Mobile phone
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReNumber">
            <summary>
            All numbers, could be a negative number.(start with a '-')
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReUint">
            <summary>
            Positive integer
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReIPAddress">
            <summary>
            Indicates a IPV4 address
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReAllNumber">
            <summary>
            Is the string all number?
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReAllLetter">
            <summary>
            It the string all letters?
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReAllLetterOrNumber">
            <summary>
            Are the chars of the string all letters or numbers?
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReCSharpProgramable">
            <summary>
            is the string match the rule of C# programming.
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReScripts">
            <summary>
            script tag and its inner code.
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReEmail">
            <summary>
            E-Mail address
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReNewLine">
            <summary>
            new line
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReTags">
            <summary>
            XML tags
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReHTML">
            <summary>
            <![CDATA[
            XML tags and "&...;"
            eg. &nbsp; &bt;
            ]]>
            </summary>
        </member>
    </members>
</doc>
