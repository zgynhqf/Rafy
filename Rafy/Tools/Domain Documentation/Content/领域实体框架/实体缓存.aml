<?xml version="1.0" encoding="utf-8"?>
<topic id="6f0cbfca-e254-4219-bda1-34039e617df4" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <autoOutline />
    </introduction>

    <section address="intro">
      <title>简介</title>
      <content>
        <para>
          缓存 -- 日常开发常用基础组件之一。
        </para>
        <para>
          在 Rafy 这套框架里面也为大家提供了几个常用的缓存组件（不够还可以自己扩展）。
        </para>
        <mediaLink>
          <image xlink:href="Cache_01"/>
        </mediaLink>
        <list class="bullet">
          <listItem>
            <para>内存缓存(MemoryCache)</para>
            <para>　　使用当前服务器的内存或客户端所在电脑的内存缓存数据项。</para>
            <para>　　特点：速度快的要命。</para>
          </listItem>
          <listItem>
            <para>磁盘缓存(SQLCompactCache)</para>
            <para>　　使用 SQL Compact 本地数据库缓存数据项。</para>
            <para>　　特点：缓存数据项不会因为应用宕机或离线而丢失。</para>
          </listItem>
          <listItem>
            <para>每个 HTTP 请求的缓存(PerHttpRequestCache)</para>
            <para>　　在每个 http 请求中，第一次获取数据时进行一次缓存，在当前生命周期内可以直接从缓存中读取数据项。http 生命周期结束，缓存自动释放。</para>
            <para>　　特点：只能用于 .NET Web 应用程序。被缓存数据项仅在 http 生命周期内有效。</para>
            <para>　　建议：不要存放过大的数据。以避免增加 GC 的压力。</para>
          </listItem>
          <listItem>
            <para>使用内存缓存和磁盘缓存的二级缓存(HybirdCache)</para>
            <para>　　同时拥有内存缓存和磁盘缓存的特点。</para>
          </listItem>
        </list>
        <para>
          上面列出来了 Rafy 中实现的缓存组件，也说明了每个缓存组件的特点。那么具体使用时选用哪个组件呢？这没有一个固定答案，需要结合自己的应用程序的业务场景来选择。
        </para>
      </content>
    </section>

    <section address="appUsage">
      <title>使用示例</title>
      <content>
        <para>在 Cache 这个抽象类中提供了一个静态属性，也是 Rafy 缓存组件中默认的实现，即 MemoryCache。如果要使用其它缓存组件请参见下面的示例。</para>
        <list class="bullet">
          <listItem>
            <para>Cache 的默认实现（即 MemoryCache）的开箱即用的使用方式</para>
            <code language="cs">
              <![CDATA[// 添加缓存
var result = Cache.Default.Add("rafy", "rafy orm v5", null);
Assert.IsTrue(result);
            
// 获取缓存
var cacheItem = Cache.Default.Get("rafy");
Assert.AreEqual(cacheItem.ToString(), "rafy orm v5");

// 移除缓存
Cache.Default.Remove("rafy");]]>
            </code>
          </listItem>
          <listItem>
            <para>PerHttpRequestCache</para>
            <para>　　在一个 HTTP 生命周期内只需要 new 一次。尽量配合 IoC/DI 框架使用。</para>
            <code language="cs">
              <![CDATA[// 创建一个 PerHttpRequestCache 对象的实例
var preHttpRequestCache = new PerHttpRequestCache();

// 添加缓存
var result = preHttpRequestCache.Add("rafy", "rafy orm v5", null);
Assert.IsTrue(result);

// 获取缓存
var cacheItem = preHttpRequestCache.Get("rafy");
Assert.AreEqual(cacheItem.ToString(), "rafy orm v5");

// 移除缓存
preHttpRequestCache.Remove("rafy");]]>
            </code>
          </listItem>
          <listItem>
            <para>SQLCompactCache</para>
            <code language="cs">
              <![CDATA[// 创建一个 SQLCompactCache 对象的实例
var sqlCompactCache = new SQLCompactCache("rafy_cache.sdf");

// 添加缓存
var result = sqlCompactCache.Add("rafy", "rafy orm v5", null);
Assert.IsTrue(result);

// 获取缓存
var cacheItem = sqlCompactCache.Get("rafy");
Assert.AreEqual(cacheItem.ToString(), "rafy orm v5");

// 移除缓存
sqlCompactCache.Remove("rafy");]]>
            </code>
          </listItem>
          <listItem>
            <para>HybirdCache</para>
            <code language="cs">
              <![CDATA[// 创建一个 HybirdCache 对象的实例
var hybirdCache = new HybirdCache("rafy_cache.sdf");

// 添加缓存
var result = hybirdCache.Add("rafy", "rafy orm v5", null);
Assert.IsTrue(result);

// 获取缓存
var cacheItem = hybirdCache.Get("rafy");
Assert.AreEqual(cacheItem.ToString(), "rafy orm v5");

// 移除缓存
hybirdCache.Remove("rafy");]]>
            </code>
          </listItem>
        </list>
      </content>
    </section>

    <section address="implement">
      <title>扩展</title>
      <content>
        <para>
          在分布式环境中应用都是群集部署。大家使用缓存时一般会选择 Redis 或 Memcached 或 MongoDB 等等。目前 Rafy 并没有提供对上一句所说的这些分布式缓存框架的支持。
          但大家可以通过简单的扩展就让 Rafy 支持这些分布式缓存框架。假设我们要让 Rafy 支持 Redis 。
        </para>
        <para>示例代码</para>
        <code language="cs">
          <![CDATA[public sealed class RedisCache : Cache
{
    protected internal override StoredValue GetCacheItemCore(string region, string key)
    {
        // 使用 Redis 驱动获取指定域的缓存项
        throw new NotImplementedException();
    }

    protected internal override bool AddCore(string region, string key, StoredValue value)
    {
        // 使用 Redis 驱动添加缓存项到指定域
        throw new NotImplementedException();
    }

    protected internal override void RemoveCore(string region, string key)
    {
        // 使用 Redis 驱动移除指定域的缓存项
        throw new NotImplementedException();
    }

    protected internal override void ClearRegionCore(string region)
    {
        // 使用 Redis 驱动移除指定域的所有缓存项
        throw new NotImplementedException();
    }

    protected internal override void ClearCore()
    {
        // 使用 Redis 驱动移除所有缓存项
        throw new NotImplementedException();
    }
}]]></code>
      </content>
    </section>

    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
