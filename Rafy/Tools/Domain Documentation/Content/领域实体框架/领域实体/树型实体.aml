<?xml version="1.0" encoding="utf-8"?>
<topic id="6b1f358e-0590-4d63-8697-b0a80349c4b0" revisionNumber="1">
    <developerConceptualDocument
      xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
      xmlns:xlink="http://www.w3.org/1999/xlink">

        <introduction>
            <para>树型实体，也叫自关联实体，是一种常用的层次的、树状结构的实体类型。这种实体类型的每一个对象都可以包含多个本实体类型的对象作为它的树子节点，而树子节点还可以继续包含更多的树子节点。</para>
            <para>例如，有时某种分类可以设计为树型实体，这是因为类别下可以有更小的类别，而小类下还可以有更小的类别，这种包含关系可以是无极限的。</para>
            <autoOutline/>
        </introduction>

        <section address="code">
            <title>如何编写树型实体</title>
            <content>
                <para>对于树型实体，Rafy 框架在实体基类中已经给出了默认的实现，只需要在元数据配置中，编写以下代码即可：</para>
                <code language="cs">
                    <![CDATA[
protected override void ConfigMeta()
{
    //配置当前实体实树型实体
    Meta.SupportTree();

    //配置实体的所有属性都映射到数据表中。
    Meta.MapTable().MapAllPropertiesToTable();
}]]>
                </code>
            </content>
        </section>
        <section address="points">
            <title>特点</title>
            <content>
                <list class="bullet">
                    <listItem>
                        <para>配置为树型实体后，实体的两个属性 TreeIndex、TreePId 将会在数据库中映射为同名的两个字段。（未配置时，这两个属性会被忽略。）</para>
                    </listItem>
                    <listItem>
                        <para>TreePId 属性用于存储该对象在树型关系中的父对象 Id。</para>
                    </listItem>
                    <listItem>
                        <para>TreeIndex 是树节点的系统编号，由框架自动维护。</para>
                    </listItem>
                    <listItem>
                        <para>
                            <codeInline>EntityRepository</codeInline> 类中一些查询方法是面向树型实体的，例如查询某个节点下的所有子节点。这些功能，主要通过 TreeIndex 来做模糊匹配。所以 TreeIndex 不能被随意设置。
                        </para>
                    </listItem>
                    <listItem>
                        <para>可以通过 Entity.TreeParent 来获取或设置实体的树型父节点实体；通过 Entity.TreeChildren 来获取或设置实体的树型子节点集合。</para>
                        <!--<para>需要注意的是，这两个属性并不是懒加载属性，它们需要配合 EntityList 来使用。只有把一组有关系的树节点全部加载到 EntityList 集合中时，这两个属性的值才会被框架自动设置。</para>-->
                        <!--<para>一般情况下，开发人员主要是通过设置 TreeParent 或者维护 TreeChildren 集合来达到维护树节点间的父子关系。</para>-->
                    </listItem>
                </list>
            </content>
        </section>
        <section address="autoCode">
            <title>如何使用自动编码</title>
            <content>
                <para>默认情况下，框架为树型实体使用数字进行层次编码，例如一级节点编码为："1.","2.",...，二级节点编码为："1.1.","1.2.",...。如果期望使用其它形式的自动编码，可以使用以下代码在元数据中进行如下配置：</para>
                <code language="cs">
                    <![CDATA[
Meta.TreeIndexOption = new TreeIndexOption
{
    Seperator = '.',
    Layers = new string[][] {
        new string[]{"一", "二", "三", "四", "五", "六", "七", "八", "九"},
        new string[]{"1", "2", "3", "4", "5", "6", "7", "8", "9"}
    }
};]]>
                </code>
                <para>上述代码使得树型实体的第一层使用汉字的数字进行编码，第二层及以下层都使用数字进行编码，层与层之间使用 '.' 进行分隔。如："一.","一.1.","一.2.","一.2.1."等。</para>
            </content>
        </section>
        <section address="howToMigrate">
            <title>如何刷新 TreeIndex</title>
            <content>
                <para>某些情况下，需要对库中的 TreeIndex 进行重新整理。</para>
                <para>例如：当一个非树型的实体升级到树型实体后，虽然数据库的结构会自动升级完成，自动添加上 TreeIndex、TreePId 列。但是数据库中的 TreeIndex 列却是空的。</para>
                <para>这时，我们可以使用 <codeInline>TreeIndexHelper.ResetTreeIndex(EntityRepository repository)</codeInline> 方法来更新整个表中所有列的 TreeIndex。</para>
            </content>
        </section>

        <relatedTopics>
            <externalLink>
                <linkText>Rafy 领域实体框架 - 树型实体功能（自关联表）</linkText>
                <linkUri>http://www.cnblogs.com/zgynhqf/p/4133511.html</linkUri>
            </externalLink>
        </relatedTopics>
    </developerConceptualDocument>
</topic>
